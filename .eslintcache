[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\GraphTest.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"7"},{"size":661,"mtime":1609548489364,"results":"8","hashOfConfig":"9"},{"size":6554,"mtime":1609647658135,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3966,"mtime":1609822826858,"results":"12","hashOfConfig":"9"},{"size":13632,"mtime":1609826834986,"results":"13","hashOfConfig":"9"},{"size":5009,"mtime":1609554576206,"results":"14","hashOfConfig":"9"},{"size":1043,"mtime":1609819583587,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"asvjz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["33","34"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["35","36","37","38","39","40"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\GraphTest.js",["41","42","43"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["44"],"import { useState } from 'react';\r\nimport { Alert, Button, Container, Form } from 'react-bootstrap';\r\nimport { Calendar } from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport {c, getClickedDate, url, varToString} from './global_items';\r\n\r\nconst urlCheckExistingData = `${url}check-existing-data`;\r\nconst urlUploadData = `${url}upload-data`;\r\n\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction AddData () {\r\n  const [value, onChange] = useState(new Date());\r\n  const [date, setDate] = useState(null);\r\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\r\n  const [existingNapStart, setExistingNapStart] = useState('');\r\n  const [existingNapEnd, setExistingNapEnd] = useState('');\r\n  const [sleepAidItem, setSleepAidItem] = useState('');\r\n  const [sleepAidMg, setSleepAidMg] = useState('');\r\n  const [enterBedTime, setEnterBedTime] = useState('');\r\n  const [lightsOffTime, setLightsOffTime] = useState('');\r\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\r\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\r\n  const [arousalDuration, setArousalDuration] = useState('');\r\n  const [morningWakeTime, setMorningWakeTime] = useState('');\r\n  const [exitBedTime, setExitBedTime] = useState('');\r\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\r\n  const [qualityRating, setQualityRating] = useState('');\r\n\r\n  const [clickedDate, setClickedDate] = useState(null);\r\n\r\n  const checkExistingData = (clickedDate) => {\r\n    axios.post(urlCheckExistingData, {clickedDate: getClickedDate(clickedDate, 'mysql')})\r\n    .then(res => {\r\n      if (res.data.length > 0){\r\n        setClickedDate(getClickedDate(clickedDate, 'mysql'));\r\n\r\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\r\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napStartTime : '');\r\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\r\n        setSleepAidMg(res.data[0].setSleepAidMg ? res.data[0].setSleepAidMg : '');\r\n        setEnterBedTime(res.data[0].setEnterBedTime ? res.data[0].setEnterBedTime : '');\r\n        setLightsOffTime(res.data[0].setLightsOffTime ? res.data[0].setLightsOffTime : '');\r\n        setTimeToFallAsleep(res.data[0].setTimeToFallAsleep ? res.data[0].setTimeToFallAsleep : '');\r\n        setNumberTimesArousal(res.data[0].setNumberTimesArousal ? res.data[0].setNumberTimesArousal : '');\r\n        setArousalDuration(res.data[0].setArousalDuration ? res.data[0].setArousalDuration : '');\r\n        setMorningWakeTime(res.data[0].setMorningWakeTime ? res.data[0].setMorningWakeTime : '');\r\n        setExitBedTime(res.data[0].setExitBedTime ? res.data[0].setExitBedTime : '');\r\n        setMinutesEarlyWoke(res.data[0].setMinutesEarlyWoke ? res.data[0].setMinutesEarlyWoke : '');\r\n        setQualityRating(res.data[0].setQualityRating ? res.data[0].setQualityRating : '');\r\n\r\n        setExistingDataAlert(true);\r\n      } else {\r\n        setClickedDate(null);\r\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\r\n        for (let i = 0; i < dataFuncs.length; i++){\r\n          dataFuncs[i]('');\r\n        }\r\n        setExistingDataAlert(false);\r\n      }\r\n    })\r\n  } \r\n  const handleDataSubmit = () => {\r\n    axios.post(urlUploadData, {\r\n      clickedDate: clickedDate === '' ? null : clickedDate,\r\n      existingNapStart: existingNapStart === '' ? null : existingNapStart,\r\n      existingNapEnd: existingNapEnd === '' ? null : existingNapEnd,\r\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\r\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\r\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\r\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\r\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\r\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\r\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\r\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\r\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\r\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\r\n      qualityRating: qualityRating === '' ? null : qualityRating\r\n    })\r\n  };\r\n  let dateHeading;\r\n  let dateClickedYear;\r\n  if (date){\r\n    dateHeading = getClickedDate(date);\r\n    dateClickedYear = date.getFullYear();\r\n  }\r\n  const handleFormInput = (e) => {\r\n    c('e id', e.target.getAttribute('id_val'));\r\n    c('existnap value', e.target.value);\r\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\r\n      setExistingNapStart(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\r\n      setExistingNapEnd(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\r\n      setSleepAidItem(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\r\n      setSleepAidMg(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\r\n      setEnterBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\r\n      setLightsOffTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\r\n      setTimeToFallAsleep(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\r\n      setNumberTimesArousal(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\r\n      setArousalDuration(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\r\n      setMorningWakeTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\r\n      setExitBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\r\n      setMinutesEarlyWoke(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\r\n      setQualityRating(e.target.value);\r\n    }\r\n  }\r\n  const curYear = (new Date()).getFullYear();\r\n  return(\r\n    <>\r\n      <Container className=\"add-data\">\r\n        <h1>Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <Calendar\r\n          onChange={onChange}\r\n          value={value}\r\n          view={'month'}\r\n          onClickDay={(value, event) => {\r\n            // console.log('New date is: ', value)\r\n            // c('valueonly', value);\r\n            setDate(value);\r\n            checkExistingData(value);\r\n          }}\r\n        />\r\n        {date && \r\n          <>\r\n            <h2>Adding data for <strong>{dateHeading}</strong>: </h2>\r\n            {(dateClickedYear < curYear || dateClickedYear > curYear) && \r\n              <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (« or ») at the top of the calendar to scroll between years.</Alert>\r\n            }\r\n            {existingDataAlert && \r\n              <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\r\n            }\r\n            <Form className=\"add-data-form\">\r\n              <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"nap-start-time\"\r\n                type=\"time\" \r\n                className={existingNapStart !== '' && \"existing-data\"}\r\n                value={existingNapStart} \r\n                placeholder={existingNapStart} \r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"nap-end-time\"\r\n                className={existingNapEnd !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={existingNapEnd}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>2a. Last night I took ___ as a sleep aid. (Example: <span className=\"add-data-form-example\">Ambien</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"sleep-aid-item\"\r\n                className={sleepAidItem !== '' && \"existing-data\"}\r\n                type=\"text\" \r\n                value={sleepAidItem}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>2b. The amount of sleep aid I took last night was ___ mg/ounces (mg for medication / ounces for alcohol). (Example: <span className=\"add-data-form-example\">5</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"sleep-aid-mg\"\r\n                className={sleepAidMg !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={sleepAidMg}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"enter-bed-time\"\r\n                className={enterBedTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={enterBedTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"lights-off-time\"\r\n                className={lightsOffTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={lightsOffTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"time-to-fall-asleep\"\r\n                className={timeToFallAsleep !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={timeToFallAsleep}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"number-times-arousal\"\r\n                className={numberTimesArousal !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={numberTimesArousal}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately.) (Example: <span className=\"add-data-form-example\">25 min, 40 min, 10 min</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"arousal-duration\"\r\n                className={arousalDuration !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={arousalDuration}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"morning-wake-time\"\r\n                className={morningWakeTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={morningWakeTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"exit-bed-time\"\r\n                className={exitBedTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={exitBedTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"minutes-early-woke\"\r\n                className={minutesEarlyWoke !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={minutesEarlyWoke}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>\r\n                10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"quality-rating\"\r\n                className={qualityRating !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={qualityRating}\r\n                onChange={handleFormInput}\r\n              />\r\n            </Form>\r\n            <Button onClick={handleDataSubmit}>Submit</Button>\r\n          </>\r\n        }\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",["45"],"const url = \r\n'http://localhost:4000/sleep/api/';\r\n/*\r\n'https://omarshishani.com/sleep/api/';\r\n*/\r\n\r\nfunction c (msg, input) {return(console.log(`${msg}: `, input))};\r\n\r\nfunction getClickedDate(date, type){\r\n  var weekday = new Array(7);\r\n  weekday[0] = \"Sunday\";\r\n  weekday[1] = \"Monday\";\r\n  weekday[2] = \"Tuesday\";\r\n  weekday[3] = \"Wednesday\";\r\n  weekday[4] = \"Thursday\";\r\n  weekday[5] = \"Friday\";\r\n  weekday[6] = \"Saturday\";\r\n  \r\n  var month = new Array();\r\n  month[0] = \"Jan\";\r\n  month[1] = \"Feb\";\r\n  month[2] = \"Mar\";\r\n  month[3] = \"Apr\";\r\n  month[4] = \"May\";\r\n  month[5] = \"Jun\";\r\n  month[6] = \"Jul\";\r\n  month[7] = \"Aug\";\r\n  month[8] = \"Sep\";\r\n  month[9] = \"Oct\";\r\n  month[10] = \"Nov\";\r\n  month[11] = \"Dec\";\r\n  \r\n  return type === 'mysql' ? `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`\r\n  : `${weekday[date.getDay()]}, ${month[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\r\n}\r\n\r\nconst varToString = varObj => Object.keys()\r\n\r\nexport {c, getClickedDate, url, varToString};\r\n\r\nexport default url;",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":20,"column":10,"nodeType":"52","messageId":"53","endLine":20,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":27,"column":22,"nodeType":"56","messageId":"57","endLine":27,"endColumn":24},{"ruleId":"50","severity":1,"message":"58","line":42,"column":10,"nodeType":"52","messageId":"53","endLine":42,"endColumn":20},{"ruleId":"50","severity":1,"message":"59","line":42,"column":22,"nodeType":"52","messageId":"53","endLine":42,"endColumn":35},{"ruleId":"50","severity":1,"message":"60","line":51,"column":9,"nodeType":"52","messageId":"53","endLine":51,"endColumn":22},{"ruleId":"50","severity":1,"message":"61","line":69,"column":9,"nodeType":"52","messageId":"53","endLine":69,"endColumn":30},{"ruleId":"50","severity":1,"message":"62","line":1,"column":16,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"55","line":12,"column":16,"nodeType":"63","messageId":"64","endLine":12,"endColumn":22},{"ruleId":"54","severity":1,"message":"55","line":24,"column":11,"nodeType":"63","messageId":"64","endLine":24,"endColumn":17},{"ruleId":"50","severity":1,"message":"65","line":7,"column":33,"nodeType":"52","messageId":"53","endLine":7,"endColumn":44},{"ruleId":"66","severity":1,"message":"67","line":19,"column":15,"nodeType":"68","messageId":"69","endLine":19,"endColumn":26},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'napStartTimes' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'intervalId' is assigned a value but never used.","'setIntervalId' is assigned a value but never used.","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","'Component' is defined but never used.","ReturnStatement","expectedReturnValue","'varToString' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-global-assign","no-unsafe-negation"]