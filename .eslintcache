[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20"},{"size":661,"mtime":1609548489364,"results":"21","hashOfConfig":"22"},{"size":7522,"mtime":1610169471344,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":14270,"mtime":1610167496732,"results":"25","hashOfConfig":"22"},{"size":5095,"mtime":1610083989237,"results":"26","hashOfConfig":"22"},{"size":1044,"mtime":1610163600195,"results":"27","hashOfConfig":"22"},{"size":4783,"mtime":1610073486620,"results":"28","hashOfConfig":"22"},{"size":3464,"mtime":1610073486606,"results":"29","hashOfConfig":"22"},{"size":2865,"mtime":1610073486618,"results":"30","hashOfConfig":"22"},{"size":2820,"mtime":1610073486616,"results":"31","hashOfConfig":"22"},{"size":2863,"mtime":1610073486608,"results":"32","hashOfConfig":"22"},{"size":3783,"mtime":1610149639414,"results":"33","hashOfConfig":"22"},{"size":550,"mtime":1610073486623,"results":"34","hashOfConfig":"22"},{"size":2912,"mtime":1610083989234,"results":"35","hashOfConfig":"22"},{"size":7227,"mtime":1610083989229,"results":"36","hashOfConfig":"22"},{"size":1155,"mtime":1610083989231,"results":"37","hashOfConfig":"22"},{"size":3924,"mtime":1610142217831,"results":"38","hashOfConfig":"22"},{"size":4989,"mtime":1610160836268,"results":"39","hashOfConfig":"22"},{"size":4155,"mtime":1610171212170,"results":"40","hashOfConfig":"22"},{"size":4629,"mtime":1610171333994,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"asvjz",{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["90","91"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["92","93","94"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["95"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["96","97"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './NapTimesChart.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass NapTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  };\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n        let newNapInfo = [];\r\n        res.data.map(x => {\r\n          newNapInfo = [...newNapInfo, {\r\n            date: x.date, \r\n            napStartTime: x.napStartTime,\r\n            napEndTime: x.napEndTime\r\n          }]\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newNapInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.napStartTime).map((e, i, arr) => {\r\n        const dateTime = new Date(`January 1, 2000 ${e.napStartTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        return(\r\n          { x: date, y0: dateTime, y: dateTimeEnd }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Nap Times</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryBar\r\n              data={data}\r\n              barWidth={() => {\r\n                let firstDate;\r\n                let lastDate;\r\n                let dateDiff;\r\n                if (data) {\r\n                  firstDate = data[0].barWidthDate; \r\n                  lastDate = data[data.length - 1].barWidthDate; \r\n                  dateDiff = lastDate - firstDate;\r\n                }\r\n                return(\r\n                  dateDiff < 10 ? 18\r\n                  : dateDiff < 20 ? 8\r\n                  : 4 \r\n                );\r\n              }}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              style={{ data: {fill: '#964c9d'} }}\r\n              labels={({ datum }) => {\r\n                return(duration(new Date(datum._y0), new Date(datum._y)))}\r\n              }\r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  // centerOffset={{ y: 45 }}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NapTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}\r\n\r\nNapTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["98","99","100","101"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './EnterBedTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n//make it so graph updates when component loads\r\n\r\nclass EnterBedTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          enterBedTime: x.enterBedTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.enterBedTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.enterBedTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Time I Got in Bed</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              // tickValues specifies both the number of ticks and where\r\n              // they are placed on the axis\r\n              // tickValues={[1, 2, 3, 4, 5]}\r\n              tickValues={xAxisTickValues}\r\n              // tickFormat={[\"1 Jan\", \"2 Jan\", \"3 Jan\", \"Quarter 4\"]}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              // tickFormat specifies how ticks should be displayed\r\n              // tickFormat={(y) => {\r\n              //   return(\r\n              //     `${y-y%1}:${Math.round(y%1*10)/10*60}PM`\r\n              //   );\r\n              // }}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EnterBedTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nEnterBedTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["102","103"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './MorningWakeTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MorningWakeTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          morningWakeTime: x.morningWakeTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.morningWakeTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.morningWakeTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Wake Up Times</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MorningWakeTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nMorningWakeTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["104","105"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          lightsOffTime: x.lightsOffTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.lightsOffTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.lightsOffTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Time Lights Turned Off</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["106","107","108"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          exitBedTime: x.exitBedTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.exitBedTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.exitBedTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <h2>Time Out of Bed</h2>\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'time'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => formatAMPM(y)}\r\n              />\r\n              <VictoryLine\r\n                data={data}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["109"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["110"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["111","112","113"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport svgLandingPageSection1 from './landing-background-opt.svg';\r\nimport backgroundTop from './landing-background-opt.svg';\r\nimport sleepingGirlImg from './images/sleeping-girl.jpg';\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport graphScreenshot1 from './images/time-out-of-bed-screenshot-square.png';\r\nimport graphScreenshot2 from './images/time-to-fall-asleep-screenshot-square.png';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n          </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep App</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Change your life.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button>Create<br/>Account</Button>\r\n            <Button>Log In</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":11,"column":14,"nodeType":"120","messageId":"121","endLine":11,"endColumn":15},{"ruleId":"118","severity":1,"message":"122","line":46,"column":9,"nodeType":"120","messageId":"121","endLine":46,"endColumn":22},{"ruleId":"118","severity":1,"message":"123","line":64,"column":9,"nodeType":"120","messageId":"121","endLine":64,"endColumn":30},{"ruleId":"124","severity":1,"message":"125","line":38,"column":6,"nodeType":"126","endLine":38,"endColumn":13,"suggestions":"127"},{"ruleId":"118","severity":1,"message":"128","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":7,"column":14,"nodeType":"120","messageId":"121","endLine":7,"endColumn":15},{"ruleId":"118","severity":1,"message":"128","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"129","line":4,"column":64,"nodeType":"120","messageId":"121","endLine":4,"endColumn":76},{"ruleId":"118","severity":1,"message":"119","line":7,"column":14,"nodeType":"120","messageId":"121","endLine":7,"endColumn":15},{"ruleId":"118","severity":1,"message":"130","line":40,"column":15,"nodeType":"120","messageId":"121","endLine":40,"endColumn":26},{"ruleId":"118","severity":1,"message":"128","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":7,"column":14,"nodeType":"120","messageId":"121","endLine":7,"endColumn":15},{"ruleId":"118","severity":1,"message":"128","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":6,"column":14,"nodeType":"120","messageId":"121","endLine":6,"endColumn":15},{"ruleId":"118","severity":1,"message":"128","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"129","line":3,"column":64,"nodeType":"120","messageId":"121","endLine":3,"endColumn":76},{"ruleId":"118","severity":1,"message":"119","line":6,"column":14,"nodeType":"120","messageId":"121","endLine":6,"endColumn":15},{"ruleId":"118","severity":1,"message":"119","line":5,"column":14,"nodeType":"120","messageId":"121","endLine":5,"endColumn":15},{"ruleId":"118","severity":1,"message":"131","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":35,"column":13,"nodeType":"134","endLine":35,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":36,"column":13,"nodeType":"134","endLine":36,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":47,"column":13,"nodeType":"134","endLine":47,"endColumn":43},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["137"],"'Container' is defined but never used.","'VictoryLabel' is defined but never used.","'dateTimeEnd' is assigned a value but never used.","'shootingStar' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"140","text":"141"},[1659,1666],"[checkExistingData, props]"]