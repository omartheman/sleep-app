[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9"},{"size":661,"mtime":1609548489364,"results":"10","hashOfConfig":"11"},{"size":6350,"mtime":1609909644321,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":14050,"mtime":1609908607513,"results":"14","hashOfConfig":"11"},{"size":5015,"mtime":1609892237623,"results":"15","hashOfConfig":"11"},{"size":1043,"mtime":1609819583587,"results":"16","hashOfConfig":"11"},{"size":4487,"mtime":1609907792502,"results":"17","hashOfConfig":"11"},{"size":4189,"mtime":1609909719858,"results":"18","hashOfConfig":"11"},{"size":4152,"mtime":1609909698338,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"asvjz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["41","42"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["43","44","45"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["46"],"import { useState, useEffect } from 'react';\r\nimport { Alert, Button, Container, Form } from 'react-bootstrap';\r\nimport { Calendar } from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport {c, getClickedDate, url} from './global_items';\r\n\r\nconst urlCheckExistingData = `${url}check-existing-data`;\r\nconst urlUploadData = `${url}upload-data`;\r\n\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction AddData (props) {\r\n  const [value, onChange] = useState(new Date());\r\n  const [date, setDate] = useState(null);\r\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\r\n  const [existingNapStart, setExistingNapStart] = useState('');\r\n  const [existingNapEnd, setExistingNapEnd] = useState('');\r\n  const [sleepAidItem, setSleepAidItem] = useState('');\r\n  const [sleepAidMg, setSleepAidMg] = useState('');\r\n  const [enterBedTime, setEnterBedTime] = useState('');\r\n  const [lightsOffTime, setLightsOffTime] = useState('');\r\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\r\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\r\n  const [arousalDuration, setArousalDuration] = useState('');\r\n  const [morningWakeTime, setMorningWakeTime] = useState('');\r\n  const [exitBedTime, setExitBedTime] = useState('');\r\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\r\n  const [qualityRating, setQualityRating] = useState('');\r\n  const [clickedDate, setClickedDate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let d = new Date();\r\n    setDate(d);\r\n    checkExistingData(d);\r\n  }, []);\r\n\r\n  const checkExistingData = (clickedDate) => {\r\n    c('running checkexisitn', clickedDate)\r\n    axios.post(urlCheckExistingData, {\r\n      clickedDate: getClickedDate(clickedDate, 'mysql'),\r\n      user: props.loggedInUser\r\n    })\r\n    .then(res => {\r\n      setClickedDate(getClickedDate(clickedDate, 'mysql'));\r\n      c('axios postin')\r\n      c('res',res)\r\n      if (res.data.length > 0){\r\n\r\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\r\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napEndTime : '');\r\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\r\n        setSleepAidMg(res.data[0].sleepAidMg ? res.data[0].sleepAidMg : '');\r\n        setEnterBedTime(res.data[0].enterBedTime ? res.data[0].enterBedTime : '');\r\n        setLightsOffTime(res.data[0].lightsOffTime ? res.data[0].lightsOffTime : '');\r\n        setTimeToFallAsleep(res.data[0].timeToFallAsleep ? res.data[0].timeToFallAsleep : '');\r\n        setNumberTimesArousal(res.data[0].numberTimesArousal ? res.data[0].numberTimesArousal : '');\r\n        setArousalDuration(res.data[0].arousalDuration ? res.data[0].arousalDuration : '');\r\n        setMorningWakeTime(res.data[0].morningWakeTime ? res.data[0].morningWakeTime : '');\r\n        setExitBedTime(res.data[0].exitBedTime ? res.data[0].exitBedTime : '');\r\n        setMinutesEarlyWoke(res.data[0].minutesEarlyWoke ? res.data[0].minutesEarlyWoke : '');\r\n        setQualityRating(res.data[0].qualityRating ? res.data[0].qualityRating : '');\r\n\r\n        setExistingDataAlert(true);\r\n      } else {\r\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\r\n        for (let i = 0; i < dataFuncs.length; i++){\r\n          dataFuncs[i]('');\r\n        }\r\n        setExistingDataAlert(false);\r\n      }\r\n    })\r\n  } \r\n  const handleDataSubmit = () => {\r\n    c('clickedDate', clickedDate)\r\n    axios.post(urlUploadData, {\r\n      //Ternarys were set to not give a value for SQL when there is none. Helps with creating graphs to skip data.\r\n      user: props.loggedInUser,\r\n      date: clickedDate === '' ? null : clickedDate,\r\n      napStartTime: existingNapStart === '' ? null : existingNapStart,\r\n      napEndTime: existingNapEnd === '' ? null : existingNapEnd,\r\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\r\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\r\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\r\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\r\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\r\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\r\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\r\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\r\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\r\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\r\n      qualityRating: qualityRating === '' ? null : qualityRating\r\n    })\r\n  };\r\n  let dateHeading;\r\n  let dateClickedYear;\r\n  if (date){\r\n    dateHeading = getClickedDate(date);\r\n    dateClickedYear = date.getFullYear();\r\n  }\r\n  const handleFormInput = (e) => {\r\n    c('e id', e.target.getAttribute('id_val'));\r\n    c('existnap value', e.target.value);\r\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\r\n      setExistingNapStart(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\r\n      setExistingNapEnd(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\r\n      setSleepAidItem(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\r\n      setSleepAidMg(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\r\n      setEnterBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\r\n      setLightsOffTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\r\n      setTimeToFallAsleep(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\r\n      setNumberTimesArousal(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\r\n      setArousalDuration(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\r\n      setMorningWakeTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\r\n      setExitBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\r\n      setMinutesEarlyWoke(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\r\n      setQualityRating(e.target.value);\r\n    }\r\n  }\r\n  const curYear = (new Date()).getFullYear();\r\n  return(\r\n    <>\r\n      <Container className=\"add-data\">\r\n        <h1>Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <Calendar\r\n          onChange={onChange}\r\n          value={value}\r\n          view={'month'}\r\n          onClickDay={(value, event) => {\r\n            // console.log('New date is: ', value)\r\n            // c('valueonly', value);\r\n            setDate(value);\r\n            c('date value', value)\r\n            checkExistingData(value);\r\n          }}\r\n        />\r\n        {date && \r\n          <>\r\n            <h2>Adding data for {getClickedDate(date) === getClickedDate((new Date())) && 'today: '}<strong>{dateHeading}</strong>: </h2>\r\n            {(dateClickedYear < curYear || dateClickedYear > curYear) && \r\n              <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (« or ») at the top of the calendar to scroll between years.</Alert>\r\n            }\r\n            {existingDataAlert && \r\n              <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\r\n            }\r\n            <Form className=\"add-data-form\">\r\n              <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"nap-start-time\"\r\n                type=\"time\" \r\n                className={existingNapStart !== '' && \"existing-data\"}\r\n                value={existingNapStart} \r\n                placeholder={existingNapStart} \r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"nap-end-time\"\r\n                className={existingNapEnd !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={existingNapEnd}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>2a. Last night I took ___ as a sleep aid. (Example: <span className=\"add-data-form-example\">Ambien</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"sleep-aid-item\"\r\n                className={sleepAidItem !== '' && \"existing-data\"}\r\n                type=\"text\" \r\n                value={sleepAidItem}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>2b. The amount of sleep aid I took last night was ___ mg/ounces (mg for medication / ounces for alcohol). (Example: <span className=\"add-data-form-example\">5</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"sleep-aid-mg\"\r\n                className={sleepAidMg !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={sleepAidMg}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"enter-bed-time\"\r\n                className={enterBedTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={enterBedTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"lights-off-time\"\r\n                className={lightsOffTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={lightsOffTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"time-to-fall-asleep\"\r\n                className={timeToFallAsleep !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={timeToFallAsleep}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"number-times-arousal\"\r\n                className={numberTimesArousal !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={numberTimesArousal}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately.) (Example: <span className=\"add-data-form-example\">25 min, 40 min, 10 min</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"arousal-duration\"\r\n                className={arousalDuration !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={arousalDuration}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"morning-wake-time\"\r\n                className={morningWakeTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={morningWakeTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"exit-bed-time\"\r\n                className={exitBedTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={exitBedTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"minutes-early-woke\"\r\n                className={minutesEarlyWoke !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={minutesEarlyWoke}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>\r\n                10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"quality-rating\"\r\n                className={qualityRating !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={qualityRating}\r\n                onChange={handleFormInput}\r\n              />\r\n            </Form>\r\n            <Button onClick={handleDataSubmit}>Submit</Button>\r\n          </>\r\n        }\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",["47"],"const url = \r\n'http://localhost:4000/sleep/api/';\r\n/*\r\n'https://omarshishani.com/sleep/api/';\r\n*/\r\n\r\nfunction c (msg, input) {return(console.log(`${msg}: `, input))};\r\n\r\nfunction getClickedDate(date, type){\r\n  var weekday = new Array(7);\r\n  weekday[0] = \"Sunday\";\r\n  weekday[1] = \"Monday\";\r\n  weekday[2] = \"Tuesday\";\r\n  weekday[3] = \"Wednesday\";\r\n  weekday[4] = \"Thursday\";\r\n  weekday[5] = \"Friday\";\r\n  weekday[6] = \"Saturday\";\r\n  \r\n  var month = new Array();\r\n  month[0] = \"Jan\";\r\n  month[1] = \"Feb\";\r\n  month[2] = \"Mar\";\r\n  month[3] = \"Apr\";\r\n  month[4] = \"May\";\r\n  month[5] = \"Jun\";\r\n  month[6] = \"Jul\";\r\n  month[7] = \"Aug\";\r\n  month[8] = \"Sep\";\r\n  month[9] = \"Oct\";\r\n  month[10] = \"Nov\";\r\n  month[11] = \"Dec\";\r\n  \r\n  return type === 'mysql' ? `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`\r\n  : `${weekday[date.getDay()]}, ${month[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\r\n}\r\n\r\nconst varToString = varObj => Object.keys()\r\n\r\nexport {c, getClickedDate, url, varToString};\r\n\r\nexport default url;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["48"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["49","50","51"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["52","53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":11,"column":14,"nodeType":"61","messageId":"62","endLine":11,"endColumn":15},{"ruleId":"59","severity":1,"message":"63","line":38,"column":9,"nodeType":"61","messageId":"62","endLine":38,"endColumn":22},{"ruleId":"59","severity":1,"message":"64","line":56,"column":9,"nodeType":"61","messageId":"62","endLine":56,"endColumn":30},{"ruleId":"65","severity":1,"message":"66","line":38,"column":6,"nodeType":"67","endLine":38,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":19,"column":15,"nodeType":"71","messageId":"72","endLine":19,"endColumn":26},{"ruleId":"59","severity":1,"message":"73","line":15,"column":34,"nodeType":"61","messageId":"62","endLine":15,"endColumn":39},{"ruleId":"59","severity":1,"message":"74","line":4,"column":64,"nodeType":"61","messageId":"62","endLine":4,"endColumn":76},{"ruleId":"59","severity":1,"message":"75","line":22,"column":19,"nodeType":"61","messageId":"62","endLine":22,"endColumn":28},{"ruleId":"59","severity":1,"message":"76","line":64,"column":15,"nodeType":"61","messageId":"62","endLine":64,"endColumn":26},{"ruleId":"59","severity":1,"message":"74","line":4,"column":64,"nodeType":"61","messageId":"62","endLine":4,"endColumn":76},{"ruleId":"59","severity":1,"message":"75","line":21,"column":19,"nodeType":"61","messageId":"62","endLine":21,"endColumn":28},{"ruleId":"59","severity":1,"message":"76","line":63,"column":15,"nodeType":"61","messageId":"62","endLine":63,"endColumn":26},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'dates' is assigned a value but never used.","'VictoryLabel' is defined but never used.","'chartInfo' is assigned a value but never used.","'dateTimeEnd' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [checkExistingData]",{"range":"82","text":"83"},[1659,1661],"[checkExistingData]"]