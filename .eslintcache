[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js":"21"},{"size":661,"mtime":1609548489364,"results":"22","hashOfConfig":"23"},{"size":11902,"mtime":1611008910583,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":16267,"mtime":1611006435224,"results":"26","hashOfConfig":"23"},{"size":5954,"mtime":1611008479198,"results":"27","hashOfConfig":"23"},{"size":8916,"mtime":1610913809709,"results":"28","hashOfConfig":"23"},{"size":5439,"mtime":1610830975379,"results":"29","hashOfConfig":"23"},{"size":3885,"mtime":1610830975367,"results":"30","hashOfConfig":"23"},{"size":3768,"mtime":1610830975377,"results":"31","hashOfConfig":"23"},{"size":3632,"mtime":1610830975373,"results":"32","hashOfConfig":"23"},{"size":3682,"mtime":1610830975369,"results":"33","hashOfConfig":"23"},{"size":4681,"mtime":1610830975404,"results":"34","hashOfConfig":"23"},{"size":550,"mtime":1610073486623,"results":"35","hashOfConfig":"23"},{"size":2951,"mtime":1610854296258,"results":"36","hashOfConfig":"23"},{"size":7417,"mtime":1610686373193,"results":"37","hashOfConfig":"23"},{"size":1309,"mtime":1610684940304,"results":"38","hashOfConfig":"23"},{"size":4484,"mtime":1610830975375,"results":"39","hashOfConfig":"23"},{"size":5660,"mtime":1610830975364,"results":"40","hashOfConfig":"23"},{"size":4653,"mtime":1610830975399,"results":"41","hashOfConfig":"23"},{"size":4887,"mtime":1610830975401,"results":"42","hashOfConfig":"23"},{"size":1340,"mtime":1610516763531,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asvjz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["100","101"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["102","103","104","105"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["106","107"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["108","109","110","111","112","113","114"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './NapTimesChart.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass NapTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  };\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'napTimes', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'napTimes', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'napTimes', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = false;\r\n      data = createData1(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              fixLabelOverlap={true}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryBar\r\n              style={{\r\n                data: {\r\n                  fill: this.props.nightMode ? 'rgb(255 0 113)' : 'rgb(129 33 255)', \r\n                  transition: `fill ${nightModeTransitionTime}`\r\n                },\r\n                labels: {\r\n                  fill: this.props.nightMode ? 'white' : 'black'\r\n                }\r\n              }}\r\n              data={data}\r\n              barWidth={() => {\r\n                let firstDate;\r\n                let lastDate;\r\n                let dateDiff;\r\n                if (data) {\r\n                  firstDate = data[data.length - 1].x; \r\n                  lastDate = data[0].x; \r\n                  dateDiff = lastDate - firstDate;\r\n                }\r\n                return(\r\n                  dateDiff < 10 ? 18\r\n                  : dateDiff < 20 ? 8\r\n                  : 4 \r\n                );\r\n              }}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              labels={({ datum }) => {\r\n                return(\r\n                  `${duration(new Date(datum._y0), new Date(datum._y))}\\n${datum.dateLabel}`\r\n                )}\r\n              }\r\n              \r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n          <h2 \r\n            className={\r\n              `charts-heading ${this.props.nightMode ?\r\n                'quality-rating-charts-heading-night'  \r\n                : 'quality-rating-charts-heading-day'\r\n              }`\r\n            }\r\n            title=\"The range of time from the beggining of your first nap to the end of your last nap.\"\r\n          >\r\n            Nap Times\r\n          </h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NapTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}\r\n\r\nNapTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["115","116","117","118","119","120","121","122"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './EnterBedTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryTooltip, VictoryScatter } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, nightModeTransitionTime, victoryAxisStyle, getLongDate,  VictoryScatterLineComplement, victoryLineStyle, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n//make it so graph updates when component loads\r\n\r\nclass EnterBedTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'enterBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'enterBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'enterBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      data = createData1(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n    }\r\n    c('data', data)\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n            <VictoryAxis\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"enter-bed-charts enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"This is the time that you entered your bed - you may not yet have turned the lights off.\">Time in Bed</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EnterBedTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nEnterBedTimesChart.propTypes = {\r\n  dates: PropTypes.array,\r\n  nightMode: PropTypes.bool, \r\n  loggedInUser: PropTypes.string\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["123","124","125","126","127"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './MorningWakeTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MorningWakeTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'morningWakeTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'morningWakeTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'morningWakeTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      data = createData1(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'exitBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Wake Up Time</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MorningWakeTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nMorningWakeTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["128","129","130","131","132","133","134"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryScatter } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, VictoryScatterLineComplement, victoryLineStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'lightsOffTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'lightsOffTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'lightsOffTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      data = createData1(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"The time you turned the lights off after getting in bed.\">Time Lights Off</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["135","136","137","138","139"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'exitBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'exitBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'exitBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      data = createData1(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode)}\r\n          </VictoryChart>\r\n        <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Time Out of Bed</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["140","141","142","143","144","145","146"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, victoryTooltipLabelStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass TimeToFallAsleepChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'timeToFallAsleep', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'timeToFallAsleep', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'timeToFallAsleep', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(0 168 255)' : '#00b6ba', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum){\r\n                    return(\r\n                      `${datum.timeLabel}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n              <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"How long it took you to fall asleep after turning the lights off.\">Time to Fall Asleep</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TimeToFallAsleepChart; \r\n\r\nTimeToFallAsleepChart.propTypes = {\r\n  dates: PropTypes.array,\r\n  nightMode: PropTypes.bool, \r\n  loggedInUser: PropTypes.string\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["147"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",["148","149"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["150","151","152"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport graphScreenshot1 from './images/time-out-of-bed-screenshot-square.png';\r\nimport graphScreenshot2 from './images/time-to-fall-asleep-screenshot-square.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n          </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep App</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Create helpful graphs with simple inputs, for free.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img className=\"home-logged-out-section-2-image-2\" src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button as={Link} to={'/sleep/create-account'}>Create Account</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",["153","154"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MinutesEarlyWokeChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                fixLabelOverlap={true}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 52 0)' : 'rgb(186 0 177)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} min\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n             <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Minutes Early Awake</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MinutesEarlyWokeChart; \r\n\r\nMinutesEarlyWokeChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",["155","156","157","158","159"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip, VictoryStack } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass ArousalDurationChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'arousalDuration', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'arousalDuration', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'arousalDuration', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const chartInfoPrimer = this.state.chartInfo;\r\n    const chartInfo = chartInfoPrimer.slice(0).reverse();\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data = [];\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = false;\r\n      data = createData1(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\r\n    }\r\n\r\n    const maxNumberArousals = Math.max(...data.map(x => x.length));\r\n    const arousals = [];\r\n    const bars = [];\r\n    //A SEPERATE ARRAY IS CREATED FOR EACH AROUSAL: THE FIRST, SECOND, ETC., ALL THE WAY UNTIL THE MAX NUMBER OF AROUSALS FOR THE GIVEN DATA SET\r\n    for (let i = 0; i < maxNumberArousals; i++){\r\n      arousals.push([]);\r\n    }\r\n    data.forEach((x, i) => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        if (x[i]){\r\n          arousals[i].push(x[i]);\r\n        }\r\n      }\r\n    })\r\n    let firstDate;\r\n    let lastDate;\r\n    if (arousals[0]) {\r\n      firstDate = arousals[0][0].x;\r\n      lastDate = arousals[0][arousals[0].length - 1].x;\r\n    }\r\n\r\n    const createBars = () => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        bars.push(\r\n          <VictoryBar\r\n            style={{\r\n              labels: {\r\n                fill: this.props.nightMode ? 'white' : 'black'\r\n              }\r\n            }}\r\n            key={i}\r\n            data={arousals[i]}\r\n            barWidth={() => {\r\n              let dateDiff;\r\n              if (data) {\r\n                dateDiff = lastDate - firstDate;\r\n              }\r\n              return(\r\n                dateDiff < 10 ? 18\r\n                : dateDiff < 20 ? 8\r\n                : 4 \r\n              );\r\n            }}\r\n            labels={({ datum }) => {\r\n              return(`${datum.y} min\\n${datum.dateLabel}`);\r\n            }}\r\n            labelComponent={\r\n              <VictoryTooltip\r\n                flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n              />\r\n            }\r\n          />\r\n        )\r\n      }\r\n    }\r\n    createBars();\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryStack\r\n                colorScale={\r\n                  this.props.nightMode ? \r\n                  ['rgb(67 0 255)', \r\n                  'rgb(244 0 255)', \r\n                  'rgb(8 190 0)', \r\n                  'rgb(255 217 0)', \r\n                  'red']\r\n                  : \r\n                  ['rgb(126 81 255)', \r\n                  'rgb(244 0 255)', \r\n                  'rgb(8 190 0)', \r\n                  'rgb(255 134 0)', \r\n                  'red']\r\n                }\r\n              >\r\n                {[...bars]}\r\n              </VictoryStack>\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"The amounts of time you were awake last night. Each colored bar represents a seperate time waking up.\"\r\n            >\r\n              Arousal Durations\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ArousalDurationChart; \r\n\r\nArousalDurationChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",["160","161","162","163","164"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass QualityRatingChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'qualityRating', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'qualityRating', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'qualityRating', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y}`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(173 31 255)' : 'rgb(37 39 255)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} out of 5\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"A rating out of 5 of how well you slept last night.\"\r\n            >\r\n              Sleep Quality Rating\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QualityRatingChart; \r\n\r\nQualityRatingChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",["165","166","167","168","169","170"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass SleepAidItemChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'sleepAidItem', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'sleepAidItem', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'sleepAidItem', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = false;\r\n      data = createData1(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} mg/oz`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 0 207)' : 'rgb(49 0 186)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum.sleepAidItem){\r\n                    const sleepAidItem = datum.sleepAidItem.toLowerCase();\r\n                    return(\r\n                      `${datum.y}${sleepAidItem === 'alcohol' ? 'oz' : 'mg'} ${datum.sleepAidItem}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"The item and amount of sleep aid you took last night.\"\r\n            >\r\n              Sleep Aid Item\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SleepAidItemChart; \r\n\r\nSleepAidItemChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":16,"column":36,"nodeType":"177","messageId":"178","endLine":16,"endColumn":39},{"ruleId":"175","severity":1,"message":"179","line":16,"column":41,"nodeType":"177","messageId":"178","endLine":16,"endColumn":44},{"ruleId":"175","severity":1,"message":"180","line":26,"column":9,"nodeType":"177","messageId":"178","endLine":26,"endColumn":17},{"ruleId":"175","severity":1,"message":"181","line":49,"column":9,"nodeType":"177","messageId":"178","endLine":49,"endColumn":22},{"ruleId":"175","severity":1,"message":"182","line":8,"column":9,"nodeType":"177","messageId":"178","endLine":8,"endColumn":10},{"ruleId":"183","severity":1,"message":"184","line":40,"column":6,"nodeType":"185","endLine":40,"endColumn":13,"suggestions":"186"},{"ruleId":"175","severity":1,"message":"187","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":19},{"ruleId":"175","severity":1,"message":"188","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":7,"column":14,"nodeType":"177","messageId":"178","endLine":7,"endColumn":15},{"ruleId":"175","severity":1,"message":"189","line":7,"column":78,"nodeType":"177","messageId":"178","endLine":7,"endColumn":89},{"ruleId":"175","severity":1,"message":"190","line":7,"column":91,"nodeType":"177","messageId":"178","endLine":7,"endColumn":105},{"ruleId":"175","severity":1,"message":"191","line":7,"column":107,"nodeType":"177","messageId":"178","endLine":7,"endColumn":132},{"ruleId":"192","severity":1,"message":"193","line":65,"column":15,"nodeType":"194","endLine":65,"endColumn":66},{"ruleId":"175","severity":1,"message":"187","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":19},{"ruleId":"175","severity":1,"message":"195","line":4,"column":78,"nodeType":"177","messageId":"178","endLine":4,"endColumn":92},{"ruleId":"175","severity":1,"message":"196","line":4,"column":94,"nodeType":"177","messageId":"178","endLine":4,"endColumn":108},{"ruleId":"175","severity":1,"message":"188","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":13},{"ruleId":"175","severity":1,"message":"197","line":7,"column":17,"nodeType":"177","messageId":"178","endLine":7,"endColumn":40},{"ruleId":"175","severity":1,"message":"189","line":7,"column":60,"nodeType":"177","messageId":"178","endLine":7,"endColumn":71},{"ruleId":"175","severity":1,"message":"190","line":7,"column":122,"nodeType":"177","messageId":"178","endLine":7,"endColumn":136},{"ruleId":"175","severity":1,"message":"191","line":7,"column":138,"nodeType":"177","messageId":"178","endLine":7,"endColumn":163},{"ruleId":"175","severity":1,"message":"187","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":19},{"ruleId":"175","severity":1,"message":"188","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":7,"column":14,"nodeType":"177","messageId":"178","endLine":7,"endColumn":15},{"ruleId":"175","severity":1,"message":"189","line":7,"column":17,"nodeType":"177","messageId":"178","endLine":7,"endColumn":28},{"ruleId":"192","severity":1,"message":"193","line":64,"column":15,"nodeType":"194","endLine":64,"endColumn":66},{"ruleId":"175","severity":1,"message":"187","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":19},{"ruleId":"175","severity":1,"message":"196","line":3,"column":78,"nodeType":"177","messageId":"178","endLine":3,"endColumn":92},{"ruleId":"175","severity":1,"message":"188","line":5,"column":8,"nodeType":"177","messageId":"178","endLine":5,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":6,"column":14,"nodeType":"177","messageId":"178","endLine":6,"endColumn":15},{"ruleId":"175","severity":1,"message":"189","line":6,"column":83,"nodeType":"177","messageId":"178","endLine":6,"endColumn":94},{"ruleId":"175","severity":1,"message":"190","line":6,"column":96,"nodeType":"177","messageId":"178","endLine":6,"endColumn":110},{"ruleId":"175","severity":1,"message":"191","line":6,"column":112,"nodeType":"177","messageId":"178","endLine":6,"endColumn":137},{"ruleId":"175","severity":1,"message":"187","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":19},{"ruleId":"175","severity":1,"message":"188","line":5,"column":8,"nodeType":"177","messageId":"178","endLine":5,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":6,"column":14,"nodeType":"177","messageId":"178","endLine":6,"endColumn":15},{"ruleId":"175","severity":1,"message":"189","line":6,"column":17,"nodeType":"177","messageId":"178","endLine":6,"endColumn":28},{"ruleId":"192","severity":1,"message":"193","line":63,"column":15,"nodeType":"194","endLine":63,"endColumn":66},{"ruleId":"175","severity":1,"message":"188","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":5,"column":14,"nodeType":"177","messageId":"178","endLine":5,"endColumn":15},{"ruleId":"175","severity":1,"message":"198","line":5,"column":78,"nodeType":"177","messageId":"178","endLine":5,"endColumn":102},{"ruleId":"175","severity":1,"message":"189","line":5,"column":104,"nodeType":"177","messageId":"178","endLine":5,"endColumn":115},{"ruleId":"175","severity":1,"message":"190","line":5,"column":117,"nodeType":"177","messageId":"178","endLine":5,"endColumn":131},{"ruleId":"175","severity":1,"message":"191","line":5,"column":133,"nodeType":"177","messageId":"178","endLine":5,"endColumn":158},{"ruleId":"192","severity":1,"message":"193","line":63,"column":17,"nodeType":"194","endLine":63,"endColumn":68},{"ruleId":"175","severity":1,"message":"199","line":2,"column":8,"nodeType":"177","messageId":"178","endLine":2,"endColumn":20},{"ruleId":"171","replacedBy":"200"},{"ruleId":"173","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":35,"column":13,"nodeType":"204","endLine":35,"endColumn":43},{"ruleId":"202","severity":1,"message":"203","line":36,"column":13,"nodeType":"204","endLine":36,"endColumn":89},{"ruleId":"202","severity":1,"message":"203","line":47,"column":13,"nodeType":"204","endLine":47,"endColumn":43},{"ruleId":"175","severity":1,"message":"182","line":4,"column":14,"nodeType":"177","messageId":"178","endLine":4,"endColumn":15},{"ruleId":"192","severity":1,"message":"193","line":63,"column":17,"nodeType":"194","endLine":63,"endColumn":68},{"ruleId":"175","severity":1,"message":"188","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":5,"column":14,"nodeType":"177","messageId":"178","endLine":5,"endColumn":15},{"ruleId":"175","severity":1,"message":"189","line":5,"column":53,"nodeType":"177","messageId":"178","endLine":5,"endColumn":64},{"ruleId":"175","severity":1,"message":"190","line":5,"column":66,"nodeType":"177","messageId":"178","endLine":5,"endColumn":80},{"ruleId":"175","severity":1,"message":"191","line":5,"column":82,"nodeType":"177","messageId":"178","endLine":5,"endColumn":107},{"ruleId":"175","severity":1,"message":"188","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":5,"column":14,"nodeType":"177","messageId":"178","endLine":5,"endColumn":15},{"ruleId":"175","severity":1,"message":"190","line":5,"column":78,"nodeType":"177","messageId":"178","endLine":5,"endColumn":92},{"ruleId":"175","severity":1,"message":"191","line":5,"column":94,"nodeType":"177","messageId":"178","endLine":5,"endColumn":119},{"ruleId":"192","severity":1,"message":"193","line":64,"column":17,"nodeType":"194","endLine":64,"endColumn":68},{"ruleId":"175","severity":1,"message":"188","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":13},{"ruleId":"175","severity":1,"message":"182","line":5,"column":14,"nodeType":"177","messageId":"178","endLine":5,"endColumn":15},{"ruleId":"175","severity":1,"message":"189","line":5,"column":78,"nodeType":"177","messageId":"178","endLine":5,"endColumn":89},{"ruleId":"175","severity":1,"message":"190","line":5,"column":91,"nodeType":"177","messageId":"178","endLine":5,"endColumn":105},{"ruleId":"175","severity":1,"message":"191","line":5,"column":107,"nodeType":"177","messageId":"178","endLine":5,"endColumn":132},{"ruleId":"192","severity":1,"message":"193","line":63,"column":17,"nodeType":"194","endLine":63,"endColumn":68},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","'c' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["207"],"'Container' is defined but never used.","'axios' is defined but never used.","'getLongDate' is defined but never used.","'yesterdaysDate' is defined but never used.","'yesterdaysDateLabelPrimer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'nightModeTransitionTime' is defined but never used.","'victoryTooltipLabelStyle' is defined but never used.","'shootingStar' is defined but never used.",["205"],["206"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"210","text":"211"},[1865,1872],"[checkExistingData, props]"]