[{"/Users/omarshishani/Coding/sleep-app/src/index.js":"1","/Users/omarshishani/Coding/sleep-app/src/App.js":"2","/Users/omarshishani/Coding/sleep-app/src/reportWebVitals.js":"3","/Users/omarshishani/Coding/sleep-app/src/AddData.js":"4","/Users/omarshishani/Coding/sleep-app/src/MorningWakeTimesChart.js":"5","/Users/omarshishani/Coding/sleep-app/src/EnterBedTimesChart.js":"6","/Users/omarshishani/Coding/sleep-app/src/ExitBedTimesChart.js":"7","/Users/omarshishani/Coding/sleep-app/src/NapTimesChart.js":"8","/Users/omarshishani/Coding/sleep-app/src/global_items.js":"9","/Users/omarshishani/Coding/sleep-app/src/CreateAccount.js":"10","/Users/omarshishani/Coding/sleep-app/src/CreateAccountSuccess.js":"11","/Users/omarshishani/Coding/sleep-app/src/MinutesEarlyWokeChart.js":"12","/Users/omarshishani/Coding/sleep-app/src/ArousalDurationChart.js":"13","/Users/omarshishani/Coding/sleep-app/src/HomeLoggedOut.js":"14","/Users/omarshishani/Coding/sleep-app/src/NavbarContainer.js":"15","/Users/omarshishani/Coding/sleep-app/src/LightsOffTimesChart.js":"16","/Users/omarshishani/Coding/sleep-app/src/TimeToFallAsleepChart.js":"17","/Users/omarshishani/Coding/sleep-app/src/SleepAidItemChart.js":"18","/Users/omarshishani/Coding/sleep-app/src/QualityRatingChart.js":"19","/Users/omarshishani/Coding/sleep-app/src/NightModeSwitch.js":"20"},{"size":640,"mtime":1619819540817,"results":"21","hashOfConfig":"22"},{"size":12312,"mtime":1619819540810,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1619819540818,"results":"24","hashOfConfig":"22"},{"size":15963,"mtime":1619819540810,"results":"25","hashOfConfig":"22"},{"size":3675,"mtime":1619819540811,"results":"26","hashOfConfig":"22"},{"size":3789,"mtime":1619819540810,"results":"27","hashOfConfig":"22"},{"size":3590,"mtime":1619819540810,"results":"28","hashOfConfig":"22"},{"size":5290,"mtime":1619819540811,"results":"29","hashOfConfig":"22"},{"size":8632,"mtime":1619819540816,"results":"30","hashOfConfig":"22"},{"size":7202,"mtime":1619819540810,"results":"31","hashOfConfig":"22"},{"size":1266,"mtime":1619819540810,"results":"32","hashOfConfig":"22"},{"size":4372,"mtime":1619819540811,"results":"33","hashOfConfig":"22"},{"size":5498,"mtime":1619819540810,"results":"34","hashOfConfig":"22"},{"size":2951,"mtime":1660547236013,"results":"35","hashOfConfig":"22"},{"size":6286,"mtime":1619819540811,"results":"36","hashOfConfig":"22"},{"size":3541,"mtime":1619819540811,"results":"37","hashOfConfig":"22"},{"size":4563,"mtime":1619819540811,"results":"38","hashOfConfig":"22"},{"size":4760,"mtime":1619819540811,"results":"39","hashOfConfig":"22"},{"size":4530,"mtime":1619819540811,"results":"40","hashOfConfig":"22"},{"size":1285,"mtime":1619819540811,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1sp9kna",{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/omarshishani/Coding/sleep-app/src/index.js",[],["95","96"],"/Users/omarshishani/Coding/sleep-app/src/App.js",["97","98","99","100","101"],"import './App.css';\nimport NapTimesChart from './NapTimesChart';\nimport {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport NavbarContainer from './NavbarContainer';\nimport AddData from './AddData';\nimport './App.css';\nimport './App.scss';\nimport React from 'react';\nimport {Switch, Route} from 'react-router';\nimport {url, c} from './global_items';\nimport EnterBedTimesChart from './EnterBedTimesChart';\nimport MorningWakeTimesChart from './MorningWakeTimesChart';\nimport LightsOffTimesChart from './LightsOffTimesChart';\nimport ExitBedTimesChart from './ExitBedTimesChart';\nimport { Alert, Button, Container, Col, Row } from 'react-bootstrap';\nimport TimeToFallAsleepChart from './TimeToFallAsleepChart';\nimport HomeLoggedOut from './HomeLoggedOut';\nimport CreateAccount from './CreateAccount';\nimport CreateAccountSuccess from './CreateAccountSuccess';\nimport backgroundTop from './landing-background-opt.svg';\nimport MinutesEarlyWokeChart from './MinutesEarlyWokeChart';\nimport ArousalDurationChart from './ArousalDurationChart';\nimport QualityRatingChart from './QualityRatingChart';\nimport SleepAidItemChart from './SleepAidItemChart';\nimport moon_svg from './images/moon.svg';\nimport {Redirect} from 'react-router-dom';\n\nconst urlAuth = `${url}auth`;\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\naxios.defaults.withCredentials = true;\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [loggedInUserError, setLoggedinUserError] = useState(null);\n  const [nightMode, setNightMode] = useState(true);\n  const [range, setRange] = useState(30);\n  // const [intervalId, setIntervalId] = useState(null);\n  useEffect(() => {\n    axios.get(urlAuth) \n    .then(res => { \n      setLoggedInUser(res.data);\n    }).catch(error => {console.log(error)})\n    // const intervalId = setInterval(checkLoggedIn, 2000);\n    // setIntervalId(intervalId);\n  }, [])\n  \n  const checkLoggedIn = () => {\n    axios.get(urlAuth) \n    .then(res => { \n      setLoggedInUser(res.data);\n    }).catch(error => {\n      console.log(error)\n      console.log('Axios error. User logged out.')\n      if (loggedInUserError === false) {\n        console.log('Axios error. User logged out.')\n        if (url !== 'http://localhost:4000/recipeapp/recipeapp-server/'){\n          alert(\"There was an error with the server. ðŸ¤¬ Alert the Webmaster!\");\n        }\n        setLoggedinUserError(true);\n      }\n      setLoggedInUser(null);\n    })\n  }\n  const handleNewLoggedInUser = (newLoggedInUser) => {\n    setLoggedInUser(newLoggedInUser);\n  }\n  const handleLoginSubmit = (e, username, password) => {\n    c('handling login submit')\n    e.preventDefault();\n    axios.post(urlAuth,     \n      {\n        username: username, \n        password: password \n      }\n    )\n    .then(res => {\n      c('axios response to post user info', res)\n      if (res.data.username && res.data.username !== ''){\n        setLoggedInUser(res.data.username);\n      }\n    }).catch(error => {console.log(error)})\n    // .then( \n    //   axios.get(urlAuth) \n    //   .then(res => { \n    //     c('logged in user submission data', res.data);\n    //     setLoggedInUser(res.data);\n    //   }).catch(error => {console.log('Axios error from urlAuth: ', error)})\n    // )\n  }\n  const handleLoginFormChange = (eTargetAttrVal, item) => {\n    console.log('loginformchage')\n    if (item === 'username'){\n      setUsername(eTargetAttrVal);\n    } else if (item === 'password') {\n      setPassword(eTargetAttrVal);\n    }\n  }\n  const handleLogout = () => {\n    setLoggedInUser(null);\n  }\n  const navbar = \n    <NavbarContainer\n      setNightMode={setNightMode}\n      nightMode={nightMode}\n      loginSubmit={handleLoginSubmit}\n      onLoginFormChange={handleLoginFormChange}\n      loggedInUser={loggedInUser}\n      onLogout={handleLogout}\n      username={username}\n      password={password}\n    />\n  ;\n  return(\n    <Switch>\n      <Route path=\"/sleep/create-account-success\" render={() => (\n        <div className={nightMode && 'container-wrapper-night-mode'}>\n          {navbar}\n          <CreateAccountSuccess \n            nightMode={nightMode}\n            loggedInUser={loggedInUser}\n          />\n        </div>\n      )} />\n      <Route path=\"/sleep/create-account\" render={() => (\n        <div className={nightMode && 'container-wrapper-night-mode'}>\n          {navbar}\n          <CreateAccount \n            nightMode={nightMode}\n            loggedInUser={loggedInUser}\n            setNewLoggedInUser={handleNewLoggedInUser}\n          />\n        </div>\n      )} />\n      <Route path=\"/sleep/add-data\">\n        <>\n          {navbar}\n          <div className={`app-container-wrapper ${nightMode && 'app-container-wrapper-night'}`}>\n            <div className={nightMode && \"add-data-component-wrapper-night\"}>\n              <AddData \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n              />\n            </div>\n          </div>\n        </>\n      </Route>\n\n      \n      <Route path=\"/sleep/overview\">\n        <div className={`app-charts-container-wrapper ${nightMode && 'app-charts-container-wrapper-night'}`}>\n          {navbar}\n          {/* {!loggedInUser && <Redirect to=\"/sleep/home-logged-out\" />} */}\n          <div className={`app-range-input-container ${nightMode && 'app-range-input-container-night'}`}>\n            <label>Show data from up to ___ days ago.</label>\n            <input \n              className=\"mr-3\"\n              type='number'\n              value={range}\n              onChange={(e) => {\n                setRange(Number(e.target.value));\n              }}\n            />\n            <div>\n              <Button className=\"button-inline\" onClick={() => {setRange(7)}}>7</Button>\n              <Button className=\"button-inline\" onClick={() => {setRange(15)}}>15</Button>\n              <Button className=\"button-inline\" onClick={() => {setRange(30)}}>30</Button>\n              <Button className=\"button-inline\" onClick={() => {setRange(60)}}>60</Button>\n              <Button className=\"button-inline\" onClick={() => {setRange(180)}}>180</Button>\n            </div>\n          </div>\n          <div className={nightMode && \"container-night-mode\"} style={{backgroundColor:'transparent'}}>\n            <Alert variant=\"warning\" className=\"mt-5 ml-3 mr-3 app-sample-data-warning\">Sample Data Shown. Log In to View Your Own Data</Alert>\n          </div>\n          <Container fluid className=\"app-charts-container\">\n            <div className=\"ct1\">\n              <EnterBedTimesChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct2\">\n              <LightsOffTimesChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct3\">\n              <TimeToFallAsleepChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct9\">\n              <MorningWakeTimesChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct8\">\n              <ExitBedTimesChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct7\">\n              <MinutesEarlyWokeChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n\n            <div className=\"ct4\">\n              <SleepAidItemChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct6\">\n              <ArousalDurationChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n            <div className=\"ct5\">\n              <QualityRatingChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n\n            <div className=\"ct10\">\n              <NapTimesChart \n                nightMode={nightMode}\n                loggedInUser={loggedInUser}\n                range={range}\n              />\n              {(!loggedInUser || loggedInUser === '') && \n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\n                  <h3 className=\"text-center\">(Sample Data)</h3>\n                </div>\n              }\n            </div>\n          </Container>\n        </div>\n      </Route>\n      <Route path=\"/sleep\">\n        <>\n          <div>\n            <img className=\"home-logged-out-moon\" src={moon_svg} />\n          </div>\n          <div className=\"home-logged-out-section-1-background-color\">\n          </div>\n          <div className=\"home-logged-out-section-1-background-mountains\">\n          </div>\n          {navbar}\n          <HomeLoggedOut />\n        </>\n      </Route>\n      <Route path=\"/sleep/home-logged-out\" render={() => (\n        <>\n          <div className=\"home-logged-out-section-1-background\"\n          style={{backgroundImage: `url(${backgroundTop})`}}\n          ></div>\n          {navbar}\n          <HomeLoggedOut />\n        </>\n      )} />\n    </Switch>\n  )\n}\n\nexport default App;","/Users/omarshishani/Coding/sleep-app/src/reportWebVitals.js",[],"/Users/omarshishani/Coding/sleep-app/src/AddData.js",["102","103"],"import { useState, useEffect } from 'react';\nimport { Alert, Button, Container, Form, Spinner } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Calendar } from 'react-calendar';\nimport './AddData.scss';\nimport axios from 'axios';\nimport 'react-calendar/dist/Calendar.css';\nimport {c, getClickedDate, url} from './global_items';\n\nconst urlCheckExistingData = `${url}check-existing-data`;\nconst urlUploadData = `${url}upload-data`;\n\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\naxios.defaults.withCredentials = true;\n\nfunction AddData (props) {\n  const [value, onChange] = useState(new Date());\n  const [date, setDate] = useState(null);\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\n  const [existingNapStart, setExistingNapStart] = useState('');\n  const [existingNapEnd, setExistingNapEnd] = useState('');\n  const [sleepAidItem, setSleepAidItem] = useState('');\n  const [sleepAidMg, setSleepAidMg] = useState('');\n  const [enterBedTime, setEnterBedTime] = useState('');\n  const [lightsOffTime, setLightsOffTime] = useState('');\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\n  const [arousalDuration, setArousalDuration] = useState('');\n  const [morningWakeTime, setMorningWakeTime] = useState('');\n  const [exitBedTime, setExitBedTime] = useState('');\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\n  const [qualityRating, setQualityRating] = useState('');\n  const [clickedDate, setClickedDate] = useState(null);\n  const [checkExistingDataCompleted, setCheckExistingDataCompleted] = useState(false);\n  const [submittedMessage, setSubmittedMessage] = useState(false); \n  useEffect(() => {\n    let d = new Date();\n    setDate(d);\n    checkExistingData(d);\n  }, [props]);\n  useEffect(() => {\n    setSubmittedMessage(false);\n  }, [clickedDate])\n\n  const checkExistingData = (clickedDate) => {\n    setCheckExistingDataCompleted(false);\n    if (!props.loggedInUser){return};\n    axios.post(urlCheckExistingData, {\n      clickedDate: getClickedDate(clickedDate, 'mysql'),\n      user: props.loggedInUser\n    })\n    .then(res => {\n      setClickedDate(getClickedDate(clickedDate, 'mysql'));\n      if (res.data.length > 0){\n\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napEndTime : '');\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\n        setSleepAidMg(res.data[0].sleepAidMg ? res.data[0].sleepAidMg : '');\n        setEnterBedTime(res.data[0].enterBedTime ? res.data[0].enterBedTime : '');\n        setLightsOffTime(res.data[0].lightsOffTime ? res.data[0].lightsOffTime : '');\n        setTimeToFallAsleep(res.data[0].timeToFallAsleep ? res.data[0].timeToFallAsleep : '');\n        setNumberTimesArousal(res.data[0].numberTimesArousal ? res.data[0].numberTimesArousal : '');\n        setArousalDuration(res.data[0].arousalDuration ? res.data[0].arousalDuration : '');\n        setMorningWakeTime(res.data[0].morningWakeTime ? res.data[0].morningWakeTime : '');\n        setExitBedTime(res.data[0].exitBedTime ? res.data[0].exitBedTime : '');\n        setMinutesEarlyWoke(res.data[0].minutesEarlyWoke ? res.data[0].minutesEarlyWoke : '');\n        setQualityRating(res.data[0].qualityRating ? res.data[0].qualityRating : '');\n\n        setExistingDataAlert(true);\n      } else {\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\n        for (let i = 0; i < dataFuncs.length; i++){\n          dataFuncs[i]('');\n        }\n        setExistingDataAlert(false);\n      }\n      setCheckExistingDataCompleted(true);\n    })\n  } \n  const handleDataSubmit = () => {\n    axios.post(urlUploadData, {\n      //Ternarys were set to not give a value for SQL when there is none. Helps with creating graphs to skip data.\n      user: props.loggedInUser,\n      date: clickedDate === '' ? null : clickedDate,\n      napStartTime: existingNapStart === '' ? null : existingNapStart,\n      napEndTime: existingNapEnd === '' ? null : existingNapEnd,\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\n      qualityRating: qualityRating === '' ? null : qualityRating\n    })\n    .then(() => {\n      setSubmittedMessage(true);\n    })\n  };\n  let dateHeading;\n  let dateClickedYear;\n  let dateHeadingYesterday;\n  if (date){\n    const dateInMsYesterday = new Date(Date.parse(date) - 1000*86400);\n    dateHeadingYesterday = getClickedDate(dateInMsYesterday);\n    dateHeading = getClickedDate(date);\n    dateClickedYear = date.getFullYear();\n  }\n  const handleFormInput = (e) => {\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\n      setExistingNapStart(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\n      setExistingNapEnd(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\n      setSleepAidItem(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\n      setSleepAidMg(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\n      setEnterBedTime(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\n      setLightsOffTime(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\n      setTimeToFallAsleep(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\n      setNumberTimesArousal(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\n      setArousalDuration(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\n      setMorningWakeTime(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\n      setExitBedTime(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\n      setMinutesEarlyWoke(e.target.value);\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\n      setQualityRating(e.target.value);\n    }\n  }\n  const curYear = (new Date()).getFullYear();\n  return(\n    <>\n      <Container \n        className={\n          `add-data add-data-container ${props.nightMode && 'add-data-container-night'}`\n        }\n      >\n        <h1 className=\"pt-2\">Add Data</h1>\n        <h2>Pick a Date to Add Data</h2> \n        <div className=\"add-data-calendar-container\">\n          <Calendar\n            onChange={onChange}\n            value={value}\n            view={'month'}\n            onClickDay={(value, event) => {\n              setDate(value);\n              checkExistingData(value);\n            }}\n          />\n        </div>\n        {(date && props.loggedInUser) ?\n          <>\n            <h2>Adding data for {getClickedDate(date) === getClickedDate((new Date())) && 'today: '}<strong>{dateHeading}</strong>: </h2>\n            {checkExistingDataCompleted ?\n              <>\n                {(dateClickedYear < curYear || dateClickedYear > curYear) && \n                  <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (Â« or Â») at the top of the calendar to scroll between years.</Alert>\n                }\n                {existingDataAlert && \n                  <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\n                }\n                <Alert variant=\"primary\">Data from inputs asking about things that took place \"yesterday\" or \"last night\" will be dated on the graphs as {dateHeadingYesterday}.</Alert>\n                <Form className=\"add-data-form\">\n                  <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"nap-start-time\"\n                    type=\"time\" \n                    className={`add-data-form-time ${existingNapStart !== '' && \"existing-data\"}`}\n                    value={existingNapStart} \n                    placeholder={existingNapStart} \n                    onChange={handleFormInput}\n                  />\n                  <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"nap-end-time\"\n                    className={existingNapEnd !== '' && \"existing-data\"}\n                    type=\"time\" \n                    value={existingNapEnd}\n                    onChange={handleFormInput}\n                  />\n                  <Form.Label>2. Last night I took ___ mg/oz of ___ as a sleep aid. (If none, leave blank. Unit \"mg\" is for medicine, \"oz\" is for alcohol - but the unit doesn't need to be included in the input. Example: <span className=\"add-data-form-example\">5 Ambien</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"sleep-aid-item\"\n                    className={sleepAidItem !== '' && \"existing-data\"}\n                    type=\"text\" \n                    value={sleepAidItem}\n                    onChange={handleFormInput}\n                    />\n                  <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"enter-bed-time\"\n                    className={enterBedTime !== '' && \"existing-data\"}\n                    type=\"time\" \n                    value={enterBedTime}\n                    onChange={handleFormInput}\n                    />\n                  <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"lights-off-time\"\n                    className={lightsOffTime !== '' && \"existing-data\"}\n                    type=\"time\" \n                    value={lightsOffTime}\n                    onChange={handleFormInput}\n                  />\n                  <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"time-to-fall-asleep\"\n                    className={timeToFallAsleep !== '' && \"existing-data\"}\n                    type=\"number\" \n                    value={timeToFallAsleep}\n                    onChange={handleFormInput}\n                  />\n                  <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"number-times-arousal\"\n                    className={numberTimesArousal !== '' && \"existing-data\"}\n                    type=\"number\" \n                    value={numberTimesArousal}\n                    onChange={handleFormInput}\n                    />\n                  <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately. You can simply list the arousals as numbers seperated by spaces) (Example for arousals of 25min, 40min, and 10min: <span className=\"add-data-form-example\">25 40 10</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"arousal-duration\"\n                    className={arousalDuration !== '' && \"existing-data\"}\n                    type=\"text\" \n                    value={arousalDuration}\n                    onChange={handleFormInput}\n                    />\n                  <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"morning-wake-time\"\n                    className={morningWakeTime !== '' && \"existing-data\"}\n                    type=\"time\" \n                    value={morningWakeTime}\n                    onChange={handleFormInput}\n                  />\n                  <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"exit-bed-time\"\n                    className={exitBedTime !== '' && \"existing-data\"}\n                    type=\"time\" \n                    value={exitBedTime}\n                    onChange={handleFormInput}\n                    />\n                  <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"minutes-early-woke\"\n                    className={minutesEarlyWoke !== '' && \"existing-data\"}\n                    type=\"number\" \n                    value={minutesEarlyWoke}\n                    onChange={handleFormInput}\n                  />\n                  <Form.Label>\n                    10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\n                  <Form.Control \n                    id_val=\"quality-rating\"\n                    className={qualityRating !== '' && \"existing-data\"}\n                    type=\"number\" \n                    value={qualityRating}\n                    onChange={handleFormInput}\n                  />\n                </Form>\n                {submittedMessage &&\n                  <>\n                    <Alert variant=\"success\" className=\"alert-bootstrap add-data-alert-submitted\">Your data has been submitted!</Alert>\n                    <Button as={Link} to='/sleep/' variant=\"info\" className=\"add-data-button-go-to-data-overview\">Go to Overview</Button>\n                    <a href=\"#top\" className=\"add-data-link-go-to-data-overview\">\n                      <Button variant=\"info\" className=\"add-data-button-go-to-data-overview\">Add More Data</Button>\n                    </a>\n                  </>\n                }\n                <Button className=\"add-data-submit-button\" onClick={handleDataSubmit}>Submit</Button>\n                <div className=\"spacer\"></div>\n              </>\n            : \n              <>\n                <Spinner variant=\"success\" animation=\"border\" role=\"status\" id=\"spinner-centered\" className=\"spinner-centered\"><span className=\"sr-only\">Loading...</span></Spinner>\n                <div className=\"add-data-spinner-padding-for-night-mode\"></div>\n              </>\n            }\n          </>\n          :\n          <>\n            <Alert variant=\"warning\">Please log in to add data.</Alert>\n            <div className=\"add-data-spacer-logged-out\"></div>\n          </>\n        }\n      </Container>\n    </>\n    );\n}\n\nexport default AddData;","/Users/omarshishani/Coding/sleep-app/src/MorningWakeTimesChart.js",["104","105","106","107","108"],"import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport './MorningWakeTimesChart.scss';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass MorningWakeTimesChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'morningWakeTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'morningWakeTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'morningWakeTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = false;\n      data = createData1(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\n    }\n    return (\n      <>\n        <div className=\"victory-chart-1-container\">\n          <VictoryChart\n            theme={VictoryTheme.material}\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n            scale={{y:'time'}}\n            domainPadding={{ x: 20, y: 20 }}\n          >\n            <VictoryAxis\n              tickValues={xAxisTickValues}\n              tickFormat={dateLabels}\n              style={victoryAxisStyle('x', this.props.nightMode)}\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n              fixLabelOverlap={true}\n            />\n            <VictoryAxis\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n              dependentAxis\n              tickFormat={(y) => formatAMPM(y)}\n              style={victoryAxisStyle('y', this.props.nightMode)}\n            />\n            <VictoryLine\n              data={data}\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\n            />\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'exitBedCharts')}\n          </VictoryChart>\n          <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Wake Up Time</h2>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default MorningWakeTimesChart; \n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n\nMorningWakeTimesChart.propTypes = {\n  dates: PropTypes.array\n}","/Users/omarshishani/Coding/sleep-app/src/EnterBedTimesChart.js",["109","110","111","112","113","114","115","116"],"import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport './EnterBedTimesChart.scss';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryTooltip, VictoryScatter } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, nightModeTransitionTime, victoryAxisStyle, getLongDate,  VictoryScatterLineComplement, victoryLineStyle, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n//make it so graph updates when component loads\n\nclass EnterBedTimesChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'enterBedTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'enterBedTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'enterBedTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      data = createData1(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\n    }\n    c('data', data)\n    return (\n      <>\n        <div className=\"victory-chart-1-container\">\n          <VictoryChart\n            theme={VictoryTheme.material}\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n            scale={{y:'time'}}\n            domainPadding={{ x: 20, y: 20 }}\n          >\n            <VictoryAxis\n              tickValues={xAxisTickValues}\n              tickFormat={dateLabels}\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n              fixLabelOverlap={true}\n              style={victoryAxisStyle('x', this.props.nightMode)}\n              />\n            <VictoryAxis\n              style={victoryAxisStyle('y', this.props.nightMode)}\n              dependentAxis\n              tickFormat={(y) => formatAMPM(y)}\n            />\n            <VictoryLine\n              data={data}\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\n            />\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\n          </VictoryChart>\n          <h2 className={this.props.nightMode ? \"enter-bed-charts enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"This is the time that you entered your bed - you may not yet have turned the lights off.\">Time in Bed</h2>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default EnterBedTimesChart; \n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n\nEnterBedTimesChart.propTypes = {\n  dates: PropTypes.array,\n  nightMode: PropTypes.bool, \n  loggedInUser: PropTypes.string\n}","/Users/omarshishani/Coding/sleep-app/src/ExitBedTimesChart.js",["117","118","119","120","121"],"import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass LightsOffTimesChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'exitBedTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'exitBedTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'exitBedTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = false;\n      data = createData1(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\n    }\n    return (\n      <>\n        <div className=\"victory-chart-1-container\">\n          <VictoryChart\n            theme={VictoryTheme.material}\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n            scale={{y:'time'}}\n            domainPadding={{ x: 20, y: 20 }}\n          >\n            <VictoryAxis\n              tickValues={xAxisTickValues}\n              tickFormat={dateLabels}\n              style={victoryAxisStyle('x', this.props.nightMode)}\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n              fixLabelOverlap={true}\n            />\n            <VictoryAxis\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n              dependentAxis\n              tickFormat={(y) => formatAMPM(y)}\n              style={victoryAxisStyle('y', this.props.nightMode)}\n            />\n            <VictoryLine\n              data={data}\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\n            />\n            {VictoryScatterLineComplement(data, this.props.nightMode)}\n          </VictoryChart>\n        <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Time Out of Bed</h2>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default LightsOffTimesChart; \n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n\nLightsOffTimesChart.propTypes = {\n  dates: PropTypes.array\n}","/Users/omarshishani/Coding/sleep-app/src/NapTimesChart.js",["122","123","124","125","126","127","128"],"import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport './NapTimesChart.scss';\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass NapTimesChart extends React.Component {\n  state = {\n    chartInfo: []\n  };\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'napTimes', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'napTimes', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'napTimes', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      const barGraph = false;\n      data = createData1(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\n    }\n    return (\n      <>\n        <div className=\"victory-chart-1-container\">\n          <VictoryChart\n            theme={VictoryTheme.material}\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n            scale={{y:'time'}}\n            domainPadding={{ x: 20, y: 20 }}\n          >\n            <VictoryAxis\n              tickValues={xAxisTickValues}\n              tickFormat={dateLabels}\n              fixLabelOverlap={true}\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n              style={victoryAxisStyle('x', this.props.nightMode)}\n            />\n            <VictoryAxis\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n              dependentAxis\n              tickFormat={(y) => formatAMPM(y)}\n              style={victoryAxisStyle('y', this.props.nightMode)}\n            />\n            <VictoryBar\n              style={{\n                data: {\n                  fill: this.props.nightMode ? 'rgb(255 0 113)' : 'rgb(129 33 255)', \n                  transition: `fill ${nightModeTransitionTime}`\n                },\n                labels: {\n                  fill: this.props.nightMode ? 'white' : 'black'\n                }\n              }}\n              data={data}\n              barWidth={() => {\n                let firstDate;\n                let lastDate;\n                let dateDiff;\n                if (data) {\n                  firstDate = data[data.length - 1].x; \n                  lastDate = data[0].x; \n                  dateDiff = lastDate - firstDate;\n                }\n                return(\n                  dateDiff < 10 ? 18\n                  : dateDiff < 20 ? 8\n                  : 4 \n                );\n              }}\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\n              labels={({ datum }) => {\n                return(\n                  `${duration(new Date(datum._y0), new Date(datum._y))}\\n${datum.dateLabel}`\n                )}\n              }\n              \n              labelComponent={\n                <VictoryTooltip\n                  flyoutStyle={flyoutStyleNight(this.props.nightMode)}\n                />\n              }\n            />\n          </VictoryChart>\n          <h2 \n            className={\n              `charts-heading ${this.props.nightMode ?\n                'quality-rating-charts-heading-night'  \n                : 'quality-rating-charts-heading-day'\n              }`\n            }\n            title=\"The range of time from the beggining of your first nap to the end of your last nap.\"\n          >\n            Nap Times\n          </h2>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default NapTimesChart; \n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n                \nfunction duration(start, end) {\n  var h1 = start.getHours();\n  var m1 = start.getMinutes();\n  var h2 = end.getHours();\n  var m2 = end.getMinutes();\n  var time = (h2 + m2/60) - (h1 + m1/60);\n  var timeHours = time - time%1;\n  var timeMinutes = Math.round(time%1 * 60);\n  return(`${timeHours}h, ${timeMinutes}m`)\n}\n\nNapTimesChart.propTypes = {\n  dates: PropTypes.array\n}","/Users/omarshishani/Coding/sleep-app/src/global_items.js",[],"/Users/omarshishani/Coding/sleep-app/src/CreateAccount.js",[],"/Users/omarshishani/Coding/sleep-app/src/CreateAccountSuccess.js",[],"/Users/omarshishani/Coding/sleep-app/src/MinutesEarlyWokeChart.js",["129","130"],"import React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\nimport PropTypes from 'prop-types';\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass MinutesEarlyWokeChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'minutesEarlyWoke', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = false;\n      const barGraph = true;\n      data = createData1(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\n    }\n    return (\n      <>\n          <div className=\"victory-chart-1-container\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n              scale={{y:'number'}}\n              domainPadding={{ x: 20, y: 20 }}\n              \n            >\n              <VictoryAxis\n                tickValues={xAxisTickValues}\n                tickFormat={dateLabels}\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n                style={victoryAxisStyle('x', this.props.nightMode)}\n                fixLabelOverlap={true}\n              />\n              <VictoryAxis\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n                dependentAxis\n                tickFormat={(y) => `${y} min` }\n                style={victoryAxisStyle('y', this.props.nightMode)}\n              />\n              <VictoryBar\n                style={{\n                  data: {\n                    fill: this.props.nightMode ? 'rgb(255 52 0)' : 'rgb(186 0 177)', \n                    transition: `fill ${nightModeTransitionTime}`\n                  },\n                  labels: {\n                    fill: this.props.nightMode ? 'white' : 'black'\n                  }\n                }}\n                data={data}\n                barWidth={() => {\n                  let firstDate;\n                  let lastDate;\n                  let dateDiff;\n                  if (data) {\n                    firstDate = data[data.length - 1].x; \n                    lastDate = data[0].x; \n                    dateDiff = lastDate - firstDate;\n                  }\n                  return(\n                    dateDiff < 10 ? 18\n                    : dateDiff < 20 ? 8\n                    : 4 \n                  );\n                }}\n                labels={({ datum }) => {\n                  return(`${datum.y} min\\n${datum.dateLabel}`);\n                }}\n                labelComponent={\n                  <VictoryTooltip\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\n                  />\n                }\n              />\n            </VictoryChart>\n             <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Minutes Early Awake</h2>\n          </div>\n      </>\n    )\n  }\n}\n\nexport default MinutesEarlyWokeChart; \n\nMinutesEarlyWokeChart.propTypes = {\n  dates: PropTypes.array\n}\n           ","/Users/omarshishani/Coding/sleep-app/src/ArousalDurationChart.js",["131","132","133","134","135"],"import React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip, VictoryStack } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, victoryAxisStyle, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass ArousalDurationChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'arousalDuration', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'arousalDuration', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'arousalDuration', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const chartInfoPrimer = this.state.chartInfo;\n    const chartInfo = chartInfoPrimer.slice(0).reverse();\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data = [];\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      const barGraph = false;\n      data = createData1(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\n    }\n\n    const maxNumberArousals = Math.max(...data.map(x => x.length));\n    const arousals = [];\n    const bars = [];\n    //A SEPERATE ARRAY IS CREATED FOR EACH AROUSAL: THE FIRST, SECOND, ETC., ALL THE WAY UNTIL THE MAX NUMBER OF AROUSALS FOR THE GIVEN DATA SET\n    for (let i = 0; i < maxNumberArousals; i++){\n      arousals.push([]);\n    }\n    data.forEach((x, i) => {\n      for (let i = 0; i < maxNumberArousals; i++){\n        if (x[i]){\n          arousals[i].push(x[i]);\n        }\n      }\n    })\n    let firstDate;\n    let lastDate;\n    if (arousals[0]) {\n      firstDate = arousals[0][0].x;\n      lastDate = arousals[0][arousals[0].length - 1].x;\n    }\n\n    const createBars = () => {\n      for (let i = 0; i < maxNumberArousals; i++){\n        bars.push(\n          <VictoryBar\n            style={{\n              labels: {\n                fill: this.props.nightMode ? 'white' : 'black'\n              }\n            }}\n            key={i}\n            data={arousals[i]}\n            barWidth={() => {\n              let dateDiff;\n              if (data) {\n                dateDiff = lastDate - firstDate;\n              }\n              return(\n                dateDiff < 10 ? 18\n                : dateDiff < 20 ? 8\n                : 4 \n              );\n            }}\n            labels={({ datum }) => {\n              return(`${datum.y} min\\n${datum.dateLabel}`);\n            }}\n            labelComponent={\n              <VictoryTooltip\n                flyoutStyle={flyoutStyleNight(this.props.nightMode)}\n              />\n            }\n          />\n        )\n      }\n    }\n    createBars();\n    return (\n      <>\n          <div className=\"victory-chart-1-container\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n              scale={{y:'number'}}\n              domainPadding={{ x: 20, y: 20 }}\n            >\n              <VictoryAxis\n                tickValues={xAxisTickValues}\n                tickFormat={dateLabels}\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n                fixLabelOverlap={true}\n                style={victoryAxisStyle('x', this.props.nightMode)}\n              />\n              <VictoryAxis\n                dependentAxis\n                tickFormat={(y) => `${y} min` }\n                style={victoryAxisStyle('y', this.props.nightMode)}\n              />\n              <VictoryStack\n                colorScale={\n                  this.props.nightMode ? \n                  ['rgb(67 0 255)', \n                  'rgb(244 0 255)', \n                  'rgb(8 190 0)', \n                  'rgb(255 217 0)', \n                  'red']\n                  : \n                  ['rgb(126 81 255)', \n                  'rgb(244 0 255)', \n                  'rgb(8 190 0)', \n                  'rgb(255 134 0)', \n                  'red']\n                }\n              >\n                {[...bars]}\n              </VictoryStack>\n            </VictoryChart>\n            <h2 \n              className={\n                `charts-heading ${this.props.nightMode ?\n                  'quality-rating-charts-heading-night'  \n                  : 'quality-rating-charts-heading-day'\n                }`\n              }\n              title=\"The amounts of time you were awake last night. Each colored bar represents a seperate time waking up.\"\n            >\n              Arousal Durations\n            </h2>\n          </div>\n      </>\n    )\n  }\n}\n\nexport default ArousalDurationChart; \n\nArousalDurationChart.propTypes = {\n  dates: PropTypes.array\n}\n           ","/Users/omarshishani/Coding/sleep-app/src/HomeLoggedOut.js",["136","137","138"],"/Users/omarshishani/Coding/sleep-app/src/NavbarContainer.js",[],"/Users/omarshishani/Coding/sleep-app/src/LightsOffTimesChart.js",["139","140","141","142","143","144","145"],"import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryScatter } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, victoryAxisStyle, VictoryScatterLineComplement, victoryLineStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass LightsOffTimesChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'lightsOffTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'lightsOffTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'lightsOffTime', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      data = createData1(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\n    }\n    return (\n      <>\n        <div className=\"victory-chart-1-container\">\n          <VictoryChart\n            theme={VictoryTheme.material}\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n            scale={{y:'time'}}\n            domainPadding={{ x: 20, y: 20 }}\n          >\n            <VictoryAxis\n              tickValues={xAxisTickValues}\n              tickFormat={dateLabels}\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n              fixLabelOverlap={true}\n              style={victoryAxisStyle('x', this.props.nightMode)}\n            />\n            <VictoryAxis\n              dependentAxis\n              tickFormat={(y) => formatAMPM(y)}\n              style={victoryAxisStyle('y', this.props.nightMode)}\n            />\n            <VictoryLine\n              data={data}\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\n            />\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\n          </VictoryChart>\n          <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"The time you turned the lights off after getting in bed.\">Time Lights Off</h2>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default LightsOffTimesChart; \n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n\nLightsOffTimesChart.propTypes = {\n  dates: PropTypes.array\n}","/Users/omarshishani/Coding/sleep-app/src/TimeToFallAsleepChart.js",["146","147","148","149","150","151","152"],"import React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, victoryTooltipLabelStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass TimeToFallAsleepChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'timeToFallAsleep', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'timeToFallAsleep', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'timeToFallAsleep', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      const barGraph = true;\n      data = createData1(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\n    }\n    return (\n      <>\n          <div className=\"victory-chart-1-container\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n              scale={{y:'number'}}\n              domainPadding={{ x: 20, y: 20 }}\n            >\n              <VictoryAxis\n                tickValues={xAxisTickValues}\n                tickFormat={dateLabels}\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n                fixLabelOverlap={true}\n                style={victoryAxisStyle('x', this.props.nightMode)}\n                />\n              <VictoryAxis\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n                dependentAxis\n                tickFormat={(y) => `${y} min` }\n                style={victoryAxisStyle('y', this.props.nightMode)}\n              />\n              <VictoryBar\n                style={{\n                  data: {\n                    fill: this.props.nightMode ? 'rgb(0 168 255)' : '#00b6ba', \n                    transition: `fill ${nightModeTransitionTime}`\n                  },\n                  labels: {\n                    fill: this.props.nightMode ? 'white' : 'black'\n                  }\n                }}\n                data={data}\n                barWidth={() => {\n                  let firstDate;\n                  let lastDate;\n                  let dateDiff;\n                  if (data) {\n                    firstDate = data[data.length - 1].x; \n                    lastDate = data[0].x; \n                    dateDiff = lastDate - firstDate;\n                  }\n                  return(\n                    dateDiff < 10 ? 18\n                    : dateDiff < 20 ? 8\n                    : 4 \n                  );\n                }}\n                labels={({ datum }) => {\n                  if (datum){\n                    return(\n                      `${datum.timeLabel}\\n${datum.dateLabel}`\n                    );\n                  }\n                }}\n                labelComponent={\n                  <VictoryTooltip\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\n                  />\n                }\n              />\n            </VictoryChart>\n              <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"How long it took you to fall asleep after turning the lights off.\">Time to Fall Asleep</h2>\n          </div>\n      </>\n    )\n  }\n}\n\nexport default TimeToFallAsleepChart; \n\nTimeToFallAsleepChart.propTypes = {\n  dates: PropTypes.array,\n  nightMode: PropTypes.bool, \n  loggedInUser: PropTypes.string\n}\n           ","/Users/omarshishani/Coding/sleep-app/src/SleepAidItemChart.js",["153","154","155","156","157","158"],"import React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass SleepAidItemChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'sleepAidItem', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'sleepAidItem', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'sleepAidItem', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      const barGraph = false;\n      data = createData1(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\n    }\n    return (\n      <>\n          <div className=\"victory-chart-1-container\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n              scale={{y:'number'}}\n              domainPadding={{ x: 20, y: 20 }}\n            >\n              <VictoryAxis\n                tickValues={xAxisTickValues}\n                tickFormat={dateLabels}\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n                fixLabelOverlap={true}\n                style={victoryAxisStyle('x', this.props.nightMode)}\n              />\n              <VictoryAxis\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n                dependentAxis\n                tickFormat={(y) => `${y} mg/oz`}\n                style={victoryAxisStyle('y', this.props.nightMode)}\n              />\n              <VictoryBar\n                style={{\n                  data: {\n                    fill: this.props.nightMode ? 'rgb(255 0 207)' : 'rgb(49 0 186)', \n                    transition: `fill ${nightModeTransitionTime}`\n                  },\n                  labels: {\n                    fill: this.props.nightMode ? 'white' : 'black'\n                  }\n                }}\n                data={data}\n                barWidth={() => {\n                  let firstDate;\n                  let lastDate;\n                  let dateDiff;\n                  if (data) {\n                    firstDate = data[data.length - 1].x; \n                    lastDate = data[0].x; \n                    dateDiff = lastDate - firstDate;\n                  }\n                  return(\n                    dateDiff < 10 ? 18\n                    : dateDiff < 20 ? 8\n                    : 4 \n                  );\n                }}\n                labels={({ datum }) => {\n                  if (datum.sleepAidItem){\n                    const sleepAidItem = datum.sleepAidItem.toLowerCase();\n                    return(\n                      `${datum.y}${sleepAidItem === 'alcohol' ? 'oz' : 'mg'} ${datum.sleepAidItem}\\n${datum.dateLabel}`\n                    );\n                  }\n                }}\n                labelComponent={\n                  <VictoryTooltip\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\n                  />\n                }\n              />\n            </VictoryChart>\n            <h2 \n              className={\n                `charts-heading ${this.props.nightMode ?\n                  'quality-rating-charts-heading-night'  \n                  : 'quality-rating-charts-heading-day'\n                }`\n              }\n              title=\"The item and amount of sleep aid you took last night.\"\n            >\n              Sleep Aid Item\n            </h2>\n          </div>\n      </>\n    )\n  }\n}\n\nexport default SleepAidItemChart; \n\nSleepAidItemChart.propTypes = {\n  dates: PropTypes.array\n}\n           ","/Users/omarshishani/Coding/sleep-app/src/QualityRatingChart.js",["159","160","161","162","163"],"import React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\n\nconst urlGetData = `${url}get-data`;\n\nclass QualityRatingChart extends React.Component {\n  state = {\n    chartInfo: []\n  }\n  componentDidMount(){\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\n      createChartInfo(urlGetData, this.props.loggedInUser, 'qualityRating', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    } else { \n      createChartInfo(urlGetData, 'sample', 'qualityRating', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  componentDidUpdate(prevProps){\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\n      createChartInfo(urlGetData, this.props.loggedInUser, 'qualityRating', function(response){\n        this.setState({chartInfo: response});\n      }.bind(this))\n    }\n  }\n  render() {\n    const {chartInfo} = this.state;\n    let dateLabels = [];\n    let xAxisTickValues = [];\n    let data;\n    if (chartInfo.length > 0) {\n      const showYesterdaysDate = true;\n      const barGraph = true;\n      data = createData1(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\n    }\n    return (\n      <>\n          <div className=\"victory-chart-1-container\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\n              scale={{y:'number'}}\n              domainPadding={{ x: 20, y: 20 }}\n              \n            >\n              <VictoryAxis\n                tickValues={xAxisTickValues}\n                tickFormat={dateLabels}\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\n                fixLabelOverlap={true}\n                style={victoryAxisStyle('x', this.props.nightMode)}\n              />\n              <VictoryAxis\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\n                dependentAxis\n                tickFormat={(y) => `${y}`}\n                style={victoryAxisStyle('y', this.props.nightMode)}\n              />\n              <VictoryBar\n                style={{\n                  data: {\n                    fill: this.props.nightMode ? 'rgb(173 31 255)' : 'rgb(37 39 255)', \n                    transition: `fill ${nightModeTransitionTime}`\n                  },\n                  labels: {\n                    fill: this.props.nightMode ? 'white' : 'black'\n                  }\n                }}\n                data={data}\n                barWidth={() => {\n                  let firstDate;\n                  let lastDate;\n                  let dateDiff;\n                  if (data) {\n                    firstDate = data[data.length - 1].x; \n                    lastDate = data[0].x; \n                    dateDiff = lastDate - firstDate;\n                  }\n                  return(\n                    dateDiff < 10 ? 18\n                    : dateDiff < 20 ? 8\n                    : 4 \n                  );\n                }}\n                labels={({ datum }) => {\n                  return(`${datum.y} out of 5\\n${datum.dateLabel}`);\n                }}\n                labelComponent={\n                  <VictoryTooltip\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\n                  />\n                }\n              />\n            </VictoryChart>\n            <h2 \n              className={\n                `charts-heading ${this.props.nightMode ?\n                  'quality-rating-charts-heading-night'  \n                  : 'quality-rating-charts-heading-day'\n                }`\n              }\n              title=\"A rating out of 5 of how well you slept last night.\"\n            >\n              Sleep Quality Rating\n            </h2>\n          </div>\n      </>\n    )\n  }\n}\n\nexport default QualityRatingChart; \n\nQualityRatingChart.propTypes = {\n  dates: PropTypes.array\n}\n           ","/Users/omarshishani/Coding/sleep-app/src/NightModeSwitch.js",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":16,"column":36,"nodeType":"170","messageId":"171","endLine":16,"endColumn":39},{"ruleId":"168","severity":1,"message":"172","line":16,"column":41,"nodeType":"170","messageId":"171","endLine":16,"endColumn":44},{"ruleId":"168","severity":1,"message":"173","line":27,"column":9,"nodeType":"170","messageId":"171","endLine":27,"endColumn":17},{"ruleId":"168","severity":1,"message":"174","line":50,"column":9,"nodeType":"170","messageId":"171","endLine":50,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":313,"column":13,"nodeType":"177","endLine":313,"endColumn":68},{"ruleId":"168","severity":1,"message":"178","line":8,"column":9,"nodeType":"170","messageId":"171","endLine":8,"endColumn":10},{"ruleId":"179","severity":1,"message":"180","line":40,"column":6,"nodeType":"181","endLine":40,"endColumn":13,"suggestions":"182"},{"ruleId":"168","severity":1,"message":"183","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":19},{"ruleId":"168","severity":1,"message":"184","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":7,"column":14,"nodeType":"170","messageId":"171","endLine":7,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":7,"column":17,"nodeType":"170","messageId":"171","endLine":7,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":64,"column":15,"nodeType":"188","endLine":64,"endColumn":66},{"ruleId":"168","severity":1,"message":"183","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":19},{"ruleId":"168","severity":1,"message":"189","line":4,"column":78,"nodeType":"170","messageId":"171","endLine":4,"endColumn":92},{"ruleId":"168","severity":1,"message":"190","line":4,"column":94,"nodeType":"170","messageId":"171","endLine":4,"endColumn":108},{"ruleId":"168","severity":1,"message":"184","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":13},{"ruleId":"168","severity":1,"message":"191","line":7,"column":17,"nodeType":"170","messageId":"171","endLine":7,"endColumn":40},{"ruleId":"168","severity":1,"message":"185","line":7,"column":60,"nodeType":"170","messageId":"171","endLine":7,"endColumn":71},{"ruleId":"168","severity":1,"message":"192","line":7,"column":122,"nodeType":"170","messageId":"171","endLine":7,"endColumn":136},{"ruleId":"168","severity":1,"message":"193","line":7,"column":138,"nodeType":"170","messageId":"171","endLine":7,"endColumn":163},{"ruleId":"168","severity":1,"message":"183","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":19},{"ruleId":"168","severity":1,"message":"184","line":5,"column":8,"nodeType":"170","messageId":"171","endLine":5,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":6,"column":14,"nodeType":"170","messageId":"171","endLine":6,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":6,"column":17,"nodeType":"170","messageId":"171","endLine":6,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":63,"column":15,"nodeType":"188","endLine":63,"endColumn":66},{"ruleId":"168","severity":1,"message":"183","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":19},{"ruleId":"168","severity":1,"message":"184","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":7,"column":14,"nodeType":"170","messageId":"171","endLine":7,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":7,"column":78,"nodeType":"170","messageId":"171","endLine":7,"endColumn":89},{"ruleId":"168","severity":1,"message":"192","line":7,"column":91,"nodeType":"170","messageId":"171","endLine":7,"endColumn":105},{"ruleId":"168","severity":1,"message":"193","line":7,"column":107,"nodeType":"170","messageId":"171","endLine":7,"endColumn":132},{"ruleId":"186","severity":1,"message":"187","line":65,"column":15,"nodeType":"188","endLine":65,"endColumn":66},{"ruleId":"168","severity":1,"message":"178","line":4,"column":14,"nodeType":"170","messageId":"171","endLine":4,"endColumn":15},{"ruleId":"186","severity":1,"message":"187","line":63,"column":17,"nodeType":"188","endLine":63,"endColumn":68},{"ruleId":"168","severity":1,"message":"184","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":5,"column":14,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":5,"column":53,"nodeType":"170","messageId":"171","endLine":5,"endColumn":64},{"ruleId":"168","severity":1,"message":"192","line":5,"column":66,"nodeType":"170","messageId":"171","endLine":5,"endColumn":80},{"ruleId":"168","severity":1,"message":"193","line":5,"column":82,"nodeType":"170","messageId":"171","endLine":5,"endColumn":107},{"ruleId":"175","severity":1,"message":"176","line":36,"column":13,"nodeType":"177","endLine":36,"endColumn":43},{"ruleId":"175","severity":1,"message":"176","line":37,"column":13,"nodeType":"177","endLine":37,"endColumn":89},{"ruleId":"175","severity":1,"message":"176","line":48,"column":13,"nodeType":"177","endLine":48,"endColumn":43},{"ruleId":"168","severity":1,"message":"183","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":19},{"ruleId":"168","severity":1,"message":"190","line":3,"column":78,"nodeType":"170","messageId":"171","endLine":3,"endColumn":92},{"ruleId":"168","severity":1,"message":"184","line":5,"column":8,"nodeType":"170","messageId":"171","endLine":5,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":6,"column":14,"nodeType":"170","messageId":"171","endLine":6,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":6,"column":83,"nodeType":"170","messageId":"171","endLine":6,"endColumn":94},{"ruleId":"168","severity":1,"message":"192","line":6,"column":96,"nodeType":"170","messageId":"171","endLine":6,"endColumn":110},{"ruleId":"168","severity":1,"message":"193","line":6,"column":112,"nodeType":"170","messageId":"171","endLine":6,"endColumn":137},{"ruleId":"168","severity":1,"message":"184","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":5,"column":14,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"168","severity":1,"message":"194","line":5,"column":78,"nodeType":"170","messageId":"171","endLine":5,"endColumn":102},{"ruleId":"168","severity":1,"message":"185","line":5,"column":104,"nodeType":"170","messageId":"171","endLine":5,"endColumn":115},{"ruleId":"168","severity":1,"message":"192","line":5,"column":117,"nodeType":"170","messageId":"171","endLine":5,"endColumn":131},{"ruleId":"168","severity":1,"message":"193","line":5,"column":133,"nodeType":"170","messageId":"171","endLine":5,"endColumn":158},{"ruleId":"186","severity":1,"message":"187","line":63,"column":17,"nodeType":"188","endLine":63,"endColumn":68},{"ruleId":"168","severity":1,"message":"184","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":5,"column":14,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":5,"column":78,"nodeType":"170","messageId":"171","endLine":5,"endColumn":89},{"ruleId":"168","severity":1,"message":"192","line":5,"column":91,"nodeType":"170","messageId":"171","endLine":5,"endColumn":105},{"ruleId":"168","severity":1,"message":"193","line":5,"column":107,"nodeType":"170","messageId":"171","endLine":5,"endColumn":132},{"ruleId":"186","severity":1,"message":"187","line":63,"column":17,"nodeType":"188","endLine":63,"endColumn":68},{"ruleId":"168","severity":1,"message":"184","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"178","line":5,"column":14,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"168","severity":1,"message":"192","line":5,"column":78,"nodeType":"170","messageId":"171","endLine":5,"endColumn":92},{"ruleId":"168","severity":1,"message":"193","line":5,"column":94,"nodeType":"170","messageId":"171","endLine":5,"endColumn":119},{"ruleId":"186","severity":1,"message":"187","line":64,"column":17,"nodeType":"188","endLine":64,"endColumn":68},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'c' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["197"],"'Container' is defined but never used.","'axios' is defined but never used.","'getLongDate' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'nightModeTransitionTime' is defined but never used.","'yesterdaysDate' is defined but never used.","'yesterdaysDateLabelPrimer' is defined but never used.","'victoryTooltipLabelStyle' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"200","text":"201"},[1826,1833],"[checkExistingData, props]"]