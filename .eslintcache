[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js":"21"},{"size":661,"mtime":1609548489364,"results":"22","hashOfConfig":"23"},{"size":12647,"mtime":1611032350831,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":16267,"mtime":1611006435224,"results":"26","hashOfConfig":"23"},{"size":6448,"mtime":1611032937868,"results":"27","hashOfConfig":"23"},{"size":8916,"mtime":1611032239422,"results":"28","hashOfConfig":"23"},{"size":5439,"mtime":1610830975379,"results":"29","hashOfConfig":"23"},{"size":3885,"mtime":1610830975367,"results":"30","hashOfConfig":"23"},{"size":3768,"mtime":1610830975377,"results":"31","hashOfConfig":"23"},{"size":3632,"mtime":1610830975373,"results":"32","hashOfConfig":"23"},{"size":3682,"mtime":1610830975369,"results":"33","hashOfConfig":"23"},{"size":4681,"mtime":1610830975404,"results":"34","hashOfConfig":"23"},{"size":550,"mtime":1610073486623,"results":"35","hashOfConfig":"23"},{"size":3019,"mtime":1611032837624,"results":"36","hashOfConfig":"23"},{"size":7417,"mtime":1610686373193,"results":"37","hashOfConfig":"23"},{"size":1309,"mtime":1610684940304,"results":"38","hashOfConfig":"23"},{"size":4484,"mtime":1610830975375,"results":"39","hashOfConfig":"23"},{"size":5660,"mtime":1610830975364,"results":"40","hashOfConfig":"23"},{"size":4653,"mtime":1610830975399,"results":"41","hashOfConfig":"23"},{"size":4887,"mtime":1610830975401,"results":"42","hashOfConfig":"23"},{"size":1340,"mtime":1610516763531,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asvjz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"46"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["103","104"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["105","106","107","108","109"],"import './App.css';\r\nimport NapTimesChart from './NapTimesChart';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport NavbarContainer from './NavbarContainer';\r\nimport AddData from './AddData';\r\nimport './App.css';\r\nimport './App.scss';\r\nimport React from 'react';\r\nimport {Switch, Route} from 'react-router';\r\nimport {url, c} from './global_items';\r\nimport EnterBedTimesChart from './EnterBedTimesChart';\r\nimport MorningWakeTimesChart from './MorningWakeTimesChart';\r\nimport LightsOffTimesChart from './LightsOffTimesChart';\r\nimport ExitBedTimesChart from './ExitBedTimesChart';\r\nimport { Alert, Button, Container, Col, Row } from 'react-bootstrap';\r\nimport TimeToFallAsleepChart from './TimeToFallAsleepChart';\r\nimport HomeLoggedOut from './HomeLoggedOut';\r\nimport CreateAccount from './CreateAccount';\r\nimport CreateAccountSuccess from './CreateAccountSuccess';\r\nimport backgroundTop from './landing-background-opt.svg';\r\nimport MinutesEarlyWokeChart from './MinutesEarlyWokeChart';\r\nimport ArousalDurationChart from './ArousalDurationChart';\r\nimport QualityRatingChart from './QualityRatingChart';\r\nimport SleepAidItemChart from './SleepAidItemChart';\r\nimport moon_svg from './images/moon.svg';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst urlAuth = `${url}auth`;\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loggedInUser, setLoggedInUser] = useState(null);\r\n  const [loggedInUserError, setLoggedinUserError] = useState(null);\r\n  const [nightMode, setNightMode] = useState(true);\r\n  const [range, setRange] = useState(30);\r\n  // const [intervalId, setIntervalId] = useState(null);\r\n  useEffect(() => {\r\n    axios.get(urlAuth) \r\n    .then(res => { \r\n      setLoggedInUser(res.data);\r\n    }).catch(error => {console.log(error)})\r\n    // const intervalId = setInterval(checkLoggedIn, 2000);\r\n    // setIntervalId(intervalId);\r\n  }, [])\r\n  \r\n  const checkLoggedIn = () => {\r\n    axios.get(urlAuth) \r\n    .then(res => { \r\n      setLoggedInUser(res.data);\r\n    }).catch(error => {\r\n      console.log(error)\r\n      console.log('Axios error. User logged out.')\r\n      if (loggedInUserError === false) {\r\n        console.log('Axios error. User logged out.')\r\n        if (url !== 'http://localhost:4000/recipeapp/recipeapp-server/'){\r\n          alert(\"There was an error with the server. ðŸ¤¬ Alert the Webmaster!\");\r\n        }\r\n        setLoggedinUserError(true);\r\n      }\r\n      setLoggedInUser(null);\r\n    })\r\n  }\r\n  const handleNewLoggedInUser = (newLoggedInUser) => {\r\n    setLoggedInUser(newLoggedInUser);\r\n  }\r\n  const handleLoginSubmit = (e, username, password) => {\r\n    c('handling login submit')\r\n    e.preventDefault();\r\n    axios.post(urlAuth,     \r\n      {\r\n        username: username, \r\n        password: password \r\n      }\r\n    )\r\n    .then(res => {\r\n      c('axios response to post user info', res)\r\n      if (res.data.username && res.data.username !== ''){\r\n        setLoggedInUser(res.data.username);\r\n      }\r\n    }).catch(error => {console.log(error)})\r\n    // .then( \r\n    //   axios.get(urlAuth) \r\n    //   .then(res => { \r\n    //     c('logged in user submission data', res.data);\r\n    //     setLoggedInUser(res.data);\r\n    //   }).catch(error => {console.log('Axios error from urlAuth: ', error)})\r\n    // )\r\n  }\r\n  const handleLoginFormChange = (eTargetAttrVal, item) => {\r\n    console.log('loginformchage')\r\n    if (item === 'username'){\r\n      setUsername(eTargetAttrVal);\r\n    } else if (item === 'password') {\r\n      setPassword(eTargetAttrVal);\r\n    }\r\n  }\r\n  const handleLogout = () => {\r\n    setLoggedInUser(null);\r\n  }\r\n  const navbar = \r\n    <NavbarContainer\r\n      setNightMode={setNightMode}\r\n      nightMode={nightMode}\r\n      loginSubmit={handleLoginSubmit}\r\n      onLoginFormChange={handleLoginFormChange}\r\n      loggedInUser={loggedInUser}\r\n      onLogout={handleLogout}\r\n      username={username}\r\n      password={password}\r\n    />\r\n  ;\r\n  return(\r\n    <Switch>\r\n      <Route path=\"/sleep/create-account-success\" render={() => (\r\n        <div className={nightMode && 'container-wrapper-night-mode'}>\r\n          {navbar}\r\n          <CreateAccountSuccess \r\n            nightMode={nightMode}\r\n            loggedInUser={loggedInUser}\r\n          />\r\n        </div>\r\n      )} />\r\n      <Route path=\"/sleep/create-account\" render={() => (\r\n        <div className={nightMode && 'container-wrapper-night-mode'}>\r\n          {navbar}\r\n          <CreateAccount \r\n            nightMode={nightMode}\r\n            loggedInUser={loggedInUser}\r\n            setNewLoggedInUser={handleNewLoggedInUser}\r\n          />\r\n        </div>\r\n      )} />\r\n      <Route path=\"/sleep/add-data\">\r\n        <>\r\n          {navbar}\r\n          <div className={`app-container-wrapper ${nightMode && 'app-container-wrapper-night'}`}>\r\n            <div className={nightMode && \"add-data-component-wrapper-night\"}>\r\n              <AddData \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n              />\r\n            </div>\r\n          </div>\r\n        </>\r\n      </Route>\r\n\r\n      \r\n      <Route path=\"/sleep/overview\">\r\n        <div className={`app-charts-container-wrapper ${nightMode && 'app-charts-container-wrapper-night'}`}>\r\n          {navbar}\r\n          {/* {!loggedInUser && <Redirect to=\"/sleep/home-logged-out\" />} */}\r\n          <div className={`app-range-input-container ${nightMode && 'app-range-input-container-night'}`}>\r\n            <label>Show data from up to ___ days ago.</label>\r\n            <input \r\n              className=\"mr-3\"\r\n              type='number'\r\n              value={range}\r\n              onChange={(e) => {\r\n                setRange(Number(e.target.value));\r\n              }}\r\n            />\r\n            <div>\r\n              <Button className=\"button-inline\" onClick={() => {setRange(7)}}>7</Button>\r\n              <Button className=\"button-inline\" onClick={() => {setRange(15)}}>15</Button>\r\n              <Button className=\"button-inline\" onClick={() => {setRange(30)}}>30</Button>\r\n              <Button className=\"button-inline\" onClick={() => {setRange(60)}}>60</Button>\r\n              <Button className=\"button-inline\" onClick={() => {setRange(180)}}>180</Button>\r\n            </div>\r\n          </div>\r\n          <div className={nightMode && \"container-night-mode\"} style={{backgroundColor:'transparent'}}>\r\n            <Alert variant=\"warning\" className=\"mt-5 ml-3 mr-3 app-sample-data-warning\">Sample Data Shown. Log In to View Your Own Data</Alert>\r\n          </div>\r\n          <Container fluid className=\"app-charts-container\">\r\n            <div className=\"ct1\">\r\n              <EnterBedTimesChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct2\">\r\n              <LightsOffTimesChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct3\">\r\n              <TimeToFallAsleepChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct9\">\r\n              <MorningWakeTimesChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct8\">\r\n              <ExitBedTimesChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct7\">\r\n              <MinutesEarlyWokeChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <div className=\"ct4\">\r\n              <SleepAidItemChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct6\">\r\n              <ArousalDurationChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"ct5\">\r\n              <QualityRatingChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <div className=\"ct10\">\r\n              <NapTimesChart \r\n                nightMode={nightMode}\r\n                loggedInUser={loggedInUser}\r\n                range={range}\r\n              />\r\n              {(!loggedInUser || loggedInUser === '') && \r\n                <div className={`app-sample-data-title-container ${nightMode && 'container-night-mode'}`}>\r\n                  <h3 className=\"text-center\">(Sample Data)</h3>\r\n                </div>\r\n              }\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </Route>\r\n      <Route path=\"/sleep\">\r\n        <>\r\n          <div>\r\n            <img className=\"home-logged-out-moon\" src={moon_svg} />\r\n          </div>\r\n          <div className=\"home-logged-out-section-1-background-color\">\r\n          </div>\r\n          <div className=\"home-logged-out-section-1-background-mountains\">\r\n          </div>\r\n          {navbar}\r\n          <HomeLoggedOut />\r\n        </>\r\n      </Route>\r\n      <Route path=\"/sleep/home-logged-out\" render={() => (\r\n        <>\r\n          <div className=\"home-logged-out-section-1-background\"\r\n          style={{backgroundImage: `url(${backgroundTop})`}}\r\n          ></div>\r\n          {navbar}\r\n          <HomeLoggedOut />\r\n        </>\r\n      )} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default App;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["110","111"],"import { useState, useEffect } from 'react';\r\nimport { Alert, Button, Container, Form, Spinner } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Calendar } from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport {c, getClickedDate, url} from './global_items';\r\n\r\nconst urlCheckExistingData = `${url}check-existing-data`;\r\nconst urlUploadData = `${url}upload-data`;\r\n\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction AddData (props) {\r\n  const [value, onChange] = useState(new Date());\r\n  const [date, setDate] = useState(null);\r\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\r\n  const [existingNapStart, setExistingNapStart] = useState('');\r\n  const [existingNapEnd, setExistingNapEnd] = useState('');\r\n  const [sleepAidItem, setSleepAidItem] = useState('');\r\n  const [sleepAidMg, setSleepAidMg] = useState('');\r\n  const [enterBedTime, setEnterBedTime] = useState('');\r\n  const [lightsOffTime, setLightsOffTime] = useState('');\r\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\r\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\r\n  const [arousalDuration, setArousalDuration] = useState('');\r\n  const [morningWakeTime, setMorningWakeTime] = useState('');\r\n  const [exitBedTime, setExitBedTime] = useState('');\r\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\r\n  const [qualityRating, setQualityRating] = useState('');\r\n  const [clickedDate, setClickedDate] = useState(null);\r\n  const [checkExistingDataCompleted, setCheckExistingDataCompleted] = useState(false);\r\n  const [submittedMessage, setSubmittedMessage] = useState(false); \r\n  useEffect(() => {\r\n    let d = new Date();\r\n    setDate(d);\r\n    checkExistingData(d);\r\n  }, [props]);\r\n  useEffect(() => {\r\n    setSubmittedMessage(false);\r\n  }, [clickedDate])\r\n\r\n  const checkExistingData = (clickedDate) => {\r\n    setCheckExistingDataCompleted(false);\r\n    if (!props.loggedInUser){return};\r\n    axios.post(urlCheckExistingData, {\r\n      clickedDate: getClickedDate(clickedDate, 'mysql'),\r\n      user: props.loggedInUser\r\n    })\r\n    .then(res => {\r\n      setClickedDate(getClickedDate(clickedDate, 'mysql'));\r\n      if (res.data.length > 0){\r\n\r\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\r\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napEndTime : '');\r\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\r\n        setSleepAidMg(res.data[0].sleepAidMg ? res.data[0].sleepAidMg : '');\r\n        setEnterBedTime(res.data[0].enterBedTime ? res.data[0].enterBedTime : '');\r\n        setLightsOffTime(res.data[0].lightsOffTime ? res.data[0].lightsOffTime : '');\r\n        setTimeToFallAsleep(res.data[0].timeToFallAsleep ? res.data[0].timeToFallAsleep : '');\r\n        setNumberTimesArousal(res.data[0].numberTimesArousal ? res.data[0].numberTimesArousal : '');\r\n        setArousalDuration(res.data[0].arousalDuration ? res.data[0].arousalDuration : '');\r\n        setMorningWakeTime(res.data[0].morningWakeTime ? res.data[0].morningWakeTime : '');\r\n        setExitBedTime(res.data[0].exitBedTime ? res.data[0].exitBedTime : '');\r\n        setMinutesEarlyWoke(res.data[0].minutesEarlyWoke ? res.data[0].minutesEarlyWoke : '');\r\n        setQualityRating(res.data[0].qualityRating ? res.data[0].qualityRating : '');\r\n\r\n        setExistingDataAlert(true);\r\n      } else {\r\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\r\n        for (let i = 0; i < dataFuncs.length; i++){\r\n          dataFuncs[i]('');\r\n        }\r\n        setExistingDataAlert(false);\r\n      }\r\n      setCheckExistingDataCompleted(true);\r\n    })\r\n  } \r\n  const handleDataSubmit = () => {\r\n    axios.post(urlUploadData, {\r\n      //Ternarys were set to not give a value for SQL when there is none. Helps with creating graphs to skip data.\r\n      user: props.loggedInUser,\r\n      date: clickedDate === '' ? null : clickedDate,\r\n      napStartTime: existingNapStart === '' ? null : existingNapStart,\r\n      napEndTime: existingNapEnd === '' ? null : existingNapEnd,\r\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\r\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\r\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\r\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\r\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\r\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\r\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\r\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\r\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\r\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\r\n      qualityRating: qualityRating === '' ? null : qualityRating\r\n    })\r\n    .then(() => {\r\n      setSubmittedMessage(true);\r\n    })\r\n  };\r\n  let dateHeading;\r\n  let dateClickedYear;\r\n  let dateHeadingYesterday;\r\n  if (date){\r\n    const dateInMsYesterday = new Date(Date.parse(date) - 1000*86400);\r\n    dateHeadingYesterday = getClickedDate(dateInMsYesterday);\r\n    dateHeading = getClickedDate(date);\r\n    dateClickedYear = date.getFullYear();\r\n  }\r\n  const handleFormInput = (e) => {\r\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\r\n      setExistingNapStart(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\r\n      setExistingNapEnd(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\r\n      setSleepAidItem(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\r\n      setSleepAidMg(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\r\n      setEnterBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\r\n      setLightsOffTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\r\n      setTimeToFallAsleep(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\r\n      setNumberTimesArousal(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\r\n      setArousalDuration(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\r\n      setMorningWakeTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\r\n      setExitBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\r\n      setMinutesEarlyWoke(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\r\n      setQualityRating(e.target.value);\r\n    }\r\n  }\r\n  const curYear = (new Date()).getFullYear();\r\n  return(\r\n    <>\r\n      <Container \r\n        className={\r\n          `add-data add-data-container ${props.nightMode && 'add-data-container-night'}`\r\n        }\r\n      >\r\n        <h1 className=\"pt-2\">Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <div className=\"add-data-calendar-container\">\r\n          <Calendar\r\n            onChange={onChange}\r\n            value={value}\r\n            view={'month'}\r\n            onClickDay={(value, event) => {\r\n              setDate(value);\r\n              checkExistingData(value);\r\n            }}\r\n          />\r\n        </div>\r\n        {(date && props.loggedInUser) ?\r\n          <>\r\n            <h2>Adding data for {getClickedDate(date) === getClickedDate((new Date())) && 'today: '}<strong>{dateHeading}</strong>: </h2>\r\n            {checkExistingDataCompleted ?\r\n              <>\r\n                {(dateClickedYear < curYear || dateClickedYear > curYear) && \r\n                  <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (Â« or Â») at the top of the calendar to scroll between years.</Alert>\r\n                }\r\n                {existingDataAlert && \r\n                  <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\r\n                }\r\n                <Alert variant=\"primary\">Data from inputs asking about things that took place \"yesterday\" or \"last night\" will be dated on the graphs as {dateHeadingYesterday}.</Alert>\r\n                <Form className=\"add-data-form\">\r\n                  <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"nap-start-time\"\r\n                    type=\"time\" \r\n                    className={`add-data-form-time ${existingNapStart !== '' && \"existing-data\"}`}\r\n                    value={existingNapStart} \r\n                    placeholder={existingNapStart} \r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"nap-end-time\"\r\n                    className={existingNapEnd !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={existingNapEnd}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>2. Last night I took ___ mg/oz of ___ as a sleep aid. (If none, leave blank. Unit \"mg\" is for medicine, \"oz\" is for alcohol - but the unit doesn't need to be included in the input. Example: <span className=\"add-data-form-example\">5 Ambien</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"sleep-aid-item\"\r\n                    className={sleepAidItem !== '' && \"existing-data\"}\r\n                    type=\"text\" \r\n                    value={sleepAidItem}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"enter-bed-time\"\r\n                    className={enterBedTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={enterBedTime}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"lights-off-time\"\r\n                    className={lightsOffTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={lightsOffTime}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"time-to-fall-asleep\"\r\n                    className={timeToFallAsleep !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={timeToFallAsleep}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"number-times-arousal\"\r\n                    className={numberTimesArousal !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={numberTimesArousal}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately. You can simply list the arousals as numbers seperated by spaces) (Example for arousals of 25min, 40min, and 10min: <span className=\"add-data-form-example\">25 40 10</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"arousal-duration\"\r\n                    className={arousalDuration !== '' && \"existing-data\"}\r\n                    type=\"text\" \r\n                    value={arousalDuration}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"morning-wake-time\"\r\n                    className={morningWakeTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={morningWakeTime}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"exit-bed-time\"\r\n                    className={exitBedTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={exitBedTime}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"minutes-early-woke\"\r\n                    className={minutesEarlyWoke !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={minutesEarlyWoke}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>\r\n                    10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"quality-rating\"\r\n                    className={qualityRating !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={qualityRating}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                </Form>\r\n                {submittedMessage &&\r\n                  <>\r\n                    <Alert variant=\"success\" className=\"alert-bootstrap add-data-alert-submitted\">Your data has been submitted!</Alert>\r\n                    <Button as={Link} to='/sleep/' variant=\"info\" className=\"add-data-button-go-to-data-overview\">Go to Overview</Button>\r\n                    <a href=\"#top\" className=\"add-data-link-go-to-data-overview\">\r\n                      <Button variant=\"info\" className=\"add-data-button-go-to-data-overview\">Add More Data</Button>\r\n                    </a>\r\n                  </>\r\n                }\r\n                <Button className=\"add-data-submit-button\" onClick={handleDataSubmit}>Submit</Button>\r\n                <div className=\"spacer\"></div>\r\n              </>\r\n            : \r\n              <>\r\n                <Spinner variant=\"success\" animation=\"border\" role=\"status\" id=\"spinner-centered\" className=\"spinner-centered\"><span className=\"sr-only\">Loading...</span></Spinner>\r\n                <div className=\"add-data-spinner-padding-for-night-mode\"></div>\r\n              </>\r\n            }\r\n          </>\r\n          :\r\n          <>\r\n            <Alert variant=\"warning\">Please log in to add data.</Alert>\r\n            <div className=\"add-data-spacer-logged-out\"></div>\r\n          </>\r\n        }\r\n      </Container>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["112","113","114","115","116","117","118"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './NapTimesChart.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass NapTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  };\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'napTimes', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'napTimes', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'napTimes', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = false;\r\n      data = createData1(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'napStartTime', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              fixLabelOverlap={true}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryBar\r\n              style={{\r\n                data: {\r\n                  fill: this.props.nightMode ? 'rgb(255 0 113)' : 'rgb(129 33 255)', \r\n                  transition: `fill ${nightModeTransitionTime}`\r\n                },\r\n                labels: {\r\n                  fill: this.props.nightMode ? 'white' : 'black'\r\n                }\r\n              }}\r\n              data={data}\r\n              barWidth={() => {\r\n                let firstDate;\r\n                let lastDate;\r\n                let dateDiff;\r\n                if (data) {\r\n                  firstDate = data[data.length - 1].x; \r\n                  lastDate = data[0].x; \r\n                  dateDiff = lastDate - firstDate;\r\n                }\r\n                return(\r\n                  dateDiff < 10 ? 18\r\n                  : dateDiff < 20 ? 8\r\n                  : 4 \r\n                );\r\n              }}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              labels={({ datum }) => {\r\n                return(\r\n                  `${duration(new Date(datum._y0), new Date(datum._y))}\\n${datum.dateLabel}`\r\n                )}\r\n              }\r\n              \r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n          <h2 \r\n            className={\r\n              `charts-heading ${this.props.nightMode ?\r\n                'quality-rating-charts-heading-night'  \r\n                : 'quality-rating-charts-heading-day'\r\n              }`\r\n            }\r\n            title=\"The range of time from the beggining of your first nap to the end of your last nap.\"\r\n          >\r\n            Nap Times\r\n          </h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NapTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}\r\n\r\nNapTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["119","120","121","122","123","124","125","126"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './EnterBedTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryTooltip, VictoryScatter } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, nightModeTransitionTime, victoryAxisStyle, getLongDate,  VictoryScatterLineComplement, victoryLineStyle, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n//make it so graph updates when component loads\r\n\r\nclass EnterBedTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'enterBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'enterBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'enterBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      data = createData1(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n    }\r\n    c('data', data)\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n            <VictoryAxis\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"enter-bed-charts enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"This is the time that you entered your bed - you may not yet have turned the lights off.\">Time in Bed</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EnterBedTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nEnterBedTimesChart.propTypes = {\r\n  dates: PropTypes.array,\r\n  nightMode: PropTypes.bool, \r\n  loggedInUser: PropTypes.string\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["127","128","129","130","131"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './MorningWakeTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MorningWakeTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'morningWakeTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'morningWakeTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'morningWakeTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      data = createData1(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'exitBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Wake Up Time</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MorningWakeTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nMorningWakeTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["132","133","134","135","136","137","138"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryScatter } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, VictoryScatterLineComplement, victoryLineStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'lightsOffTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'lightsOffTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'lightsOffTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      data = createData1(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"The time you turned the lights off after getting in bed.\">Time Lights Off</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["139","140","141","142","143"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'exitBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'exitBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'exitBedTime', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      data = createData1(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode)}\r\n          </VictoryChart>\r\n        <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Time Out of Bed</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["144","145","146","147","148","149","150"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, victoryTooltipLabelStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass TimeToFallAsleepChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'timeToFallAsleep', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'timeToFallAsleep', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'timeToFallAsleep', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(0 168 255)' : '#00b6ba', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum){\r\n                    return(\r\n                      `${datum.timeLabel}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n              <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"How long it took you to fall asleep after turning the lights off.\">Time to Fall Asleep</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TimeToFallAsleepChart; \r\n\r\nTimeToFallAsleepChart.propTypes = {\r\n  dates: PropTypes.array,\r\n  nightMode: PropTypes.bool, \r\n  loggedInUser: PropTypes.string\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["151"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",["152","153"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["154","155","156"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport graphScreenshot1 from './images/graph-screenshot-enter-bed-time.png';\r\nimport graphScreenshot2 from './images/graph-screenshot-arousal-durations.png';\r\nimport graphScreenshot3 from './images/graph-screenshot-nap-times.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n        </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep Tight</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Create helpful graphs with simple inputs, for free.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img className=\"home-logged-out-section-2-image-2\" src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot3} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button as={Link} to={'/sleep/create-account'}>Create Account</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",["157","158"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MinutesEarlyWokeChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                fixLabelOverlap={true}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 52 0)' : 'rgb(186 0 177)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} min\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n             <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Minutes Early Awake</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MinutesEarlyWokeChart; \r\n\r\nMinutesEarlyWokeChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",["159","160","161","162","163"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip, VictoryStack } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass ArousalDurationChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'arousalDuration', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'arousalDuration', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'arousalDuration', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const chartInfoPrimer = this.state.chartInfo;\r\n    const chartInfo = chartInfoPrimer.slice(0).reverse();\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data = [];\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = false;\r\n      data = createData1(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'arousalDuration', showYesterdaysDate, barGraph);\r\n    }\r\n\r\n    const maxNumberArousals = Math.max(...data.map(x => x.length));\r\n    const arousals = [];\r\n    const bars = [];\r\n    //A SEPERATE ARRAY IS CREATED FOR EACH AROUSAL: THE FIRST, SECOND, ETC., ALL THE WAY UNTIL THE MAX NUMBER OF AROUSALS FOR THE GIVEN DATA SET\r\n    for (let i = 0; i < maxNumberArousals; i++){\r\n      arousals.push([]);\r\n    }\r\n    data.forEach((x, i) => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        if (x[i]){\r\n          arousals[i].push(x[i]);\r\n        }\r\n      }\r\n    })\r\n    let firstDate;\r\n    let lastDate;\r\n    if (arousals[0]) {\r\n      firstDate = arousals[0][0].x;\r\n      lastDate = arousals[0][arousals[0].length - 1].x;\r\n    }\r\n\r\n    const createBars = () => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        bars.push(\r\n          <VictoryBar\r\n            style={{\r\n              labels: {\r\n                fill: this.props.nightMode ? 'white' : 'black'\r\n              }\r\n            }}\r\n            key={i}\r\n            data={arousals[i]}\r\n            barWidth={() => {\r\n              let dateDiff;\r\n              if (data) {\r\n                dateDiff = lastDate - firstDate;\r\n              }\r\n              return(\r\n                dateDiff < 10 ? 18\r\n                : dateDiff < 20 ? 8\r\n                : 4 \r\n              );\r\n            }}\r\n            labels={({ datum }) => {\r\n              return(`${datum.y} min\\n${datum.dateLabel}`);\r\n            }}\r\n            labelComponent={\r\n              <VictoryTooltip\r\n                flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n              />\r\n            }\r\n          />\r\n        )\r\n      }\r\n    }\r\n    createBars();\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryStack\r\n                colorScale={\r\n                  this.props.nightMode ? \r\n                  ['rgb(67 0 255)', \r\n                  'rgb(244 0 255)', \r\n                  'rgb(8 190 0)', \r\n                  'rgb(255 217 0)', \r\n                  'red']\r\n                  : \r\n                  ['rgb(126 81 255)', \r\n                  'rgb(244 0 255)', \r\n                  'rgb(8 190 0)', \r\n                  'rgb(255 134 0)', \r\n                  'red']\r\n                }\r\n              >\r\n                {[...bars]}\r\n              </VictoryStack>\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"The amounts of time you were awake last night. Each colored bar represents a seperate time waking up.\"\r\n            >\r\n              Arousal Durations\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ArousalDurationChart; \r\n\r\nArousalDurationChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",["164","165","166","167","168"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass QualityRatingChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'qualityRating', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'qualityRating', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'qualityRating', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y}`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(173 31 255)' : 'rgb(37 39 255)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} out of 5\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"A rating out of 5 of how well you slept last night.\"\r\n            >\r\n              Sleep Quality Rating\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QualityRatingChart; \r\n\r\nQualityRatingChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",["169","170","171","172","173","174"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass SleepAidItemChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'sleepAidItem', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'sleepAidItem', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'sleepAidItem', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = false;\r\n      data = createData1(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'sleepAidItem', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} mg/oz`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 0 207)' : 'rgb(49 0 186)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum.sleepAidItem){\r\n                    const sleepAidItem = datum.sleepAidItem.toLowerCase();\r\n                    return(\r\n                      `${datum.y}${sleepAidItem === 'alcohol' ? 'oz' : 'mg'} ${datum.sleepAidItem}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"The item and amount of sleep aid you took last night.\"\r\n            >\r\n              Sleep Aid Item\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SleepAidItemChart; \r\n\r\nSleepAidItemChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js",[],["175","176"],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":16,"column":36,"nodeType":"183","messageId":"184","endLine":16,"endColumn":39},{"ruleId":"181","severity":1,"message":"185","line":16,"column":41,"nodeType":"183","messageId":"184","endLine":16,"endColumn":44},{"ruleId":"181","severity":1,"message":"186","line":27,"column":9,"nodeType":"183","messageId":"184","endLine":27,"endColumn":17},{"ruleId":"181","severity":1,"message":"187","line":50,"column":9,"nodeType":"183","messageId":"184","endLine":50,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":313,"column":13,"nodeType":"190","endLine":313,"endColumn":68},{"ruleId":"181","severity":1,"message":"191","line":8,"column":9,"nodeType":"183","messageId":"184","endLine":8,"endColumn":10},{"ruleId":"192","severity":1,"message":"193","line":40,"column":6,"nodeType":"194","endLine":40,"endColumn":13,"suggestions":"195"},{"ruleId":"181","severity":1,"message":"196","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"197","line":6,"column":8,"nodeType":"183","messageId":"184","endLine":6,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":7,"column":14,"nodeType":"183","messageId":"184","endLine":7,"endColumn":15},{"ruleId":"181","severity":1,"message":"198","line":7,"column":78,"nodeType":"183","messageId":"184","endLine":7,"endColumn":89},{"ruleId":"181","severity":1,"message":"199","line":7,"column":91,"nodeType":"183","messageId":"184","endLine":7,"endColumn":105},{"ruleId":"181","severity":1,"message":"200","line":7,"column":107,"nodeType":"183","messageId":"184","endLine":7,"endColumn":132},{"ruleId":"201","severity":1,"message":"202","line":65,"column":15,"nodeType":"203","endLine":65,"endColumn":66},{"ruleId":"181","severity":1,"message":"196","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"204","line":4,"column":78,"nodeType":"183","messageId":"184","endLine":4,"endColumn":92},{"ruleId":"181","severity":1,"message":"205","line":4,"column":94,"nodeType":"183","messageId":"184","endLine":4,"endColumn":108},{"ruleId":"181","severity":1,"message":"197","line":6,"column":8,"nodeType":"183","messageId":"184","endLine":6,"endColumn":13},{"ruleId":"181","severity":1,"message":"206","line":7,"column":17,"nodeType":"183","messageId":"184","endLine":7,"endColumn":40},{"ruleId":"181","severity":1,"message":"198","line":7,"column":60,"nodeType":"183","messageId":"184","endLine":7,"endColumn":71},{"ruleId":"181","severity":1,"message":"199","line":7,"column":122,"nodeType":"183","messageId":"184","endLine":7,"endColumn":136},{"ruleId":"181","severity":1,"message":"200","line":7,"column":138,"nodeType":"183","messageId":"184","endLine":7,"endColumn":163},{"ruleId":"181","severity":1,"message":"196","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"197","line":6,"column":8,"nodeType":"183","messageId":"184","endLine":6,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":7,"column":14,"nodeType":"183","messageId":"184","endLine":7,"endColumn":15},{"ruleId":"181","severity":1,"message":"198","line":7,"column":17,"nodeType":"183","messageId":"184","endLine":7,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":64,"column":15,"nodeType":"203","endLine":64,"endColumn":66},{"ruleId":"181","severity":1,"message":"196","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"205","line":3,"column":78,"nodeType":"183","messageId":"184","endLine":3,"endColumn":92},{"ruleId":"181","severity":1,"message":"197","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":6,"column":14,"nodeType":"183","messageId":"184","endLine":6,"endColumn":15},{"ruleId":"181","severity":1,"message":"198","line":6,"column":83,"nodeType":"183","messageId":"184","endLine":6,"endColumn":94},{"ruleId":"181","severity":1,"message":"199","line":6,"column":96,"nodeType":"183","messageId":"184","endLine":6,"endColumn":110},{"ruleId":"181","severity":1,"message":"200","line":6,"column":112,"nodeType":"183","messageId":"184","endLine":6,"endColumn":137},{"ruleId":"181","severity":1,"message":"196","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"197","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":6,"column":14,"nodeType":"183","messageId":"184","endLine":6,"endColumn":15},{"ruleId":"181","severity":1,"message":"198","line":6,"column":17,"nodeType":"183","messageId":"184","endLine":6,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":63,"column":15,"nodeType":"203","endLine":63,"endColumn":66},{"ruleId":"181","severity":1,"message":"197","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":5,"column":14,"nodeType":"183","messageId":"184","endLine":5,"endColumn":15},{"ruleId":"181","severity":1,"message":"207","line":5,"column":78,"nodeType":"183","messageId":"184","endLine":5,"endColumn":102},{"ruleId":"181","severity":1,"message":"198","line":5,"column":104,"nodeType":"183","messageId":"184","endLine":5,"endColumn":115},{"ruleId":"181","severity":1,"message":"199","line":5,"column":117,"nodeType":"183","messageId":"184","endLine":5,"endColumn":131},{"ruleId":"181","severity":1,"message":"200","line":5,"column":133,"nodeType":"183","messageId":"184","endLine":5,"endColumn":158},{"ruleId":"201","severity":1,"message":"202","line":63,"column":17,"nodeType":"203","endLine":63,"endColumn":68},{"ruleId":"181","severity":1,"message":"208","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"177","replacedBy":"209"},{"ruleId":"179","replacedBy":"210"},{"ruleId":"188","severity":1,"message":"189","line":36,"column":13,"nodeType":"190","endLine":36,"endColumn":43},{"ruleId":"188","severity":1,"message":"189","line":37,"column":13,"nodeType":"190","endLine":37,"endColumn":89},{"ruleId":"188","severity":1,"message":"189","line":48,"column":13,"nodeType":"190","endLine":48,"endColumn":43},{"ruleId":"181","severity":1,"message":"191","line":4,"column":14,"nodeType":"183","messageId":"184","endLine":4,"endColumn":15},{"ruleId":"201","severity":1,"message":"202","line":63,"column":17,"nodeType":"203","endLine":63,"endColumn":68},{"ruleId":"181","severity":1,"message":"197","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":5,"column":14,"nodeType":"183","messageId":"184","endLine":5,"endColumn":15},{"ruleId":"181","severity":1,"message":"198","line":5,"column":53,"nodeType":"183","messageId":"184","endLine":5,"endColumn":64},{"ruleId":"181","severity":1,"message":"199","line":5,"column":66,"nodeType":"183","messageId":"184","endLine":5,"endColumn":80},{"ruleId":"181","severity":1,"message":"200","line":5,"column":82,"nodeType":"183","messageId":"184","endLine":5,"endColumn":107},{"ruleId":"181","severity":1,"message":"197","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":5,"column":14,"nodeType":"183","messageId":"184","endLine":5,"endColumn":15},{"ruleId":"181","severity":1,"message":"199","line":5,"column":78,"nodeType":"183","messageId":"184","endLine":5,"endColumn":92},{"ruleId":"181","severity":1,"message":"200","line":5,"column":94,"nodeType":"183","messageId":"184","endLine":5,"endColumn":119},{"ruleId":"201","severity":1,"message":"202","line":64,"column":17,"nodeType":"203","endLine":64,"endColumn":68},{"ruleId":"181","severity":1,"message":"197","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"181","severity":1,"message":"191","line":5,"column":14,"nodeType":"183","messageId":"184","endLine":5,"endColumn":15},{"ruleId":"181","severity":1,"message":"198","line":5,"column":78,"nodeType":"183","messageId":"184","endLine":5,"endColumn":89},{"ruleId":"181","severity":1,"message":"199","line":5,"column":91,"nodeType":"183","messageId":"184","endLine":5,"endColumn":105},{"ruleId":"181","severity":1,"message":"200","line":5,"column":107,"nodeType":"183","messageId":"184","endLine":5,"endColumn":132},{"ruleId":"201","severity":1,"message":"202","line":63,"column":17,"nodeType":"203","endLine":63,"endColumn":68},{"ruleId":"177","replacedBy":"211"},{"ruleId":"179","replacedBy":"212"},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'c' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["215"],"'Container' is defined but never used.","'axios' is defined but never used.","'getLongDate' is defined but never used.","'yesterdaysDate' is defined but never used.","'yesterdaysDateLabelPrimer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'nightModeTransitionTime' is defined but never used.","'victoryTooltipLabelStyle' is defined but never used.","'shootingStar' is defined but never used.",["213"],["214"],["213"],["214"],"no-global-assign","no-unsafe-negation",{"desc":"216","fix":"217"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"218","text":"219"},[1865,1872],"[checkExistingData, props]"]