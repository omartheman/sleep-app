[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\GraphTest.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"7"},{"size":661,"mtime":1609548489364,"results":"8","hashOfConfig":"9"},{"size":6598,"mtime":1609548489349,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3625,"mtime":1609548489356,"results":"12","hashOfConfig":"9"},{"size":1275,"mtime":1609548655128,"results":"13","hashOfConfig":"9"},{"size":4993,"mtime":1609548489359,"results":"14","hashOfConfig":"9"},{"size":86,"mtime":1609548489362,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"asvjz",{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["34","35","36","37","38","39"],"import './App.css';\r\nimport GraphTest from './GraphTest';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst url = 'http://localhost:4000/sleep/api/upload-data';\r\nconst urlGetData = 'http://localhost:4000/sleep/api/get-data';\r\n\r\nfunction App() {\r\n  const [napStartTimes, setNapStartTimes] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [napInfo, setNapInfo] = useState([]);\r\n  useEffect(() => {\r\n    axios.post(urlGetData, {username: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      res.data.map(x => {\r\n        setNapStartTimes(prev => [...prev, x.napStartTime]);\r\n        setDates(prev => [...prev, x.date]);\r\n        setNapInfo(prev => [...prev, {\r\n          date: x.date, \r\n          napStartTime: x.napStartTime,\r\n          napEndTime: x.napEndTime\r\n        }])\r\n      })\r\n    })\r\n  }, [])\r\n  useEffect(() => {\r\n    console.log('napStartTimes', napStartTimes)\r\n    console.log('dates', dates)\r\n  })\r\n  return (\r\n    <div className=\"App\">\r\n      <GraphTest\r\n        napStartTimes={napStartTimes}\r\n        dates={dates}\r\n        napInfo={napInfo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["40","41"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\GraphTest.js",["42","43"],"import React, {Component} from 'react';\r\nimport './GraphTest.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\r\n\r\nclass GraphTest extends React.Component {\r\n  render() {\r\n    const {dates, napStartTimes, napInfo} = this.props;\r\n    const dateLabels = dates.map((x, i) => {\r\n      const date = new Date(Date.parse(x));\r\n      return(\r\n        `${date.getMonth()+1}/${date.getDate()}`\r\n      )\r\n    });\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (napInfo.length > 1) {\r\n      data = napInfo.map((e, i) => {\r\n        c('napstarttime', e.napStartTime)\r\n        c('datetime', new Date(`January 1, 2000 ${e.napStartTime}`))\r\n        c('napend', e.napEndTime)\r\n        const dateTime = new Date(`January 1, 2000 ${e.napStartTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const time = e.napStartTime.split(':');\r\n        const timeNumber = Number(time[0]) + Number(time[1]/60);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        return(\r\n          { x: date, y0: dateTime, y: dateTimeEnd }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Nap Times</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              // tickValues specifies both the number of ticks and where\r\n              // they are placed on the axis\r\n              // tickValues={[1, 2, 3, 4, 5]}\r\n              tickValues={xAxisTickValues}\r\n              // tickFormat={[\"1 Jan\", \"2 Jan\", \"3 Jan\", \"Quarter 4\"]}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '20'}}}\r\n              dependentAxis\r\n              // tickFormat specifies how ticks should be displayed\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              // tickFormat={(y) => {\r\n              //   return(\r\n              //     `${y-y%1}:${Math.round(y%1*10)/10*60}PM`\r\n              //   );\r\n              // }}\r\n            />\r\n            <VictoryBar\r\n              data={data}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              style={{ data: {fill: '#964c9d'} }}\r\n              labels={({ datum }) => {\r\n                return(duration(new Date(datum._y0), new Date(datum._y)))}\r\n              }\r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  // centerOffset={{ y: 45 }}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GraphTest; \r\n\r\nfunction c (msg, input) {return(console.log(`${msg}: `, input))};\r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  c('start',start);\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["44"],"import { useState, useEffect } from 'react';\r\nimport { Button, Container, Form } from 'react-bootstrap';\r\nimport Calendar from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport c from './global_items';\r\n\r\nconst url = 'http://localhost:4000/sleep/api/upload-data';\r\n\r\nfunction AddData () {\r\n  const [value, onChange] = useState(new Date());\r\n  const handleDataSubmit = () => {\r\n    console.log('datadata')\r\n    axios.post(url, {test: 'testvalue'})\r\n  }\r\n  return(\r\n    <>\r\n      <Container>\r\n        <h1>Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <h2>Test</h2>\r\n        <Calendar\r\n          onChange={onChange}\r\n          value={value}\r\n          onClickDay={(value, event) => {\r\n            console.log('New date is: ', value)\r\n            c('valueonly', value);\r\n          }}\r\n        />\r\n        <Form className=\"add-data-form\">\r\n          <Form.Label>Nap Start Time</Form.Label>\r\n          <Form.Control type=\"time\"></Form.Control>\r\n          <Form.Label>Nap End Time</Form.Label>\r\n          <Form.Control type=\"time\"></Form.Control>\r\n        </Form>\r\n        <Button onClick={handleDataSubmit}>Submit</Button>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],{"ruleId":"45","severity":1,"message":"46","line":21,"column":10,"nodeType":"47","messageId":"48","endLine":21,"endColumn":23},{"ruleId":"49","severity":1,"message":"50","line":28,"column":22,"nodeType":"51","messageId":"52","endLine":28,"endColumn":24},{"ruleId":"45","severity":1,"message":"53","line":43,"column":10,"nodeType":"47","messageId":"48","endLine":43,"endColumn":20},{"ruleId":"45","severity":1,"message":"54","line":43,"column":22,"nodeType":"47","messageId":"48","endLine":43,"endColumn":35},{"ruleId":"45","severity":1,"message":"55","line":52,"column":9,"nodeType":"47","messageId":"48","endLine":52,"endColumn":22},{"ruleId":"45","severity":1,"message":"56","line":70,"column":9,"nodeType":"47","messageId":"48","endLine":70,"endColumn":30},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"45","severity":1,"message":"61","line":1,"column":16,"nodeType":"47","messageId":"48","endLine":1,"endColumn":25},{"ruleId":"45","severity":1,"message":"62","line":21,"column":15,"nodeType":"47","messageId":"48","endLine":21,"endColumn":19},{"ruleId":"45","severity":1,"message":"63","line":1,"column":20,"nodeType":"47","messageId":"48","endLine":1,"endColumn":29},"no-unused-vars","'napStartTimes' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'intervalId' is assigned a value but never used.","'setIntervalId' is assigned a value but never used.","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"'Component' is defined but never used.","'time' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]