[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut_SVG.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\shootingStarTest.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"16"},{"size":661,"mtime":1609548489364,"results":"17","hashOfConfig":"18"},{"size":7112,"mtime":1610000354271,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":14050,"mtime":1609908607513,"results":"21","hashOfConfig":"18"},{"size":5099,"mtime":1609990751599,"results":"22","hashOfConfig":"18"},{"size":1034,"mtime":1609992360864,"results":"23","hashOfConfig":"18"},{"size":4783,"mtime":1609977456589,"results":"24","hashOfConfig":"18"},{"size":3464,"mtime":1609967420737,"results":"25","hashOfConfig":"18"},{"size":2865,"mtime":1609967315620,"results":"26","hashOfConfig":"18"},{"size":2820,"mtime":1609967281124,"results":"27","hashOfConfig":"18"},{"size":2863,"mtime":1609967244814,"results":"28","hashOfConfig":"18"},{"size":3852,"mtime":1609977734336,"results":"29","hashOfConfig":"18"},{"size":2071,"mtime":1610073418963,"results":"30","hashOfConfig":"18"},{"size":3901,"mtime":1609993026994,"results":"31","hashOfConfig":"18"},{"size":419,"mtime":1610000096983,"results":"32","hashOfConfig":"18"},{"size":550,"mtime":1610000416862,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"asvjz",{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"36"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["76","77"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["78","79","80"],"import './App.css';\r\nimport NapTimesChart from './NapTimesChart';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport NavbarContainer from './NavbarContainer';\r\nimport AddData from './AddData';\r\nimport './App.css';\r\nimport './App.scss';\r\nimport React from 'react';\r\nimport {Switch, Route} from 'react-router';\r\nimport {url, c} from './global_items';\r\nimport EnterBedTimesChart from './EnterBedTimesChart';\r\nimport MorningWakeTimesChart from './MorningWakeTimesChart';\r\nimport LightsOffTimesChart from './LightsOffTimesChart';\r\nimport ExitBedTimesChart from './ExitBedTimesChart';\r\nimport { Container } from 'react-bootstrap';\r\nimport TimeToFallAsleepChart from './TimeToFallAsleepChart';\r\nimport HomeLoggedOut from './HomeLoggedOut';\r\nimport ShootingStarTest from './ShootingStarTest';\r\n\r\nimport backgroundTop from './landing-background-opt.svg';\r\n\r\nconst urlAuth = `${url}auth`;\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loggedInUser, setLoggedInUser] = useState(null);\r\n  const [loggedInUserError, setLoggedinUserError] = useState(null);\r\n  // const [intervalId, setIntervalId] = useState(null);\r\n  useEffect(() => {\r\n    axios.get(urlAuth) \r\n    .then(res => { \r\n      setLoggedInUser(res.data);\r\n    }).catch(error => {console.log(error)})\r\n    // const intervalId = setInterval(checkLoggedIn, 2000);\r\n    // setIntervalId(intervalId);\r\n  }, [])\r\n  \r\n  const checkLoggedIn = () => {\r\n    axios.get(urlAuth) \r\n    .then(res => { \r\n      console.log('loggedInUser: ', res.data);\r\n      setLoggedInUser(res.data);\r\n    }).catch(error => {\r\n      console.log(error)\r\n      console.log('Axios error. User logged out.')\r\n      if (loggedInUserError === false) {\r\n        console.log('Axios error. User logged out.')\r\n        if (url !== 'http://localhost:4000/recipeapp/recipeapp-server/'){\r\n          alert(\"There was an error with the server. ðŸ¤¬ Alert the Webmaster!\");\r\n        }\r\n        setLoggedinUserError(true);\r\n      }\r\n      setLoggedInUser(null);\r\n    })\r\n  }\r\n  const handleNewLoggedInUser = (newLoggedInUser) => {\r\n    console.log('new logged in user: ',newLoggedInUser)\r\n    setLoggedInUser(newLoggedInUser);\r\n  }\r\n  const handleLoginSubmit = (e) => {\r\n    console.log('login clicked')\r\n    e.preventDefault();\r\n    console.log('error not here')\r\n    axios.post(urlAuth,     \r\n      {\r\n        username: username, \r\n        password: password \r\n      }\r\n    )\r\n    .then(response => {\r\n      console.log('axios response: ', response)\r\n    }).catch(error => {console.log(error)})\r\n    .then( \r\n      axios.get(urlAuth) \r\n      .then(res => { \r\n        console.log(res);\r\n        setLoggedInUser(res.data);\r\n      }).catch(error => {console.log('Axios error from urlAuth: ', error)})\r\n    )\r\n  }\r\n  const handleLoginFormChange = (eTargetAttrVal, item) => {\r\n    console.log('loginformchage')\r\n    if (item === 'username'){\r\n      setUsername(eTargetAttrVal);\r\n    } else if (item === 'password') {\r\n      setPassword(eTargetAttrVal);\r\n    }\r\n  }\r\n  const handleLogout = () => {\r\n    setLoggedInUser(null);\r\n  }\r\n  const navbar = \r\n    <NavbarContainer\r\n      loginSubmit={handleLoginSubmit}\r\n      onLoginFormChange={handleLoginFormChange}\r\n      loggedInUser={loggedInUser}\r\n      onLogout={handleLogout}\r\n      username={username}\r\n      password={password}\r\n    />\r\n  ;\r\n  return(\r\n    <Switch>\r\n      <Route path=\"/sleep/shooting-star-test\" render={() => (\r\n        <>\r\n          <ShootingStarTest/>\r\n        </>\r\n      )} />\r\n      <Route path=\"/sleep/home-logged-out\" render={() => (\r\n        <>\r\n          \r\n          <div className=\"home-logged-out-section-1-background\"\r\n          style={{backgroundImage: `url(${backgroundTop})`}}\r\n          ></div>\r\n          {navbar}\r\n          <HomeLoggedOut />\r\n        </>\r\n      )} />\r\n      <Route path=\"/sleep/add-data\" render={() => (\r\n        <>\r\n          {navbar}\r\n          <AddData\r\n            loggedInUser={loggedInUser}\r\n            onLogout={handleLogout}\r\n          />\r\n        </>\r\n      )} />\r\n      <Route path=\"/sleep\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <Home\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n          <Container>\r\n            <TimeToFallAsleepChart />\r\n            <ExitBedTimesChart />\r\n            <LightsOffTimesChart />\r\n            <MorningWakeTimesChart />\r\n            <EnterBedTimesChart />\r\n            <NapTimesChart\r\n              loggedInUser={loggedInUser}\r\n            />\r\n          </Container>\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/create-account-success\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <CreateAccountSuccess\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/recipe-upload-success\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <RecipeUploadSuccess\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/recipe/:recipeId\" render={(props) => (\r\n        <>\r\n          {navbar}\r\n          {/* <RecipePage\r\n            {...props}\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/all-recipes\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <AllRecipes\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/myrecipes\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <MyRecipes\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/recipe-upload\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <RecipeUpload\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/login\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <Login \r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n            onLoginFormChange={this.handleLoginFormChange}\r\n            loginSubmit={this.handleLoginSubmit}\r\n            username={username}\r\n            password={password}\r\n          /> */}\r\n        </>\r\n      )} />\r\n      <Route path=\"/recipeapp/create-account\" render={() => (\r\n        <>\r\n          {navbar}\r\n          {/* <CreateAccount\r\n            loggedInUser={loggedInUser}\r\n            onLogout={this.handleLogout}\r\n            onLoginFormChange={this.handleLoginFormChange}\r\n            setNewLoggedInUser={this.handleNewLoggedInUser}\r\n          /> */}\r\n        </>\r\n      )} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default App;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["81"],"import { useState, useEffect } from 'react';\r\nimport { Alert, Button, Container, Form } from 'react-bootstrap';\r\nimport { Calendar } from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport {c, getClickedDate, url} from './global_items';\r\n\r\nconst urlCheckExistingData = `${url}check-existing-data`;\r\nconst urlUploadData = `${url}upload-data`;\r\n\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction AddData (props) {\r\n  const [value, onChange] = useState(new Date());\r\n  const [date, setDate] = useState(null);\r\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\r\n  const [existingNapStart, setExistingNapStart] = useState('');\r\n  const [existingNapEnd, setExistingNapEnd] = useState('');\r\n  const [sleepAidItem, setSleepAidItem] = useState('');\r\n  const [sleepAidMg, setSleepAidMg] = useState('');\r\n  const [enterBedTime, setEnterBedTime] = useState('');\r\n  const [lightsOffTime, setLightsOffTime] = useState('');\r\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\r\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\r\n  const [arousalDuration, setArousalDuration] = useState('');\r\n  const [morningWakeTime, setMorningWakeTime] = useState('');\r\n  const [exitBedTime, setExitBedTime] = useState('');\r\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\r\n  const [qualityRating, setQualityRating] = useState('');\r\n  const [clickedDate, setClickedDate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let d = new Date();\r\n    setDate(d);\r\n    checkExistingData(d);\r\n  }, []);\r\n\r\n  const checkExistingData = (clickedDate) => {\r\n    c('running checkexisitn', clickedDate)\r\n    axios.post(urlCheckExistingData, {\r\n      clickedDate: getClickedDate(clickedDate, 'mysql'),\r\n      user: props.loggedInUser\r\n    })\r\n    .then(res => {\r\n      setClickedDate(getClickedDate(clickedDate, 'mysql'));\r\n      c('axios postin')\r\n      c('res',res)\r\n      if (res.data.length > 0){\r\n\r\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\r\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napEndTime : '');\r\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\r\n        setSleepAidMg(res.data[0].sleepAidMg ? res.data[0].sleepAidMg : '');\r\n        setEnterBedTime(res.data[0].enterBedTime ? res.data[0].enterBedTime : '');\r\n        setLightsOffTime(res.data[0].lightsOffTime ? res.data[0].lightsOffTime : '');\r\n        setTimeToFallAsleep(res.data[0].timeToFallAsleep ? res.data[0].timeToFallAsleep : '');\r\n        setNumberTimesArousal(res.data[0].numberTimesArousal ? res.data[0].numberTimesArousal : '');\r\n        setArousalDuration(res.data[0].arousalDuration ? res.data[0].arousalDuration : '');\r\n        setMorningWakeTime(res.data[0].morningWakeTime ? res.data[0].morningWakeTime : '');\r\n        setExitBedTime(res.data[0].exitBedTime ? res.data[0].exitBedTime : '');\r\n        setMinutesEarlyWoke(res.data[0].minutesEarlyWoke ? res.data[0].minutesEarlyWoke : '');\r\n        setQualityRating(res.data[0].qualityRating ? res.data[0].qualityRating : '');\r\n\r\n        setExistingDataAlert(true);\r\n      } else {\r\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\r\n        for (let i = 0; i < dataFuncs.length; i++){\r\n          dataFuncs[i]('');\r\n        }\r\n        setExistingDataAlert(false);\r\n      }\r\n    })\r\n  } \r\n  const handleDataSubmit = () => {\r\n    c('clickedDate', clickedDate)\r\n    axios.post(urlUploadData, {\r\n      //Ternarys were set to not give a value for SQL when there is none. Helps with creating graphs to skip data.\r\n      user: props.loggedInUser,\r\n      date: clickedDate === '' ? null : clickedDate,\r\n      napStartTime: existingNapStart === '' ? null : existingNapStart,\r\n      napEndTime: existingNapEnd === '' ? null : existingNapEnd,\r\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\r\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\r\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\r\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\r\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\r\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\r\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\r\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\r\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\r\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\r\n      qualityRating: qualityRating === '' ? null : qualityRating\r\n    })\r\n  };\r\n  let dateHeading;\r\n  let dateClickedYear;\r\n  if (date){\r\n    dateHeading = getClickedDate(date);\r\n    dateClickedYear = date.getFullYear();\r\n  }\r\n  const handleFormInput = (e) => {\r\n    c('e id', e.target.getAttribute('id_val'));\r\n    c('existnap value', e.target.value);\r\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\r\n      setExistingNapStart(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\r\n      setExistingNapEnd(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\r\n      setSleepAidItem(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\r\n      setSleepAidMg(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\r\n      setEnterBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\r\n      setLightsOffTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\r\n      setTimeToFallAsleep(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\r\n      setNumberTimesArousal(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\r\n      setArousalDuration(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\r\n      setMorningWakeTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\r\n      setExitBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\r\n      setMinutesEarlyWoke(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\r\n      setQualityRating(e.target.value);\r\n    }\r\n  }\r\n  const curYear = (new Date()).getFullYear();\r\n  return(\r\n    <>\r\n      <Container className=\"add-data\">\r\n        <h1>Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <Calendar\r\n          onChange={onChange}\r\n          value={value}\r\n          view={'month'}\r\n          onClickDay={(value, event) => {\r\n            // console.log('New date is: ', value)\r\n            // c('valueonly', value);\r\n            setDate(value);\r\n            c('date value', value)\r\n            checkExistingData(value);\r\n          }}\r\n        />\r\n        {date && \r\n          <>\r\n            <h2>Adding data for {getClickedDate(date) === getClickedDate((new Date())) && 'today: '}<strong>{dateHeading}</strong>: </h2>\r\n            {(dateClickedYear < curYear || dateClickedYear > curYear) && \r\n              <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (Â« or Â») at the top of the calendar to scroll between years.</Alert>\r\n            }\r\n            {existingDataAlert && \r\n              <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\r\n            }\r\n            <Form className=\"add-data-form\">\r\n              <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"nap-start-time\"\r\n                type=\"time\" \r\n                className={existingNapStart !== '' && \"existing-data\"}\r\n                value={existingNapStart} \r\n                placeholder={existingNapStart} \r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"nap-end-time\"\r\n                className={existingNapEnd !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={existingNapEnd}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>2a. Last night I took ___ as a sleep aid. (Example: <span className=\"add-data-form-example\">Ambien</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"sleep-aid-item\"\r\n                className={sleepAidItem !== '' && \"existing-data\"}\r\n                type=\"text\" \r\n                value={sleepAidItem}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>2b. The amount of sleep aid I took last night was ___ mg/ounces (mg for medication / ounces for alcohol). (Example: <span className=\"add-data-form-example\">5</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"sleep-aid-mg\"\r\n                className={sleepAidMg !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={sleepAidMg}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"enter-bed-time\"\r\n                className={enterBedTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={enterBedTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"lights-off-time\"\r\n                className={lightsOffTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={lightsOffTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"time-to-fall-asleep\"\r\n                className={timeToFallAsleep !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={timeToFallAsleep}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"number-times-arousal\"\r\n                className={numberTimesArousal !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={numberTimesArousal}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately.) (Example: <span className=\"add-data-form-example\">25 min, 40 min, 10 min</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"arousal-duration\"\r\n                className={arousalDuration !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={arousalDuration}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"morning-wake-time\"\r\n                className={morningWakeTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={morningWakeTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"exit-bed-time\"\r\n                className={exitBedTime !== '' && \"existing-data\"}\r\n                type=\"time\" \r\n                value={exitBedTime}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"minutes-early-woke\"\r\n                className={minutesEarlyWoke !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={minutesEarlyWoke}\r\n                onChange={handleFormInput}\r\n              />\r\n              <Form.Label>\r\n                10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\r\n              <Form.Control \r\n                id_val=\"quality-rating\"\r\n                className={qualityRating !== '' && \"existing-data\"}\r\n                type=\"number\" \r\n                value={qualityRating}\r\n                onChange={handleFormInput}\r\n              />\r\n            </Form>\r\n            <Button onClick={handleDataSubmit}>Submit</Button>\r\n          </>\r\n        }\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["82","83"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './NapTimesChart.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass NapTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  };\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n        let newNapInfo = [];\r\n        res.data.map(x => {\r\n          newNapInfo = [...newNapInfo, {\r\n            date: x.date, \r\n            napStartTime: x.napStartTime,\r\n            napEndTime: x.napEndTime\r\n          }]\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newNapInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.napStartTime).map((e, i, arr) => {\r\n        const dateTime = new Date(`January 1, 2000 ${e.napStartTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        return(\r\n          { x: date, y0: dateTime, y: dateTimeEnd }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Nap Times</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryBar\r\n              data={data}\r\n              barWidth={() => {\r\n                let firstDate;\r\n                let lastDate;\r\n                let dateDiff;\r\n                if (data) {\r\n                  firstDate = data[0].barWidthDate; \r\n                  lastDate = data[data.length - 1].barWidthDate; \r\n                  dateDiff = lastDate - firstDate;\r\n                }\r\n                return(\r\n                  dateDiff < 10 ? 18\r\n                  : dateDiff < 20 ? 8\r\n                  : 4 \r\n                );\r\n              }}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              style={{ data: {fill: '#964c9d'} }}\r\n              labels={({ datum }) => {\r\n                return(duration(new Date(datum._y0), new Date(datum._y)))}\r\n              }\r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  // centerOffset={{ y: 45 }}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NapTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}\r\n\r\nNapTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["84","85","86","87"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './EnterBedTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n//make it so graph updates when component loads\r\n\r\nclass EnterBedTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          enterBedTime: x.enterBedTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.enterBedTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.enterBedTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Time I Got in Bed</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              // tickValues specifies both the number of ticks and where\r\n              // they are placed on the axis\r\n              // tickValues={[1, 2, 3, 4, 5]}\r\n              tickValues={xAxisTickValues}\r\n              // tickFormat={[\"1 Jan\", \"2 Jan\", \"3 Jan\", \"Quarter 4\"]}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              // tickFormat specifies how ticks should be displayed\r\n              // tickFormat={(y) => {\r\n              //   return(\r\n              //     `${y-y%1}:${Math.round(y%1*10)/10*60}PM`\r\n              //   );\r\n              // }}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EnterBedTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nEnterBedTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["88","89"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './MorningWakeTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MorningWakeTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          morningWakeTime: x.morningWakeTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.morningWakeTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.morningWakeTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Wake Up Times</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MorningWakeTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nMorningWakeTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["90","91"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          lightsOffTime: x.lightsOffTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.lightsOffTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.lightsOffTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <h2>Time Lights Turned Off</h2>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["92","93","94"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          exitBedTime: x.exitBedTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.exitBedTime).map((e, i) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const dateTime = new Date(`January 1, 2000 ${e.exitBedTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n        return(\r\n          { x: date, y: dateTime }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <h2>Time Out of Bed</h2>\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'time'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => formatAMPM(y)}\r\n              />\r\n              <VictoryLine\r\n                data={data}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["95","96"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass TimeToFallAsleepChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: 'omar'})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          timeToFallAsleep: x.timeToFallAsleep\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.timeToFallAsleep).map((e, i, arr) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        return(\r\n          { x: date, y: e.timeToFallAsleep}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <h2>How Long To Fall Asleep</h2>\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} min`)\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TimeToFallAsleepChart; \r\n\r\nTimeToFallAsleepChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["97","98","99","100","101","102"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut_SVG.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\shootingStarTest.js",["103","104"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["105"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":11,"column":14,"nodeType":"112","messageId":"113","endLine":11,"endColumn":15},{"ruleId":"110","severity":1,"message":"114","line":42,"column":9,"nodeType":"112","messageId":"113","endLine":42,"endColumn":22},{"ruleId":"110","severity":1,"message":"115","line":60,"column":9,"nodeType":"112","messageId":"113","endLine":60,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":38,"column":6,"nodeType":"118","endLine":38,"endColumn":8,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"120","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"111","line":7,"column":14,"nodeType":"112","messageId":"113","endLine":7,"endColumn":15},{"ruleId":"110","severity":1,"message":"120","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"121","line":4,"column":64,"nodeType":"112","messageId":"113","endLine":4,"endColumn":76},{"ruleId":"110","severity":1,"message":"111","line":7,"column":14,"nodeType":"112","messageId":"113","endLine":7,"endColumn":15},{"ruleId":"110","severity":1,"message":"122","line":40,"column":15,"nodeType":"112","messageId":"113","endLine":40,"endColumn":26},{"ruleId":"110","severity":1,"message":"120","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"111","line":7,"column":14,"nodeType":"112","messageId":"113","endLine":7,"endColumn":15},{"ruleId":"110","severity":1,"message":"120","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"111","line":6,"column":14,"nodeType":"112","messageId":"113","endLine":6,"endColumn":15},{"ruleId":"110","severity":1,"message":"120","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"121","line":3,"column":64,"nodeType":"112","messageId":"113","endLine":3,"endColumn":76},{"ruleId":"110","severity":1,"message":"111","line":6,"column":14,"nodeType":"112","messageId":"113","endLine":6,"endColumn":15},{"ruleId":"110","severity":1,"message":"120","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"111","line":6,"column":14,"nodeType":"112","messageId":"113","endLine":6,"endColumn":15},{"ruleId":"110","severity":1,"message":"123","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":30},{"ruleId":"110","severity":1,"message":"124","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":21},{"ruleId":"110","severity":1,"message":"125","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":23},{"ruleId":"110","severity":1,"message":"126","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":35,"column":13,"nodeType":"129","endLine":35,"endColumn":43},{"ruleId":"127","severity":1,"message":"128","line":36,"column":13,"nodeType":"129","endLine":36,"endColumn":43},{"ruleId":"110","severity":1,"message":"130","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"131","severity":2,"message":"132","line":13,"column":16,"nodeType":"112","messageId":"133","endLine":13,"endColumn":32},{"ruleId":"110","severity":1,"message":"126","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":20},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["136"],"'Container' is defined but never used.","'VictoryLabel' is defined but never used.","'dateTimeEnd' is assigned a value but never used.","'svgLandingPageSection1' is defined but never used.","'backgroundTop' is defined but never used.","'sleepingGirlImg' is defined but never used.","'shootingStar' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ShootingStarTest' is defined but never used.","no-undef","'shootingStarTest' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},"Update the dependencies array to be: [checkExistingData]",{"range":"139","text":"140"},[1659,1661],"[checkExistingData]"]