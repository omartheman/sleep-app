[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js":"21"},{"size":661,"mtime":1609548489364,"results":"22","hashOfConfig":"23"},{"size":10023,"mtime":1610654259812,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":15207,"mtime":1610653000708,"results":"26","hashOfConfig":"23"},{"size":5598,"mtime":1610516763523,"results":"27","hashOfConfig":"23"},{"size":7661,"mtime":1610652056924,"results":"28","hashOfConfig":"23"},{"size":5675,"mtime":1610651893949,"results":"29","hashOfConfig":"23"},{"size":3966,"mtime":1610603717744,"results":"30","hashOfConfig":"23"},{"size":3873,"mtime":1610603717754,"results":"31","hashOfConfig":"23"},{"size":3735,"mtime":1610603717748,"results":"32","hashOfConfig":"23"},{"size":3839,"mtime":1610603717746,"results":"33","hashOfConfig":"23"},{"size":4787,"mtime":1610603717761,"results":"34","hashOfConfig":"23"},{"size":550,"mtime":1610073486623,"results":"35","hashOfConfig":"23"},{"size":2871,"mtime":1610427695167,"results":"36","hashOfConfig":"23"},{"size":7475,"mtime":1610654194775,"results":"37","hashOfConfig":"23"},{"size":1199,"mtime":1610653888134,"results":"38","hashOfConfig":"23"},{"size":4631,"mtime":1610603717751,"results":"39","hashOfConfig":"23"},{"size":5429,"mtime":1610651783660,"results":"40","hashOfConfig":"23"},{"size":4756,"mtime":1610652091207,"results":"41","hashOfConfig":"23"},{"size":5362,"mtime":1610603717760,"results":"42","hashOfConfig":"23"},{"size":1340,"mtime":1610516763531,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asvjz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["98","99"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["100","101","102","103","104"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["105","106"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["107","108","109","110","111","112"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["113","114","115","116","117","118","119","120"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './EnterBedTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryTooltip, VictoryScatter } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, nightModeTransitionTime, victoryAxisStyle, getLongDate,  VictoryScatterLineComplement, victoryLineStyle, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n//make it so graph updates when component loads\r\n\r\nclass EnterBedTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          enterBedTime: x.enterBedTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            enterBedTime: x.enterBedTime\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = true;\r\n      data = createData1(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'enterBedTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n            <VictoryAxis\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"enter-bed-charts enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"This is the time that you entered your bed - you may not yet have turned the lights off.\">Time in Bed</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EnterBedTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nEnterBedTimesChart.propTypes = {\r\n  dates: PropTypes.array,\r\n  nightMode: PropTypes.bool, \r\n  loggedInUser: PropTypes.string\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["121","122","123","124"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './MorningWakeTimesChart.scss';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MorningWakeTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          morningWakeTime: x.morningWakeTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            morningWakeTime: x.morningWakeTime\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = false;\r\n      data = createData1(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'morningWakeTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'exitBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Wake Up Time</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MorningWakeTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nMorningWakeTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["125","126","127","128","129","130"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel, VictoryScatter } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, VictoryScatterLineComplement, victoryLineStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          lightsOffTime: x.lightsOffTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            lightsOffTime: x.lightsOffTime\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = true;\r\n      data = createData1(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'lightsOffTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              fixLabelOverlap={true}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryLine\r\n              data={data}\r\n              style={victoryLineStyle(this.props.nightMode, 'enterBedCharts')}\r\n            />\r\n            {VictoryScatterLineComplement(data, this.props.nightMode, 'enterBedCharts')}\r\n          </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"The time you turned the lights off after getting in bed.\">Time Lights Off</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["131","132","133","134"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLine, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, getLongDate, VictoryScatterLineComplement, victoryAxisStyle, victoryLineStyle, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass LightsOffTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          exitBedTime: x.exitBedTime\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            exitBedTime: x.exitBedTime\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = false;\r\n      data = createData1(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'exitBedTime', showYesterdaysDate);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'time'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => formatAMPM(y)}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryLine\r\n                data={data}\r\n                style={victoryLineStyle(this.props.nightMode, 'exitBedCharts')}\r\n              />\r\n              {VictoryScatterLineComplement(data, this.props.nightMode)}\r\n            </VictoryChart>\r\n          <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Time Out of Bed</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LightsOffTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\nLightsOffTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["135","136","137","138","139","140"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, victoryTooltipLabelStyle, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass TimeToFallAsleepChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          timeToFallAsleep: x.timeToFallAsleep\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            timeToFallAsleep: x.timeToFallAsleep\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'timeToFallAsleep', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(0 168 255)' : '#00b6ba', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum){\r\n                    return(\r\n                      `${datum.timeLabel}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n              <h2 className={this.props.nightMode ? \"enter-bed-charts-heading-night\" : \"enter-bed-charts-heading\"} title=\"How long it took you to fall asleep after turning the lights off.\">Time to Fall Asleep</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TimeToFallAsleepChart; \r\n\r\nTimeToFallAsleepChart.propTypes = {\r\n  dates: PropTypes.array,\r\n  nightMode: PropTypes.bool, \r\n  loggedInUser: PropTypes.string\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["141"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",["142","143"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["144","145","146"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport graphScreenshot1 from './images/time-out-of-bed-screenshot-square.png';\r\nimport graphScreenshot2 from './images/time-to-fall-asleep-screenshot-square.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n          </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep App</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Change your life.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button as={Link} to={'/sleep/create-account'}>Create Account</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",["147","148","149"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MinutesEarlyWokeChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          minutesEarlyWoke: x.minutesEarlyWoke\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            minutesEarlyWoke: x.minutesEarlyWoke\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = false;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                fixLabelOverlap={true}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 52 0)' : 'rgb(186 0 177)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} min\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n             <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Minutes Early Awake</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MinutesEarlyWokeChart; \r\n\r\nMinutesEarlyWokeChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",["150","151","152"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",["153","154","155","156"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass QualityRatingChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          qualityRating: x.qualityRating\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            qualityRating: x.qualityRating\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      const showYesterdaysDate = true;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'qualityRating', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y}`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(173 31 255)' : 'rgb(37 39 255)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} out of 5\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"A rating out of 5 of how well you slept last night.\"\r\n            >\r\n              Sleep Quality Rating\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QualityRatingChart; \r\n\r\nQualityRatingChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",["157","158","159","160","161","162","163","164","165"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, getLongDate, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createXAxisTickValues, createDateLabels} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass SleepAidItemChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          sleepAidItem: x.sleepAidItem\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            sleepAidItem: x.sleepAidItem\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter((dataObj, i) => i < this.props.range + 1 && dataObj.sleepAidItem || i < this.props.range + 1 && dataObj.sleepAidItem === 0).map((e, i, arr) => {\r\n        const date = yesterdaysDate(e.date);\r\n        const dateLabelPrimer = yesterdaysDateLabelPrimer(e.date);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        dateLabels = [...dateLabels, dateLabel];\r\n\r\n        const sleepAidMg = e.sleepAidItem.match(/\\d+/g);\r\n        const sleepAidItem = e.sleepAidItem.match(/(?<=\\s+)[A-Za-z]+/g)[0];\r\n        \r\n        return(\r\n          { x: date, y: sleepAidMg, dateLabel: getLongDate(dateLabelPrimer), sleepAidItem: sleepAidItem}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                fixLabelOverlap={true}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} mg/oz`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 0 207)' : 'rgb(49 0 186)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum.sleepAidItem){\r\n                    const sleepAidItem = datum.sleepAidItem.toLowerCase();\r\n                    return(\r\n                      `${datum.y}${sleepAidItem === 'alcohol' ? 'oz' : 'mg'} ${datum.sleepAidItem}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2 \r\n              className={\r\n                `charts-heading ${this.props.nightMode ?\r\n                  'quality-rating-charts-heading-night'  \r\n                  : 'quality-rating-charts-heading-day'\r\n                }`\r\n              }\r\n              title=\"The item and amount of sleep aid you took last night.\"\r\n            >\r\n              Sleep Aid Item\r\n            </h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SleepAidItemChart; \r\n\r\nSleepAidItemChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":11,"column":14,"nodeType":"172","messageId":"173","endLine":11,"endColumn":15},{"ruleId":"170","severity":1,"message":"174","line":16,"column":21,"nodeType":"172","messageId":"173","endLine":16,"endColumn":24},{"ruleId":"170","severity":1,"message":"175","line":16,"column":26,"nodeType":"172","messageId":"173","endLine":16,"endColumn":29},{"ruleId":"170","severity":1,"message":"176","line":26,"column":9,"nodeType":"172","messageId":"173","endLine":26,"endColumn":17},{"ruleId":"170","severity":1,"message":"177","line":49,"column":9,"nodeType":"172","messageId":"173","endLine":49,"endColumn":22},{"ruleId":"170","severity":1,"message":"171","line":7,"column":9,"nodeType":"172","messageId":"173","endLine":7,"endColumn":10},{"ruleId":"178","severity":1,"message":"179","line":39,"column":6,"nodeType":"180","endLine":39,"endColumn":13,"suggestions":"181"},{"ruleId":"170","severity":1,"message":"182","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":7,"column":14,"nodeType":"172","messageId":"173","endLine":7,"endColumn":15},{"ruleId":"170","severity":1,"message":"183","line":7,"column":78,"nodeType":"172","messageId":"173","endLine":7,"endColumn":89},{"ruleId":"170","severity":1,"message":"184","line":7,"column":91,"nodeType":"172","messageId":"173","endLine":7,"endColumn":105},{"ruleId":"170","severity":1,"message":"185","line":7,"column":107,"nodeType":"172","messageId":"173","endLine":7,"endColumn":132},{"ruleId":"186","severity":1,"message":"187","line":79,"column":15,"nodeType":"188","endLine":79,"endColumn":66},{"ruleId":"170","severity":1,"message":"182","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"189","line":4,"column":78,"nodeType":"172","messageId":"173","endLine":4,"endColumn":92},{"ruleId":"170","severity":1,"message":"190","line":4,"column":94,"nodeType":"172","messageId":"173","endLine":4,"endColumn":108},{"ruleId":"170","severity":1,"message":"171","line":7,"column":14,"nodeType":"172","messageId":"173","endLine":7,"endColumn":15},{"ruleId":"170","severity":1,"message":"191","line":7,"column":17,"nodeType":"172","messageId":"173","endLine":7,"endColumn":40},{"ruleId":"170","severity":1,"message":"183","line":7,"column":60,"nodeType":"172","messageId":"173","endLine":7,"endColumn":71},{"ruleId":"170","severity":1,"message":"184","line":7,"column":122,"nodeType":"172","messageId":"173","endLine":7,"endColumn":136},{"ruleId":"170","severity":1,"message":"185","line":7,"column":138,"nodeType":"172","messageId":"173","endLine":7,"endColumn":163},{"ruleId":"170","severity":1,"message":"182","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":7,"column":14,"nodeType":"172","messageId":"173","endLine":7,"endColumn":15},{"ruleId":"170","severity":1,"message":"183","line":7,"column":17,"nodeType":"172","messageId":"173","endLine":7,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":76,"column":15,"nodeType":"188","endLine":76,"endColumn":66},{"ruleId":"170","severity":1,"message":"182","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"190","line":3,"column":78,"nodeType":"172","messageId":"173","endLine":3,"endColumn":92},{"ruleId":"170","severity":1,"message":"171","line":6,"column":14,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"183","line":6,"column":83,"nodeType":"172","messageId":"173","endLine":6,"endColumn":94},{"ruleId":"170","severity":1,"message":"184","line":6,"column":96,"nodeType":"172","messageId":"173","endLine":6,"endColumn":110},{"ruleId":"170","severity":1,"message":"185","line":6,"column":112,"nodeType":"172","messageId":"173","endLine":6,"endColumn":137},{"ruleId":"170","severity":1,"message":"182","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":6,"column":14,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"183","line":6,"column":17,"nodeType":"172","messageId":"173","endLine":6,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":75,"column":17,"nodeType":"188","endLine":75,"endColumn":68},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"192","line":5,"column":78,"nodeType":"172","messageId":"173","endLine":5,"endColumn":102},{"ruleId":"170","severity":1,"message":"183","line":5,"column":104,"nodeType":"172","messageId":"173","endLine":5,"endColumn":115},{"ruleId":"170","severity":1,"message":"184","line":5,"column":117,"nodeType":"172","messageId":"173","endLine":5,"endColumn":131},{"ruleId":"170","severity":1,"message":"185","line":5,"column":133,"nodeType":"172","messageId":"173","endLine":5,"endColumn":158},{"ruleId":"186","severity":1,"message":"187","line":75,"column":17,"nodeType":"188","endLine":75,"endColumn":68},{"ruleId":"170","severity":1,"message":"193","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":20},{"ruleId":"166","replacedBy":"194"},{"ruleId":"168","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":35,"column":13,"nodeType":"198","endLine":35,"endColumn":43},{"ruleId":"196","severity":1,"message":"197","line":36,"column":13,"nodeType":"198","endLine":36,"endColumn":43},{"ruleId":"196","severity":1,"message":"197","line":47,"column":13,"nodeType":"198","endLine":47,"endColumn":43},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"183","line":5,"column":78,"nodeType":"172","messageId":"173","endLine":5,"endColumn":89},{"ruleId":"186","severity":1,"message":"187","line":76,"column":17,"nodeType":"188","endLine":76,"endColumn":68},{"ruleId":"170","severity":1,"message":"183","line":5,"column":53,"nodeType":"172","messageId":"173","endLine":5,"endColumn":64},{"ruleId":"170","severity":1,"message":"184","line":5,"column":66,"nodeType":"172","messageId":"173","endLine":5,"endColumn":80},{"ruleId":"170","severity":1,"message":"185","line":5,"column":82,"nodeType":"172","messageId":"173","endLine":5,"endColumn":107},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"184","line":5,"column":78,"nodeType":"172","messageId":"173","endLine":5,"endColumn":92},{"ruleId":"170","severity":1,"message":"185","line":5,"column":94,"nodeType":"172","messageId":"173","endLine":5,"endColumn":119},{"ruleId":"186","severity":1,"message":"187","line":76,"column":17,"nodeType":"188","endLine":76,"endColumn":68},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"199","line":5,"column":134,"nodeType":"172","messageId":"173","endLine":5,"endColumn":145},{"ruleId":"170","severity":1,"message":"200","line":5,"column":147,"nodeType":"172","messageId":"173","endLine":5,"endColumn":168},{"ruleId":"170","severity":1,"message":"201","line":5,"column":170,"nodeType":"172","messageId":"173","endLine":5,"endColumn":186},{"ruleId":"202","severity":1,"message":"203","line":49,"column":72,"nodeType":"204","messageId":"205","endLine":49,"endColumn":74},{"ruleId":"202","severity":1,"message":"203","line":49,"column":96,"nodeType":"204","messageId":"205","endLine":49,"endColumn":98},{"ruleId":"202","severity":1,"message":"206","line":49,"column":96,"nodeType":"204","messageId":"205","endLine":49,"endColumn":98},{"ruleId":"202","severity":1,"message":"206","line":49,"column":124,"nodeType":"204","messageId":"205","endLine":49,"endColumn":126},{"ruleId":"186","severity":1,"message":"187","line":85,"column":17,"nodeType":"188","endLine":85,"endColumn":68},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["209"],"'Container' is defined but never used.","'getLongDate' is defined but never used.","'yesterdaysDate' is defined but never used.","'yesterdaysDateLabelPrimer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'nightModeTransitionTime' is defined but never used.","'victoryTooltipLabelStyle' is defined but never used.","'shootingStar' is defined but never used.",["207"],["208"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'createData1' is defined but never used.","'createXAxisTickValues' is defined but never used.","'createDateLabels' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"212","text":"213"},[1756,1763],"[checkExistingData, props]"]