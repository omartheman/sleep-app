[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js":"21"},{"size":661,"mtime":1609548489364,"results":"22","hashOfConfig":"23"},{"size":9225,"mtime":1610496289083,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":15063,"mtime":1610507941837,"results":"26","hashOfConfig":"23"},{"size":5598,"mtime":1610485418546,"results":"27","hashOfConfig":"23"},{"size":3286,"mtime":1610506975839,"results":"28","hashOfConfig":"23"},{"size":5572,"mtime":1610503650390,"results":"29","hashOfConfig":"23"},{"size":4281,"mtime":1610507269433,"results":"30","hashOfConfig":"23"},{"size":4014,"mtime":1610507635391,"results":"31","hashOfConfig":"23"},{"size":4667,"mtime":1610506617927,"results":"32","hashOfConfig":"23"},{"size":4010,"mtime":1610507744644,"results":"33","hashOfConfig":"23"},{"size":4643,"mtime":1610503454826,"results":"34","hashOfConfig":"23"},{"size":550,"mtime":1610073486623,"results":"35","hashOfConfig":"23"},{"size":2871,"mtime":1610427695167,"results":"36","hashOfConfig":"23"},{"size":7227,"mtime":1610083989229,"results":"37","hashOfConfig":"23"},{"size":1155,"mtime":1610083989231,"results":"38","hashOfConfig":"23"},{"size":4749,"mtime":1610507671361,"results":"39","hashOfConfig":"23"},{"size":5465,"mtime":1610503561196,"results":"40","hashOfConfig":"23"},{"size":4741,"mtime":1610503681211,"results":"41","hashOfConfig":"23"},{"size":5118,"mtime":1610503703370,"results":"42","hashOfConfig":"23"},{"size":1340,"mtime":1610485428646,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asvjz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["95","96"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["97","98","99","100","101","102"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["103"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["104","105","106","107"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './NapTimesChart.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass NapTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  };\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n        let newNapInfo = [];\r\n        res.data.map(x => {\r\n          newNapInfo = [...newNapInfo, {\r\n            date: x.date, \r\n            napStartTime: x.napStartTime,\r\n            napEndTime: x.napEndTime\r\n          }]\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newNapInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n          let newNapInfo = [];\r\n          res.data.map(x => {\r\n            newNapInfo = [...newNapInfo, {\r\n              date: x.date, \r\n              napStartTime: x.napStartTime,\r\n              napEndTime: x.napEndTime\r\n            }]\r\n            return null;\r\n          })\r\n          this.setState({chartInfo: newNapInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.napStartTime).map((e, i, arr) => {\r\n        const dateTime = new Date(`January 1, 2000 ${e.napStartTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        dateLabels = [...dateLabels, dateLabel];\r\n        // if (dateDiff < 15) {\r\n        //   dateLabels = [...dateLabels, dateLabel];\r\n        // } else {\r\n        //   if (date % 2 === 0){\r\n        //     dateLabels = [...dateLabels, null]\r\n        //   } else {\r\n        //     dateLabels = [...dateLabels, dateLabel];\r\n        //   }\r\n        // }\r\n        return(\r\n          { x: date, y0: dateTime, y: dateTimeEnd }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              fixLabelOverlap={true}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryBar\r\n              data={data}\r\n              barWidth={() => {\r\n                let firstDate;\r\n                let lastDate;\r\n                let dateDiff;\r\n                if (data) {\r\n                  firstDate = data[0].barWidthDate; \r\n                  lastDate = data[data.length - 1].barWidthDate; \r\n                  dateDiff = lastDate - firstDate;\r\n                }\r\n                return(\r\n                  dateDiff < 10 ? 18\r\n                  : dateDiff < 20 ? 8\r\n                  : 4 \r\n                );\r\n              }}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              style={{ data: {fill: '#964c9d'} }}\r\n              labels={({ datum }) => {\r\n                return(duration(new Date(datum._y0), new Date(datum._y)))}\r\n              }\r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  // centerOffset={{ y: 45 }}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n          <h2>Nap Times</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NapTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}\r\n\r\nNapTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["108","109","110","111","112","113"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["114","115","116"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["117","118","119"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["120","121","122","123"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["124","125"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["126"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",["127","128"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["129","130","131"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport graphScreenshot1 from './images/time-out-of-bed-screenshot-square.png';\r\nimport graphScreenshot2 from './images/time-to-fall-asleep-screenshot-square.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n          </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep App</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Change your life.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button as={Link} to={'/sleep/create-account'}>Create Account</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",["132","133"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MinutesEarlyWokeChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          minutesEarlyWoke: x.minutesEarlyWoke\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            minutesEarlyWoke: x.minutesEarlyWoke\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.minutesEarlyWoke || napObj.minutesEarlyWoke === 0).map((e, i, arr) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        return(\r\n          { x: date, y: e.minutesEarlyWoke, dateLabel: dateLabel}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.dateLabel} \\n${datum.y} min`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n             <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Minutes Early Awake</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MinutesEarlyWokeChart; \r\n\r\nMinutesEarlyWokeChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",["134"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip, VictoryStack } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass ArousalDurationChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          arousalDuration: x.arousalDuration\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        console.log(res);\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            arousalDuration: x.arousalDuration\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data = [];\r\n    if (chartInfo.length > 1) {\r\n      data =  chartInfo.filter(napObj => napObj.arousalDuration).map((e, i, arr) => {\r\n        const durations = e.arousalDuration.match(/\\d+/g).map(x => Number(x));\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        let durationData = [];\r\n        for (let i = 0; i < durations.length; i++) {\r\n          durationData = [...durationData, \r\n            { x: date, y: durations[i], dateLabel: dateLabel}\r\n          ];\r\n        }\r\n        return(durationData);\r\n      });\r\n    }\r\n    //SORT DATA INTO AROUSAL1 AROUSAL2 AROUSAL3... \r\n    //FIRST FILL AROUSALS WITH CORRECT # EMPTY ARRAYS\r\n    //then do a forEach, and you need  \r\n\r\n    const maxNumberArousals = Math.max(...data.map(x => x.length));\r\n    const arousals = [];\r\n    const bars = [];\r\n    //find the date with the most arousals, and push this many arrays to 'arousals'\r\n    //data.length only gives how many dates. \r\n    for (let i = 0; i < maxNumberArousals; i++){\r\n      arousals.push([]);\r\n    }\r\n    data.forEach((x, i) => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        if (x[i]){\r\n          arousals[i].push(x[i]);\r\n        }\r\n      }\r\n    })\r\n    let firstDate;\r\n    let lastDate;\r\n    if (arousals[0]) {\r\n      firstDate = arousals[0][0].x;\r\n      lastDate = arousals[0][arousals[0].length - 1].x;\r\n    }\r\n\r\n    const createBars = () => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        bars.push(\r\n          <VictoryBar\r\n            key={i}\r\n            data={arousals[i]}\r\n            barWidth={() => {\r\n              let dateDiff;\r\n              if (data) {\r\n                dateDiff = lastDate - firstDate;\r\n              }\r\n              return(\r\n                dateDiff < 10 ? 18\r\n                : dateDiff < 20 ? 8\r\n                : 4 \r\n              );\r\n            }}\r\n            labels={({ datum }) => {\r\n              return(`${datum.dateLabel} \\n${datum.y} min`);\r\n            }}\r\n            labelComponent={\r\n              <VictoryTooltip\r\n                flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n              />\r\n            }\r\n          />\r\n        )\r\n      }\r\n    }\r\n    createBars();\r\n\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryStack>\r\n                {[...bars]}\r\n              </VictoryStack>\r\n            </VictoryChart>\r\n            <h2>Arousal Durations</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ArousalDurationChart; \r\n\r\nArousalDurationChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",["135","136"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass QualityRatingChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          qualityRating: x.qualityRating\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            qualityRating: x.qualityRating\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.qualityRating || napObj.qualityRating === 0).map((e, i, arr) => {\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        var weekday = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n        var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const longDateLabel = `${weekday[dateLabelPrimer.getDay()]}, ${month[dateLabelPrimer.getMonth()]} ${dateLabelPrimer.getDate()}`;\r\n        return(\r\n          { x: date, y: e.qualityRating, dateLabel: longDateLabel}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y}`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.dateLabel} \\n${datum.y} out of 5`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2>Sleep Quality Rating</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QualityRatingChart; \r\n\r\nQualityRatingChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",["137","138"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass SleepAidItemChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          sleepAidItem: x.sleepAidItem\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            sleepAidItem: x.sleepAidItem\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.sleepAidItem || napObj.sleepAidItem === 0).map((e, i, arr) => {\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        const sleepAidMg = e.sleepAidItem.match(/\\d+/g);\r\n        const sleepAidItem = e.sleepAidItem.match(/(?<=\\s+)[A-Za-z]+/g)[0];\r\n        var weekday = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n        var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const longDateLabel = `${weekday[dateLabelPrimer.getDay()]}, ${month[dateLabelPrimer.getMonth()]} ${dateLabelPrimer.getDate()}`;\r\n        return(\r\n          { x: date, y: sleepAidMg, dateLabel: longDateLabel, sleepAidItem: sleepAidItem}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} mg/oz`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum.sleepAidItem){\r\n                    const sleepAidItem = datum.sleepAidItem.toLowerCase();\r\n                    return(\r\n                      `${datum.y}${sleepAidItem === 'alcohol' ? 'oz' : 'mg'} ${datum.sleepAidItem}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2>Sleep Aid Item</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SleepAidItemChart; \r\n\r\nSleepAidItemChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":11,"column":14,"nodeType":"145","messageId":"146","endLine":11,"endColumn":15},{"ruleId":"143","severity":1,"message":"147","line":16,"column":21,"nodeType":"145","messageId":"146","endLine":16,"endColumn":24},{"ruleId":"143","severity":1,"message":"148","line":16,"column":26,"nodeType":"145","messageId":"146","endLine":16,"endColumn":29},{"ruleId":"143","severity":1,"message":"149","line":26,"column":9,"nodeType":"145","messageId":"146","endLine":26,"endColumn":17},{"ruleId":"143","severity":1,"message":"150","line":48,"column":9,"nodeType":"145","messageId":"146","endLine":48,"endColumn":22},{"ruleId":"143","severity":1,"message":"151","line":65,"column":9,"nodeType":"145","messageId":"146","endLine":65,"endColumn":30},{"ruleId":"152","severity":1,"message":"153","line":39,"column":6,"nodeType":"154","endLine":39,"endColumn":13,"suggestions":"155"},{"ruleId":"143","severity":1,"message":"156","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":7,"column":14,"nodeType":"145","messageId":"146","endLine":7,"endColumn":15},{"ruleId":"143","severity":1,"message":"157","line":62,"column":15,"nodeType":"145","messageId":"146","endLine":62,"endColumn":23},{"ruleId":"158","severity":1,"message":"159","line":98,"column":15,"nodeType":"160","endLine":98,"endColumn":65},{"ruleId":"143","severity":1,"message":"156","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":19},{"ruleId":"143","severity":1,"message":"161","line":4,"column":78,"nodeType":"145","messageId":"146","endLine":4,"endColumn":92},{"ruleId":"143","severity":1,"message":"162","line":4,"column":94,"nodeType":"145","messageId":"146","endLine":4,"endColumn":108},{"ruleId":"143","severity":1,"message":"144","line":7,"column":14,"nodeType":"145","messageId":"146","endLine":7,"endColumn":15},{"ruleId":"143","severity":1,"message":"163","line":7,"column":17,"nodeType":"145","messageId":"146","endLine":7,"endColumn":40},{"ruleId":"143","severity":1,"message":"164","line":55,"column":15,"nodeType":"145","messageId":"146","endLine":55,"endColumn":26},{"ruleId":"143","severity":1,"message":"156","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":7,"column":14,"nodeType":"145","messageId":"146","endLine":7,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":82,"column":15,"nodeType":"160","endLine":82,"endColumn":66},{"ruleId":"143","severity":1,"message":"156","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":19},{"ruleId":"143","severity":1,"message":"162","line":3,"column":78,"nodeType":"145","messageId":"146","endLine":3,"endColumn":92},{"ruleId":"143","severity":1,"message":"144","line":6,"column":14,"nodeType":"145","messageId":"146","endLine":6,"endColumn":15},{"ruleId":"143","severity":1,"message":"156","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":19},{"ruleId":"143","severity":1,"message":"165","line":3,"column":64,"nodeType":"145","messageId":"146","endLine":3,"endColumn":76},{"ruleId":"143","severity":1,"message":"144","line":6,"column":14,"nodeType":"145","messageId":"146","endLine":6,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":81,"column":17,"nodeType":"160","endLine":81,"endColumn":68},{"ruleId":"143","severity":1,"message":"144","line":5,"column":14,"nodeType":"145","messageId":"146","endLine":5,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":90,"column":17,"nodeType":"160","endLine":90,"endColumn":68},{"ruleId":"143","severity":1,"message":"166","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":20},{"ruleId":"139","replacedBy":"167"},{"ruleId":"141","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":35,"column":13,"nodeType":"171","endLine":35,"endColumn":43},{"ruleId":"169","severity":1,"message":"170","line":36,"column":13,"nodeType":"171","endLine":36,"endColumn":43},{"ruleId":"169","severity":1,"message":"170","line":47,"column":13,"nodeType":"171","endLine":47,"endColumn":43},{"ruleId":"143","severity":1,"message":"144","line":5,"column":14,"nodeType":"145","messageId":"146","endLine":5,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":92,"column":17,"nodeType":"160","endLine":92,"endColumn":68},{"ruleId":"143","severity":1,"message":"144","line":5,"column":14,"nodeType":"145","messageId":"146","endLine":5,"endColumn":15},{"ruleId":"143","severity":1,"message":"144","line":5,"column":14,"nodeType":"145","messageId":"146","endLine":5,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":94,"column":17,"nodeType":"160","endLine":94,"endColumn":68},{"ruleId":"143","severity":1,"message":"144","line":5,"column":14,"nodeType":"145","messageId":"146","endLine":5,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":95,"column":17,"nodeType":"160","endLine":95,"endColumn":68},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["174"],"'Container' is defined but never used.","'dateDiff' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'nightModeTransitionTime' is defined but never used.","'dateTimeEnd' is assigned a value but never used.","'VictoryLabel' is defined but never used.","'shootingStar' is defined but never used.",["172"],["173"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"177","text":"178"},[1756,1763],"[checkExistingData, props]"]