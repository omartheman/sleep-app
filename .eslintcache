[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js":"21"},{"size":661,"mtime":1609548489364,"results":"22","hashOfConfig":"23"},{"size":9225,"mtime":1610496289083,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":15459,"mtime":1610426995271,"results":"26","hashOfConfig":"23"},{"size":5598,"mtime":1610485418546,"results":"27","hashOfConfig":"23"},{"size":2718,"mtime":1610503328777,"results":"28","hashOfConfig":"23"},{"size":5572,"mtime":1610503650390,"results":"29","hashOfConfig":"23"},{"size":4551,"mtime":1610502982725,"results":"30","hashOfConfig":"23"},{"size":3683,"mtime":1610503111623,"results":"31","hashOfConfig":"23"},{"size":4724,"mtime":1610499012805,"results":"32","hashOfConfig":"23"},{"size":3531,"mtime":1610503590617,"results":"33","hashOfConfig":"23"},{"size":4643,"mtime":1610503454826,"results":"34","hashOfConfig":"23"},{"size":550,"mtime":1610073486623,"results":"35","hashOfConfig":"23"},{"size":2871,"mtime":1610427695167,"results":"36","hashOfConfig":"23"},{"size":7227,"mtime":1610083989229,"results":"37","hashOfConfig":"23"},{"size":1155,"mtime":1610083989231,"results":"38","hashOfConfig":"23"},{"size":4514,"mtime":1610503623120,"results":"39","hashOfConfig":"23"},{"size":5465,"mtime":1610503561196,"results":"40","hashOfConfig":"23"},{"size":4741,"mtime":1610503681211,"results":"41","hashOfConfig":"23"},{"size":5118,"mtime":1610503703370,"results":"42","hashOfConfig":"23"},{"size":1340,"mtime":1610485428646,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asvjz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["96","97"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["98","99","100","101","102","103"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["104"],"import { useState, useEffect } from 'react';\r\nimport { Alert, Button, Container, Form, Spinner } from 'react-bootstrap';\r\nimport { Calendar } from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport {c, getClickedDate, url} from './global_items';\r\n\r\nconst urlCheckExistingData = `${url}check-existing-data`;\r\nconst urlUploadData = `${url}upload-data`;\r\n\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction AddData (props) {\r\n  const [value, onChange] = useState(new Date());\r\n  const [date, setDate] = useState(null);\r\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\r\n  const [existingNapStart, setExistingNapStart] = useState('');\r\n  const [existingNapEnd, setExistingNapEnd] = useState('');\r\n  const [sleepAidItem, setSleepAidItem] = useState('');\r\n  const [sleepAidMg, setSleepAidMg] = useState('');\r\n  const [enterBedTime, setEnterBedTime] = useState('');\r\n  const [lightsOffTime, setLightsOffTime] = useState('');\r\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\r\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\r\n  const [arousalDuration, setArousalDuration] = useState('');\r\n  const [morningWakeTime, setMorningWakeTime] = useState('');\r\n  const [exitBedTime, setExitBedTime] = useState('');\r\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\r\n  const [qualityRating, setQualityRating] = useState('');\r\n  const [clickedDate, setClickedDate] = useState(null);\r\n  const [checkExistingDataCompleted, setCheckExistingDataCompleted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let d = new Date();\r\n    setDate(d);\r\n    checkExistingData(d);\r\n  }, [props]);\r\n\r\n  const checkExistingData = (clickedDate) => {\r\n    setCheckExistingDataCompleted(false);\r\n    c('checking existing data')\r\n    c('user',props.loggedInUser)\r\n    c('props', props)\r\n    if (!props.loggedInUser){return};\r\n    c('didnt return')\r\n    axios.post(urlCheckExistingData, {\r\n      clickedDate: getClickedDate(clickedDate, 'mysql'),\r\n      user: props.loggedInUser\r\n    })\r\n    .then(res => {\r\n      setClickedDate(getClickedDate(clickedDate, 'mysql'));\r\n      if (res.data.length > 0){\r\n\r\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\r\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napEndTime : '');\r\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\r\n        setSleepAidMg(res.data[0].sleepAidMg ? res.data[0].sleepAidMg : '');\r\n        setEnterBedTime(res.data[0].enterBedTime ? res.data[0].enterBedTime : '');\r\n        setLightsOffTime(res.data[0].lightsOffTime ? res.data[0].lightsOffTime : '');\r\n        setTimeToFallAsleep(res.data[0].timeToFallAsleep ? res.data[0].timeToFallAsleep : '');\r\n        setNumberTimesArousal(res.data[0].numberTimesArousal ? res.data[0].numberTimesArousal : '');\r\n        setArousalDuration(res.data[0].arousalDuration ? res.data[0].arousalDuration : '');\r\n        setMorningWakeTime(res.data[0].morningWakeTime ? res.data[0].morningWakeTime : '');\r\n        setExitBedTime(res.data[0].exitBedTime ? res.data[0].exitBedTime : '');\r\n        setMinutesEarlyWoke(res.data[0].minutesEarlyWoke ? res.data[0].minutesEarlyWoke : '');\r\n        setQualityRating(res.data[0].qualityRating ? res.data[0].qualityRating : '');\r\n\r\n        setExistingDataAlert(true);\r\n      } else {\r\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\r\n        for (let i = 0; i < dataFuncs.length; i++){\r\n          dataFuncs[i]('');\r\n        }\r\n        setExistingDataAlert(false);\r\n      }\r\n      setCheckExistingDataCompleted(true);\r\n    })\r\n  } \r\n  const handleDataSubmit = () => {\r\n    axios.post(urlUploadData, {\r\n      //Ternarys were set to not give a value for SQL when there is none. Helps with creating graphs to skip data.\r\n      user: props.loggedInUser,\r\n      date: clickedDate === '' ? null : clickedDate,\r\n      napStartTime: existingNapStart === '' ? null : existingNapStart,\r\n      napEndTime: existingNapEnd === '' ? null : existingNapEnd,\r\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\r\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\r\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\r\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\r\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\r\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\r\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\r\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\r\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\r\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\r\n      qualityRating: qualityRating === '' ? null : qualityRating\r\n    })\r\n  };\r\n  let dateHeading;\r\n  let dateClickedYear;\r\n  if (date){\r\n    dateHeading = getClickedDate(date);\r\n    dateClickedYear = date.getFullYear();\r\n  }\r\n  const handleFormInput = (e) => {\r\n    c('e id', e.target.getAttribute('id_val'));\r\n    c('existnap value', e.target.value);\r\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\r\n      setExistingNapStart(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\r\n      setExistingNapEnd(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\r\n      setSleepAidItem(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\r\n      setSleepAidMg(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\r\n      setEnterBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\r\n      setLightsOffTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\r\n      c('timetosleep', typeof e.target.value)\r\n      setTimeToFallAsleep(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\r\n      setNumberTimesArousal(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\r\n      setArousalDuration(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\r\n      setMorningWakeTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\r\n      setExitBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\r\n      c('minutesEarlyWoke', typeof e.target.value)\r\n      setMinutesEarlyWoke(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\r\n      setQualityRating(e.target.value);\r\n    }\r\n  }\r\n  const curYear = (new Date()).getFullYear();\r\n  return(\r\n    <>\r\n      <Container className=\"add-data\">\r\n        <h1>Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <div className=\"add-data-calendar-container\">\r\n          <Calendar\r\n            onChange={onChange}\r\n            value={value}\r\n            view={'month'}\r\n            onClickDay={(value, event) => {\r\n              // console.log('New date is: ', value)\r\n              // c('valueonly', value);\r\n              setDate(value);\r\n              c('date value', value)\r\n              checkExistingData(value);\r\n            }}\r\n          />\r\n        </div>\r\n        {(date && props.loggedInUser) ?\r\n          <>\r\n            <h2>Adding data for {getClickedDate(date) === getClickedDate((new Date())) && 'today: '}<strong>{dateHeading}</strong>: </h2>\r\n            {checkExistingDataCompleted ?\r\n              <>\r\n                {(dateClickedYear < curYear || dateClickedYear > curYear) && \r\n                  <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (« or ») at the top of the calendar to scroll between years.</Alert>\r\n                }\r\n                {existingDataAlert && \r\n                  <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\r\n                }\r\n                <Form className=\"add-data-form\">\r\n                  <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"nap-start-time\"\r\n                    type=\"time\" \r\n                    className={existingNapStart !== '' && \"existing-data\"}\r\n                    value={existingNapStart} \r\n                    placeholder={existingNapStart} \r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"nap-end-time\"\r\n                    className={existingNapEnd !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={existingNapEnd}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>2a. Last night I took ___ as a sleep aid. (Example: <span className=\"add-data-form-example\">Ambien</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"sleep-aid-item\"\r\n                    className={sleepAidItem !== '' && \"existing-data\"}\r\n                    type=\"text\" \r\n                    value={sleepAidItem}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>2b. The amount of sleep aid I took last night was ___ mg/ounces (mg for medication / ounces for alcohol). (Example: <span className=\"add-data-form-example\">5</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"sleep-aid-mg\"\r\n                    className={sleepAidMg !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={sleepAidMg}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"enter-bed-time\"\r\n                    className={enterBedTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={enterBedTime}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"lights-off-time\"\r\n                    className={lightsOffTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={lightsOffTime}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"time-to-fall-asleep\"\r\n                    className={timeToFallAsleep !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={timeToFallAsleep}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"number-times-arousal\"\r\n                    className={numberTimesArousal !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={numberTimesArousal}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately. You can simply list the arousals as numbers seperated by spaces) (Example for arousals of 25min, 40min, and 10min: <span className=\"add-data-form-example\">25 40 10</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"arousal-duration\"\r\n                    className={arousalDuration !== '' && \"existing-data\"}\r\n                    type=\"text\" \r\n                    value={arousalDuration}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"morning-wake-time\"\r\n                    className={morningWakeTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={morningWakeTime}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"exit-bed-time\"\r\n                    className={exitBedTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={exitBedTime}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"minutes-early-woke\"\r\n                    className={minutesEarlyWoke !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={minutesEarlyWoke}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>\r\n                    10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"quality-rating\"\r\n                    className={qualityRating !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={qualityRating}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                </Form>\r\n                <Button className=\"add-data-submit-button\" onClick={handleDataSubmit}>Submit</Button>\r\n              </>\r\n            : \r\n              <Spinner variant=\"success\" animation=\"border\" role=\"status\" id=\"spinner-centered\" className=\"spinner-centered\"><span className=\"sr-only\">Loading...</span></Spinner>\r\n            }\r\n          </>\r\n          :\r\n          <Alert variant=\"warning\">Please log in to add data.</Alert>\r\n        }\r\n      </Container>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["105","106","107","108"],"import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './NapTimesChart.scss';\r\nimport { VictoryTooltip, VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass NapTimesChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  };\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n        let newNapInfo = [];\r\n        res.data.map(x => {\r\n          newNapInfo = [...newNapInfo, {\r\n            date: x.date, \r\n            napStartTime: x.napStartTime,\r\n            napEndTime: x.napEndTime\r\n          }]\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newNapInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n          let newNapInfo = [];\r\n          res.data.map(x => {\r\n            newNapInfo = [...newNapInfo, {\r\n              date: x.date, \r\n              napStartTime: x.napStartTime,\r\n              napEndTime: x.napEndTime\r\n            }]\r\n            return null;\r\n          })\r\n          this.setState({chartInfo: newNapInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.napStartTime).map((e, i, arr) => {\r\n        const dateTime = new Date(`January 1, 2000 ${e.napStartTime}`);\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        dateLabels = [...dateLabels, dateLabel];\r\n        // if (dateDiff < 15) {\r\n        //   dateLabels = [...dateLabels, dateLabel];\r\n        // } else {\r\n        //   if (date % 2 === 0){\r\n        //     dateLabels = [...dateLabels, null]\r\n        //   } else {\r\n        //     dateLabels = [...dateLabels, dateLabel];\r\n        //   }\r\n        // }\r\n        return(\r\n          { x: date, y0: dateTime, y: dateTimeEnd }\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"victory-chart-1-container\">\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n            scale={{y:'time'}}\r\n            domainPadding={{ x: 20, y: 20 }}\r\n          >\r\n            <VictoryAxis\r\n              tickValues={xAxisTickValues}\r\n              tickFormat={dateLabels}\r\n              fixLabelOverlap={true}\r\n              tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n              style={victoryAxisStyle('x', this.props.nightMode)}\r\n            />\r\n            <VictoryAxis\r\n              style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n              dependentAxis\r\n              tickFormat={(y) => formatAMPM(y)}\r\n              style={victoryAxisStyle('y', this.props.nightMode)}\r\n            />\r\n            <VictoryBar\r\n              data={data}\r\n              barWidth={() => {\r\n                let firstDate;\r\n                let lastDate;\r\n                let dateDiff;\r\n                if (data) {\r\n                  firstDate = data[0].barWidthDate; \r\n                  lastDate = data[data.length - 1].barWidthDate; \r\n                  dateDiff = lastDate - firstDate;\r\n                }\r\n                return(\r\n                  dateDiff < 10 ? 18\r\n                  : dateDiff < 20 ? 8\r\n                  : 4 \r\n                );\r\n              }}\r\n              cornerRadius={{topLeft: 3, topRight: 3, bottomLeft: 3, bottomRight: 3}}\r\n              style={{ data: {fill: '#964c9d'} }}\r\n              labels={({ datum }) => {\r\n                return(duration(new Date(datum._y0), new Date(datum._y)))}\r\n              }\r\n              labelComponent={\r\n                <VictoryTooltip\r\n                  flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  // centerOffset={{ y: 45 }}\r\n                />\r\n              }\r\n            />\r\n          </VictoryChart>\r\n          <h2>Nap Times</h2>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NapTimesChart; \r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n                \r\nfunction duration(start, end) {\r\n  var h1 = start.getHours();\r\n  var m1 = start.getMinutes();\r\n  var h2 = end.getHours();\r\n  var m2 = end.getMinutes();\r\n  var time = (h2 + m2/60) - (h1 + m1/60);\r\n  var timeHours = time - time%1;\r\n  var timeMinutes = Math.round(time%1 * 60);\r\n  return(`${timeHours}h, ${timeMinutes}m`)\r\n}\r\n\r\nNapTimesChart.propTypes = {\r\n  dates: PropTypes.array\r\n}","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["109","110","111","112","113"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["114","115","116"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["117","118","119"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["120","121","122","123","124","125"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["126","127"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["128"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",["129","130"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["131","132","133"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport graphScreenshot1 from './images/time-out-of-bed-screenshot-square.png';\r\nimport graphScreenshot2 from './images/time-to-fall-asleep-screenshot-square.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n          </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep App</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Change your life.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button as={Link} to={'/sleep/create-account'}>Create Account</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",["134","135"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MinutesEarlyWokeChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          minutesEarlyWoke: x.minutesEarlyWoke\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            minutesEarlyWoke: x.minutesEarlyWoke\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.minutesEarlyWoke || napObj.minutesEarlyWoke === 0).map((e, i, arr) => {\r\n        //DATE JAN 1 2000 USED BECAUSE DATE NEEDED FOR TIME VALUE\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        return(\r\n          { x: date, y: e.minutesEarlyWoke, dateLabel: dateLabel}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.dateLabel} \\n${datum.y} min`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2>Minutes Early Awake</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MinutesEarlyWokeChart; \r\n\r\nMinutesEarlyWokeChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",["136"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip, VictoryStack } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass ArousalDurationChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      console.log(res);\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          arousalDuration: x.arousalDuration\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        console.log(res);\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            arousalDuration: x.arousalDuration\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data = [];\r\n    if (chartInfo.length > 1) {\r\n      data =  chartInfo.filter(napObj => napObj.arousalDuration).map((e, i, arr) => {\r\n        const durations = e.arousalDuration.match(/\\d+/g).map(x => Number(x));\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        let durationData = [];\r\n        for (let i = 0; i < durations.length; i++) {\r\n          durationData = [...durationData, \r\n            { x: date, y: durations[i], dateLabel: dateLabel}\r\n          ];\r\n        }\r\n        return(durationData);\r\n      });\r\n    }\r\n    //SORT DATA INTO AROUSAL1 AROUSAL2 AROUSAL3... \r\n    //FIRST FILL AROUSALS WITH CORRECT # EMPTY ARRAYS\r\n    //then do a forEach, and you need  \r\n\r\n    const maxNumberArousals = Math.max(...data.map(x => x.length));\r\n    const arousals = [];\r\n    const bars = [];\r\n    //find the date with the most arousals, and push this many arrays to 'arousals'\r\n    //data.length only gives how many dates. \r\n    for (let i = 0; i < maxNumberArousals; i++){\r\n      arousals.push([]);\r\n    }\r\n    data.forEach((x, i) => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        if (x[i]){\r\n          arousals[i].push(x[i]);\r\n        }\r\n      }\r\n    })\r\n    let firstDate;\r\n    let lastDate;\r\n    if (arousals[0]) {\r\n      firstDate = arousals[0][0].x;\r\n      lastDate = arousals[0][arousals[0].length - 1].x;\r\n    }\r\n\r\n    const createBars = () => {\r\n      for (let i = 0; i < maxNumberArousals; i++){\r\n        bars.push(\r\n          <VictoryBar\r\n            key={i}\r\n            data={arousals[i]}\r\n            barWidth={() => {\r\n              let dateDiff;\r\n              if (data) {\r\n                dateDiff = lastDate - firstDate;\r\n              }\r\n              return(\r\n                dateDiff < 10 ? 18\r\n                : dateDiff < 20 ? 8\r\n                : 4 \r\n              );\r\n            }}\r\n            labels={({ datum }) => {\r\n              return(`${datum.dateLabel} \\n${datum.y} min`);\r\n            }}\r\n            labelComponent={\r\n              <VictoryTooltip\r\n                flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n              />\r\n            }\r\n          />\r\n        )\r\n      }\r\n    }\r\n    createBars();\r\n\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryStack>\r\n                {[...bars]}\r\n              </VictoryStack>\r\n            </VictoryChart>\r\n            <h2>Arousal Durations</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ArousalDurationChart; \r\n\r\nArousalDurationChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",["137","138"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass QualityRatingChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          qualityRating: x.qualityRating\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            qualityRating: x.qualityRating\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.qualityRating || napObj.qualityRating === 0).map((e, i, arr) => {\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        var weekday = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n        var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const longDateLabel = `${weekday[dateLabelPrimer.getDay()]}, ${month[dateLabelPrimer.getMonth()]} ${dateLabelPrimer.getDate()}`;\r\n        return(\r\n          { x: date, y: e.qualityRating, dateLabel: longDateLabel}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y}`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.dateLabel} \\n${datum.y} out of 5`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2>Sleep Quality Rating</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QualityRatingChart; \r\n\r\nQualityRatingChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",["139","140"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {url, c, victoryAxisStyle} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass SleepAidItemChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    axios.post(urlGetData, {user: this.props.loggedInUser})\r\n    .then(res => {\r\n      let newChartInfo = [];\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          sleepAidItem: x.sleepAidItem\r\n        }];\r\n        return null;\r\n      })\r\n      this.setState({chartInfo: newChartInfo});\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser){\r\n      axios.post(urlGetData, {user: this.props.loggedInUser})\r\n      .then(res => {\r\n        let newChartInfo = [];\r\n        res.data.map(x => {\r\n          newChartInfo = [...newChartInfo, {\r\n            date: x.date,\r\n            sleepAidItem: x.sleepAidItem\r\n          }];\r\n          return null;\r\n        })\r\n        this.setState({chartInfo: newChartInfo});\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 1) {\r\n      data = chartInfo.filter(napObj => napObj.sleepAidItem || napObj.sleepAidItem === 0).map((e, i, arr) => {\r\n        const date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        xAxisTickValues = [...xAxisTickValues, date];\r\n        const dateLabelPrimer = new Date(Date.parse(e.date));\r\n        const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n        const firstDate = Math.floor(Date.parse(arr[0].date)/1000/86400);\r\n        const lastDate = Math.floor(Date.parse(arr[arr.length - 1].date)/1000/86400);\r\n        const dateDiff = lastDate - firstDate;\r\n        if (dateDiff < 15) {\r\n          dateLabels = [...dateLabels, dateLabel];\r\n        } else {\r\n          if (date % 2 === 0){\r\n            dateLabels = [...dateLabels, null]\r\n          } else {\r\n            dateLabels = [...dateLabels, dateLabel];\r\n          }\r\n        }\r\n        const sleepAidMg = e.sleepAidItem.match(/\\d+/g);\r\n        const sleepAidItem = e.sleepAidItem.match(/(?<=\\s+)[A-Za-z]+/g)[0];\r\n        var weekday = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n        var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const longDateLabel = `${weekday[dateLabelPrimer.getDay()]}, ${month[dateLabelPrimer.getMonth()]} ${dateLabelPrimer.getDate()}`;\r\n        return(\r\n          { x: date, y: sleepAidMg, dateLabel: longDateLabel, sleepAidItem: sleepAidItem}\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} mg/oz`}\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[0].x; \r\n                    lastDate = data[data.length - 1].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  if (datum.sleepAidItem){\r\n                    const sleepAidItem = datum.sleepAidItem.toLowerCase();\r\n                    return(\r\n                      `${datum.y}${sleepAidItem === 'alcohol' ? 'oz' : 'mg'} ${datum.sleepAidItem}\\n${datum.dateLabel}`\r\n                    );\r\n                  }\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={{ stroke: \"tomato\", strokeWidth: 2 }}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n            <h2>Sleep Aid Item</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SleepAidItemChart; \r\n\r\nSleepAidItemChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":11,"column":14,"nodeType":"147","messageId":"148","endLine":11,"endColumn":15},{"ruleId":"145","severity":1,"message":"149","line":16,"column":21,"nodeType":"147","messageId":"148","endLine":16,"endColumn":24},{"ruleId":"145","severity":1,"message":"150","line":16,"column":26,"nodeType":"147","messageId":"148","endLine":16,"endColumn":29},{"ruleId":"145","severity":1,"message":"151","line":26,"column":9,"nodeType":"147","messageId":"148","endLine":26,"endColumn":17},{"ruleId":"145","severity":1,"message":"152","line":48,"column":9,"nodeType":"147","messageId":"148","endLine":48,"endColumn":22},{"ruleId":"145","severity":1,"message":"153","line":65,"column":9,"nodeType":"147","messageId":"148","endLine":65,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":39,"column":6,"nodeType":"156","endLine":39,"endColumn":13,"suggestions":"157"},{"ruleId":"145","severity":1,"message":"158","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":7,"column":14,"nodeType":"147","messageId":"148","endLine":7,"endColumn":15},{"ruleId":"145","severity":1,"message":"159","line":62,"column":15,"nodeType":"147","messageId":"148","endLine":62,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":98,"column":15,"nodeType":"162","endLine":98,"endColumn":65},{"ruleId":"145","severity":1,"message":"158","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"163","line":4,"column":78,"nodeType":"147","messageId":"148","endLine":4,"endColumn":92},{"ruleId":"145","severity":1,"message":"164","line":4,"column":94,"nodeType":"147","messageId":"148","endLine":4,"endColumn":108},{"ruleId":"145","severity":1,"message":"146","line":7,"column":14,"nodeType":"147","messageId":"148","endLine":7,"endColumn":15},{"ruleId":"145","severity":1,"message":"165","line":55,"column":15,"nodeType":"147","messageId":"148","endLine":55,"endColumn":26},{"ruleId":"145","severity":1,"message":"158","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":7,"column":14,"nodeType":"147","messageId":"148","endLine":7,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":82,"column":15,"nodeType":"162","endLine":82,"endColumn":66},{"ruleId":"145","severity":1,"message":"158","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"164","line":3,"column":78,"nodeType":"147","messageId":"148","endLine":3,"endColumn":92},{"ruleId":"145","severity":1,"message":"146","line":6,"column":14,"nodeType":"147","messageId":"148","endLine":6,"endColumn":15},{"ruleId":"145","severity":1,"message":"158","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"166","line":3,"column":64,"nodeType":"147","messageId":"148","endLine":3,"endColumn":76},{"ruleId":"145","severity":1,"message":"146","line":6,"column":14,"nodeType":"147","messageId":"148","endLine":6,"endColumn":15},{"ruleId":"145","severity":1,"message":"167","line":6,"column":17,"nodeType":"147","messageId":"148","endLine":6,"endColumn":28},{"ruleId":"145","severity":1,"message":"168","line":6,"column":30,"nodeType":"147","messageId":"148","endLine":6,"endColumn":58},{"ruleId":"160","severity":1,"message":"161","line":81,"column":17,"nodeType":"162","endLine":81,"endColumn":68},{"ruleId":"145","severity":1,"message":"146","line":5,"column":14,"nodeType":"147","messageId":"148","endLine":5,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":90,"column":17,"nodeType":"162","endLine":90,"endColumn":68},{"ruleId":"145","severity":1,"message":"169","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":20},{"ruleId":"141","replacedBy":"170"},{"ruleId":"143","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":35,"column":13,"nodeType":"174","endLine":35,"endColumn":43},{"ruleId":"172","severity":1,"message":"173","line":36,"column":13,"nodeType":"174","endLine":36,"endColumn":43},{"ruleId":"172","severity":1,"message":"173","line":47,"column":13,"nodeType":"174","endLine":47,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":5,"column":14,"nodeType":"147","messageId":"148","endLine":5,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":92,"column":17,"nodeType":"162","endLine":92,"endColumn":68},{"ruleId":"145","severity":1,"message":"146","line":5,"column":14,"nodeType":"147","messageId":"148","endLine":5,"endColumn":15},{"ruleId":"145","severity":1,"message":"146","line":5,"column":14,"nodeType":"147","messageId":"148","endLine":5,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":94,"column":17,"nodeType":"162","endLine":94,"endColumn":68},{"ruleId":"145","severity":1,"message":"146","line":5,"column":14,"nodeType":"147","messageId":"148","endLine":5,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":95,"column":17,"nodeType":"162","endLine":95,"endColumn":68},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","'handleNewLoggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["177"],"'Container' is defined but never used.","'dateDiff' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'dateTimeEnd' is assigned a value but never used.","'VictoryLabel' is defined but never used.","'getLongDate' is defined but never used.","'VictoryScatterLineComplement' is defined but never used.","'shootingStar' is defined but never used.",["175"],["176"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"180","text":"181"},[1756,1763],"[checkExistingData, props]"]