[{"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js":"1","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js":"2","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js":"4","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js":"5","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js":"6","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js":"7","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js":"8","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js":"9","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js":"10","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js":"11","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js":"12","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js":"13","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js":"14","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js":"15","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js":"16","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js":"17","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js":"18","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js":"19","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js":"20","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js":"21"},{"size":661,"mtime":1609548489364,"results":"22","hashOfConfig":"23"},{"size":13400,"mtime":1610761209247,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":16250,"mtime":1610683269054,"results":"26","hashOfConfig":"23"},{"size":6012,"mtime":1610689112928,"results":"27","hashOfConfig":"23"},{"size":8916,"mtime":1610761751988,"results":"28","hashOfConfig":"23"},{"size":5439,"mtime":1610760427112,"results":"29","hashOfConfig":"23"},{"size":3885,"mtime":1610759666487,"results":"30","hashOfConfig":"23"},{"size":3768,"mtime":1610759859565,"results":"31","hashOfConfig":"23"},{"size":3632,"mtime":1610759788646,"results":"32","hashOfConfig":"23"},{"size":3682,"mtime":1610759727999,"results":"33","hashOfConfig":"23"},{"size":4681,"mtime":1610760001547,"results":"34","hashOfConfig":"23"},{"size":550,"mtime":1610073486623,"results":"35","hashOfConfig":"23"},{"size":2871,"mtime":1610427695167,"results":"36","hashOfConfig":"23"},{"size":7417,"mtime":1610686373193,"results":"37","hashOfConfig":"23"},{"size":1309,"mtime":1610684940304,"results":"38","hashOfConfig":"23"},{"size":4484,"mtime":1610759843258,"results":"39","hashOfConfig":"23"},{"size":5660,"mtime":1610760133782,"results":"40","hashOfConfig":"23"},{"size":4653,"mtime":1610759947064,"results":"41","hashOfConfig":"23"},{"size":4887,"mtime":1610760072436,"results":"42","hashOfConfig":"23"},{"size":1340,"mtime":1610516763531,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asvjz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\index.js",[],["93","94"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\App.js",["95","96","97","98","99"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\AddData.js",["100","101"],"import { useState, useEffect } from 'react';\r\nimport { Alert, Button, Container, Form, Spinner } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Calendar } from 'react-calendar';\r\nimport './AddData.scss';\r\nimport axios from 'axios';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport {c, getClickedDate, url} from './global_items';\r\n\r\nconst urlCheckExistingData = `${url}check-existing-data`;\r\nconst urlUploadData = `${url}upload-data`;\r\n\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction AddData (props) {\r\n  const [value, onChange] = useState(new Date());\r\n  const [date, setDate] = useState(null);\r\n  const [existingDataAlert, setExistingDataAlert] = useState(false);\r\n  const [existingNapStart, setExistingNapStart] = useState('');\r\n  const [existingNapEnd, setExistingNapEnd] = useState('');\r\n  const [sleepAidItem, setSleepAidItem] = useState('');\r\n  const [sleepAidMg, setSleepAidMg] = useState('');\r\n  const [enterBedTime, setEnterBedTime] = useState('');\r\n  const [lightsOffTime, setLightsOffTime] = useState('');\r\n  const [timeToFallAsleep, setTimeToFallAsleep] = useState('');\r\n  const [numberTimesArousal, setNumberTimesArousal] = useState('');\r\n  const [arousalDuration, setArousalDuration] = useState('');\r\n  const [morningWakeTime, setMorningWakeTime] = useState('');\r\n  const [exitBedTime, setExitBedTime] = useState('');\r\n  const [minutesEarlyWoke, setMinutesEarlyWoke] = useState('');\r\n  const [qualityRating, setQualityRating] = useState('');\r\n  const [clickedDate, setClickedDate] = useState(null);\r\n  const [checkExistingDataCompleted, setCheckExistingDataCompleted] = useState(false);\r\n  const [submittedMessage, setSubmittedMessage] = useState(false); \r\n  useEffect(() => {\r\n    let d = new Date();\r\n    setDate(d);\r\n    checkExistingData(d);\r\n  }, [props]);\r\n  useEffect(() => {\r\n    setSubmittedMessage(false);\r\n  }, [clickedDate])\r\n\r\n  const checkExistingData = (clickedDate) => {\r\n    setCheckExistingDataCompleted(false);\r\n    if (!props.loggedInUser){return};\r\n    axios.post(urlCheckExistingData, {\r\n      clickedDate: getClickedDate(clickedDate, 'mysql'),\r\n      user: props.loggedInUser\r\n    })\r\n    .then(res => {\r\n      setClickedDate(getClickedDate(clickedDate, 'mysql'));\r\n      if (res.data.length > 0){\r\n\r\n        setExistingNapStart(res.data[0].napStartTime ? res.data[0].napStartTime : '');\r\n        setExistingNapEnd(res.data[0].napEndTime ? res.data[0].napEndTime : '');\r\n        setSleepAidItem(res.data[0].sleepAidItem ? res.data[0].sleepAidItem : '');\r\n        setSleepAidMg(res.data[0].sleepAidMg ? res.data[0].sleepAidMg : '');\r\n        setEnterBedTime(res.data[0].enterBedTime ? res.data[0].enterBedTime : '');\r\n        setLightsOffTime(res.data[0].lightsOffTime ? res.data[0].lightsOffTime : '');\r\n        setTimeToFallAsleep(res.data[0].timeToFallAsleep ? res.data[0].timeToFallAsleep : '');\r\n        setNumberTimesArousal(res.data[0].numberTimesArousal ? res.data[0].numberTimesArousal : '');\r\n        setArousalDuration(res.data[0].arousalDuration ? res.data[0].arousalDuration : '');\r\n        setMorningWakeTime(res.data[0].morningWakeTime ? res.data[0].morningWakeTime : '');\r\n        setExitBedTime(res.data[0].exitBedTime ? res.data[0].exitBedTime : '');\r\n        setMinutesEarlyWoke(res.data[0].minutesEarlyWoke ? res.data[0].minutesEarlyWoke : '');\r\n        setQualityRating(res.data[0].qualityRating ? res.data[0].qualityRating : '');\r\n\r\n        setExistingDataAlert(true);\r\n      } else {\r\n        const dataFuncs = [setExistingNapStart, setExistingNapEnd, setSleepAidItem, setSleepAidMg, setEnterBedTime, setLightsOffTime, setTimeToFallAsleep, setNumberTimesArousal, setArousalDuration, setMorningWakeTime, setExitBedTime, setMinutesEarlyWoke, setQualityRating];\r\n        for (let i = 0; i < dataFuncs.length; i++){\r\n          dataFuncs[i]('');\r\n        }\r\n        setExistingDataAlert(false);\r\n      }\r\n      setCheckExistingDataCompleted(true);\r\n    })\r\n  } \r\n  const handleDataSubmit = () => {\r\n    axios.post(urlUploadData, {\r\n      //Ternarys were set to not give a value for SQL when there is none. Helps with creating graphs to skip data.\r\n      user: props.loggedInUser,\r\n      date: clickedDate === '' ? null : clickedDate,\r\n      napStartTime: existingNapStart === '' ? null : existingNapStart,\r\n      napEndTime: existingNapEnd === '' ? null : existingNapEnd,\r\n      sleepAidItem: sleepAidItem === '' ? null : sleepAidItem,\r\n      sleepAidMg: sleepAidMg === '' ? null : sleepAidMg,\r\n      enterBedTime: enterBedTime === '' ? null : enterBedTime,\r\n      lightsOffTime: lightsOffTime === '' ? null : lightsOffTime,\r\n      timeToFallAsleep: timeToFallAsleep === '' ? null : timeToFallAsleep,\r\n      numberTimesArousal: numberTimesArousal === '' ? null : numberTimesArousal,\r\n      arousalDuration: arousalDuration === '' ? null : arousalDuration,\r\n      morningWakeTime: morningWakeTime === '' ? null : morningWakeTime,\r\n      exitBedTime: exitBedTime === '' ? null : exitBedTime,\r\n      minutesEarlyWoke: minutesEarlyWoke === '' ? null : minutesEarlyWoke,\r\n      qualityRating: qualityRating === '' ? null : qualityRating\r\n    })\r\n    .then(() => {\r\n      setSubmittedMessage(true);\r\n    })\r\n  };\r\n  let dateHeading;\r\n  let dateClickedYear;\r\n  let dateHeadingYesterday;\r\n  if (date){\r\n    const dateInMsYesterday = new Date(Date.parse(date) - 1000*86400);\r\n    dateHeadingYesterday = getClickedDate(dateInMsYesterday);\r\n    dateHeading = getClickedDate(date);\r\n    dateClickedYear = date.getFullYear();\r\n  }\r\n  const handleFormInput = (e) => {\r\n    if (e.target.getAttribute('id_val') === 'nap-start-time') {\r\n      setExistingNapStart(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'nap-end-time') {\r\n      setExistingNapEnd(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-item'){\r\n      setSleepAidItem(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'sleep-aid-mg'){\r\n      setSleepAidMg(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'enter-bed-time'){\r\n      setEnterBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'lights-off-time'){\r\n      setLightsOffTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'time-to-fall-asleep'){\r\n      setTimeToFallAsleep(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'number-times-arousal'){\r\n      setNumberTimesArousal(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'arousal-duration'){\r\n      setArousalDuration(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'morning-wake-time'){\r\n      setMorningWakeTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'exit-bed-time'){\r\n      setExitBedTime(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'minutes-early-woke'){\r\n      setMinutesEarlyWoke(e.target.value);\r\n    } else if (e.target.getAttribute('id_val') === 'quality-rating'){\r\n      setQualityRating(e.target.value);\r\n    }\r\n  }\r\n  const curYear = (new Date()).getFullYear();\r\n  return(\r\n    <>\r\n      <Container \r\n        className={\r\n          `add-data add-data-container ${props.nightMode && 'add-data-container-night'}`\r\n        }\r\n      >\r\n        <h1>Add Data</h1>\r\n        <h2>Pick a Date to Add Data</h2> \r\n        <div className=\"add-data-calendar-container\">\r\n          <Calendar\r\n            onChange={onChange}\r\n            value={value}\r\n            view={'month'}\r\n            onClickDay={(value, event) => {\r\n              setDate(value);\r\n              checkExistingData(value);\r\n            }}\r\n          />\r\n        </div>\r\n        {(date && props.loggedInUser) ?\r\n          <>\r\n            <h2>Adding data for {getClickedDate(date) === getClickedDate((new Date())) && 'today: '}<strong>{dateHeading}</strong>: </h2>\r\n            {checkExistingDataCompleted ?\r\n              <>\r\n                {(dateClickedYear < curYear || dateClickedYear > curYear) && \r\n                  <Alert variant=\"warning\">The day you clicked is not in the current year of {curYear}. If you're lost, click the chevron symbols (« or ») at the top of the calendar to scroll between years.</Alert>\r\n                }\r\n                {existingDataAlert && \r\n                  <Alert variant=\"success\">You have already submitted data for {dateHeading}. Your previous data has been autofilled below. You can resubmit if you would like to add or change data.</Alert>\r\n                }\r\n                <Alert variant=\"primary\">Data from inputs asking about things that took place \"yesterday\" or \"last night\" will be dated on the graphs as {dateHeadingYesterday}.</Alert>\r\n                <Form className=\"add-data-form\">\r\n                  <Form.Label>1a. Yesterday I started my first nap at ___. (Example: <span className=\"add-data-form-example\">2:30 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"nap-start-time\"\r\n                    type=\"time\" \r\n                    className={`add-data-form-time ${existingNapStart !== '' && \"existing-data\"}`}\r\n                    value={existingNapStart} \r\n                    placeholder={existingNapStart} \r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>1a. Yesterday I ended my last nap at ___. (Example: <span className=\"add-data-form-example\">3:15 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"nap-end-time\"\r\n                    className={existingNapEnd !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={existingNapEnd}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>2. Last night I took ___ mg/oz of ___ as a sleep aid. (If none, leave blank. Unit \"mg\" is for medicine, \"oz\" is for alcohol - but the unit doesn't need to be included in the input. Example: <span className=\"add-data-form-example\">5 Ambien</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"sleep-aid-item\"\r\n                    className={sleepAidItem !== '' && \"existing-data\"}\r\n                    type=\"text\" \r\n                    value={sleepAidItem}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>3a. Last night I got into bed at ___.  (Example: <span className=\"add-data-form-example\">11:00 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"enter-bed-time\"\r\n                    className={enterBedTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={enterBedTime}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>3b. Last night I turned off the lights and tried to fall asleep at ___. (Example: <span className=\"add-data-form-example\">11:40 PM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"lights-off-time\"\r\n                    className={lightsOffTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={lightsOffTime}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>4. After I turned off the lights, it took me about ___ minutes to fall asleep. (Example: <span className=\"add-data-form-example\">75 min</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"time-to-fall-asleep\"\r\n                    className={timeToFallAsleep !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={timeToFallAsleep}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>5. I woke up from sleep ___ times. (Do not count when you finally woke up here.) (Example: <span className=\"add-data-form-example\">3 times</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"number-times-arousal\"\r\n                    className={numberTimesArousal !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={numberTimesArousal}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>6. My arousals lasted ___ minutes. (List each arousal seperately. You can simply list the arousals as numbers seperated by spaces) (Example for arousals of 25min, 40min, and 10min: <span className=\"add-data-form-example\">25 40 10</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"arousal-duration\"\r\n                    className={arousalDuration !== '' && \"existing-data\"}\r\n                    type=\"text\" \r\n                    value={arousalDuration}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>7. Today I woke up at ___. (Note: this is when you finally woke up.) (Example: <span className=\"add-data-form-example\">6:30 AM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"morning-wake-time\"\r\n                    className={morningWakeTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={morningWakeTime}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>8. Today I got out of bed for the day at ___. (Example: <span className=\"add-data-form-example\">06:45 AM</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"exit-bed-time\"\r\n                    className={exitBedTime !== '' && \"existing-data\"}\r\n                    type=\"time\" \r\n                    value={exitBedTime}\r\n                    onChange={handleFormInput}\r\n                    />\r\n                  <Form.Label>9. Today I woke up ___ minutes earlier than I wanted to. (Example: <span className=\"add-data-form-example\">0</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"minutes-early-woke\"\r\n                    className={minutesEarlyWoke !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={minutesEarlyWoke}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                  <Form.Label>\r\n                    10.  I would rate the quality of last night's sleep as 1 = very poor, 2 = poor, 3 = fair, 4 = good, or 5 = excellent. (Example: <span className=\"add-data-form-example\">3</span>)</Form.Label>\r\n                  <Form.Control \r\n                    id_val=\"quality-rating\"\r\n                    className={qualityRating !== '' && \"existing-data\"}\r\n                    type=\"number\" \r\n                    value={qualityRating}\r\n                    onChange={handleFormInput}\r\n                  />\r\n                </Form>\r\n                {submittedMessage &&\r\n                  <>\r\n                    <Alert variant=\"success\" className=\"alert-bootstrap add-data-alert-submitted\">Your data has been submitted!</Alert>\r\n                    <Button as={Link} to='/sleep/' variant=\"info\" className=\"add-data-button-go-to-data-overview\">Go to Overview</Button>\r\n                    <a href=\"#top\" className=\"add-data-link-go-to-data-overview\">\r\n                      <Button variant=\"info\" className=\"add-data-button-go-to-data-overview\">Add More Data</Button>\r\n                    </a>\r\n                  </>\r\n                }\r\n                <Button className=\"add-data-submit-button\" onClick={handleDataSubmit}>Submit</Button>\r\n                <div className=\"spacer\"></div>\r\n              </>\r\n            : \r\n              <>\r\n                <Spinner variant=\"success\" animation=\"border\" role=\"status\" id=\"spinner-centered\" className=\"spinner-centered\"><span className=\"sr-only\">Loading...</span></Spinner>\r\n                <div className=\"add-data-spinner-padding-for-night-mode\"></div>\r\n              </>\r\n            }\r\n          </>\r\n          :\r\n          <>\r\n            <Alert variant=\"warning\">Please log in to add data.</Alert>\r\n            <div className=\"add-data-spacer-logged-out\"></div>\r\n          </>\r\n        }\r\n      </Container>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default AddData;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NavbarContainer.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\global_items.js",["102"],"import {VictoryScatter, VictoryTooltip} from 'victory';\r\nimport axios from 'axios';\r\nconst url = 'http://localhost:4000/sleep/api/';\r\n/*\r\nconst url = 'https://omarshishani.com/sleep/api/';\r\n*/\r\n\r\nexport function createChartInfo(urlGetData, loggedInUser, chart, callback, napEndTime) {\r\n  let newChartInfo = [];\r\n  axios.post(urlGetData, {user: loggedInUser})\r\n  .then(res => {\r\n    if (chart === 'napTimes'){\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date, \r\n          napStartTime: x.napStartTime,\r\n          napEndTime: x.napEndTime\r\n        }];\r\n        return null;\r\n      })\r\n    } else {\r\n      res.data.map(x => {\r\n        newChartInfo = [...newChartInfo, {\r\n          date: x.date,\r\n          [chart]: x[chart]\r\n        }];\r\n        return null;\r\n      })\r\n    }\r\n    callback(newChartInfo);\r\n    return newChartInfo;\r\n  })\r\n  .catch(err => console.log(err))\r\n};\r\n\r\nfunction formatAMPM(date) {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+ minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n};\r\n\r\nconst createData1 = (chartInfo, range, chart, showYesterdaysDate, barGraph) => {\r\n  return(\r\n    chartInfo.filter((dataObj, i) => (i < range && dataObj[chart]) || (i < range && dataObj[chart] === 0)).map((e, i, arr) => {\r\n      let dateTime = new Date(`January 1, 2000 ${e[chart]}`);\r\n      if (chart === 'enterBedTime' || chart === 'lightsOffTime'){\r\n        if (Date.parse(dateTime) > 946713600000 && Date.parse(dateTime) < 946756800000){\r\n          dateTime = new Date(Date.parse(dateTime) + 86400*1000);\r\n        }\r\n      }\r\n      let date;\r\n      let dateLabelPrimer;\r\n      if (showYesterdaysDate) {\r\n\r\n        date = yesterdaysDate(e.date);\r\n        dateLabelPrimer = yesterdaysDateLabelPrimer(e.date);\r\n      } else {\r\n        date = Math.floor(Date.parse(e.date)/1000/86400);\r\n        dateLabelPrimer = new Date(Date.parse(e.date));\r\n      }\r\n      if (chart === 'sleepAidItem'){\r\n        let sleepAidItem;\r\n        let sleepAidMg;\r\n        if (e.sleepAidItem.match(/(?<=\\s+)[A-Za-z]+/g)){\r\n          sleepAidItem = e.sleepAidItem.match(/(?<=\\s+)[A-Za-z]+/g)[0];\r\n          sleepAidMg = e.sleepAidItem.match(/\\d+/g);\r\n        } else {\r\n          sleepAidItem = 'None';\r\n          sleepAidMg = null;\r\n        }\r\n        c('sleepAidItem', sleepAidItem)\r\n        return(\r\n          { x: date, y: sleepAidMg, dateLabel: getLongDate(dateLabelPrimer), sleepAidItem: sleepAidItem}\r\n        );\r\n      } else if (chart === 'arousalDuration'){\r\n        const durations = e.arousalDuration.match(/\\d+/g).map(x => Number(x));\r\n        let durationData = [];\r\n        for (let i = 0; i < durations.length; i++) {\r\n          durationData = [...durationData, \r\n            { x: date, y: durations[i], dateLabel: getLongDate(dateLabelPrimer)}\r\n          ];\r\n        }\r\n        return(durationData);  \r\n      } else if (chart === 'napStartTime'){\r\n        const dateTimeEnd = new Date(`January 1, 2000 ${e.napEndTime}`);\r\n        return(\r\n          { x: date, y0: dateTime, y: dateTimeEnd, dateLabel: getLongDate(dateLabelPrimer), barWidthDate: date}\r\n        );\r\n      } else if (barGraph){\r\n        return { x: date, y: e[chart], dateLabel: getLongDate(dateLabelPrimer), timeLabel: `${e[chart]} min` }\r\n      } else {\r\n        return { x: date, y: dateTime, dateLabel: getLongDate(dateLabelPrimer), timeLabel: formatAMPM(dateTime) }\r\n      }\r\n    })\r\n  ) \r\n}\r\nconst createXAxisTickValues = (chartInfo, range, chart, showYesterdaysDate) => {\r\n  let xAxisTickValues = [];\r\n  chartInfo.filter((dataObj, i) => i < range && dataObj[chart]).forEach((e, i, arr) => {\r\n    let date;\r\n    if (showYesterdaysDate) {\r\n      date = yesterdaysDate(e.date);\r\n    } else {\r\n      date = Math.floor(Date.parse(e.date)/1000/86400);\r\n    }\r\n    xAxisTickValues = [...xAxisTickValues, date];\r\n  })\r\n  return xAxisTickValues;\r\n}\r\nconst createDateLabels = (chartInfo, range, chart, showYesterdaysDate) => {\r\n  let dateLabels = [];\r\n  chartInfo.filter((dataObj, i) => i < range && dataObj[chart]).forEach((e, i, arr) => {\r\n    let dateLabelPrimer;\r\n    \r\n    if (showYesterdaysDate) {\r\n      dateLabelPrimer = yesterdaysDateLabelPrimer(e.date);\r\n    } else {\r\n      dateLabelPrimer = new Date(Date.parse(e.date));\r\n    }\r\n\r\n\r\n    const dateLabel = `${dateLabelPrimer.getMonth()+1}/${dateLabelPrimer.getDate()}`; \r\n    dateLabels = [...dateLabels, dateLabel];\r\n  })\r\n  return dateLabels;\r\n}\r\n\r\nconst yesterdaysDateLabelPrimer = (date) => {\r\n  return new Date(Date.parse(date) - 1000*86400);\r\n}\r\nconst yesterdaysDate = (date) => {\r\n  return Math.floor(Date.parse(date)/1000/86400) - 1;\r\n};\r\n\r\nconst flyoutStyleNight = (nightMode) => (\r\n  { \r\n    stroke: nightMode ? \"#00ff2b\" : \"tomato\", \r\n    fill: nightMode ? 'black' : '#fff5eb',\r\n    strokeWidth: 2 \r\n  }\r\n)\r\n\r\nconst getLongDate = (date) => {\r\n  var weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n  const longDateLabel = `${weekday[date.getDay()]}, ${month[date.getMonth()]} ${date.getDate()}`;\r\n  return longDateLabel;\r\n}\r\n// exitBedCharts sleepQualityCharts  \r\nconst victoryTooltipLabelStyle = (nightMode) => (\r\n  { \r\n    labels: {fill: nightMode ? 'white' : 'black'}\r\n  }\r\n);\r\n\r\nconst victoryLineStyle = (nightMode, chartGroup) => (nightMode ? \r\n  {data: {\r\n    stroke: \r\n      chartGroup === 'enterBedCharts' ? '#00ffcb'\r\n      : chartGroup === 'exitBedCharts' ? 'rgb(216 255 0)'\r\n      : null\r\n      ,\r\n    transition: `stroke ${nightModeTransitionTime}`\r\n  }}\r\n  : \r\n  {data: {\r\n    stroke: \r\n      chartGroup === 'enterBedCharts' ? '#06790f'\r\n      : chartGroup === 'exitBedCharts' ? 'rgb(164 0 0)'\r\n      : null\r\n      ,\r\n    transition: `stroke ${nightModeTransitionTime}`\r\n  }}\r\n);\r\n\r\nconst VictoryScatterLineComplement = (data, nightMode, chartGroup) =>\r\n<VictoryScatter\r\n  style={\r\n    { \r\n      data: \r\n        { fill: \r\n          chartGroup === 'enterBedCharts' ? \r\n            nightMode ? \"red\" : \"tomato\" \r\n          :\r\n          chartGroup === 'exitBedCharts' ?   \r\n            nightMode ? \"rgb(0, 255, 43)\" : \"#00c95a\"\r\n          : \r\n          nightMode ? \"rgb(0, 255, 43)\" : \"#00c95a\", \r\n        }, \r\n      labels: {fill: nightMode ? 'white' : 'black'}\r\n    }\r\n  }\r\n  size={4}\r\n  data={data}\r\n  labels={({ datum }) => {\r\n    if (datum){\r\n      return(\r\n        `${datum.timeLabel}\\n${datum.dateLabel}`\r\n      );\r\n    }\r\n  }}\r\n  labelComponent={\r\n    <VictoryTooltip\r\n      flyoutStyle={{ \r\n        stroke: \r\n          chartGroup === 'enterBedCharts' ? \r\n            nightMode ? \"#00ff2b\" : \"tomato\" \r\n          :\r\n          chartGroup === 'exitBedCharts' ?   \r\n            nightMode ? \"rgb(0 255 161)\" : \"tomato\"\r\n          : \r\n          nightMode ? \"#00ff2b\" : \"tomato\",\r\n        fill: nightMode ? 'black' : '#fff5eb',\r\n        strokeWidth: 2 \r\n      }}\r\n    />\r\n  }\r\n/>;\r\n\r\nconst lightGrey = 'rgb(236, 239, 241)';\r\nconst darkGrey = '#212529';\r\nconst victoryAxisStyle = (axis, nightMode) => (nightMode ? \r\n  {\r\n    tickLabels: {\r\n      fill: 'white',\r\n      transition: `fill ${nightModeTransitionTime}`\r\n    }, \r\n    grid: {\r\n        stroke: axis === 'y' ? lightGrey : darkGrey, \r\n        strokeDasharray: '7',\r\n        transition: `stroke ${nightModeTransitionTime}`\r\n    }\r\n  }\r\n  : \r\n  {\r\n    grid: {\r\n      stroke: axis === 'y' ? darkGrey : lightGrey, \r\n      strokeDasharray: '7',\r\n      transition: `stroke ${nightModeTransitionTime}`\r\n    }\r\n  }\r\n)\r\n\r\nconst nightModeTransitionTime = '0.5s';\r\n\r\nfunction c (msg, input) {return(console.log(`${msg}: `, input))};\r\n\r\nfunction getClickedDate(date, type){\r\n  var weekday = new Array(7);\r\n  weekday[0] = \"Sunday\";\r\n  weekday[1] = \"Monday\";\r\n  weekday[2] = \"Tuesday\";\r\n  weekday[3] = \"Wednesday\";\r\n  weekday[4] = \"Thursday\";\r\n  weekday[5] = \"Friday\";\r\n  weekday[6] = \"Saturday\";\r\n  \r\n  var month = [];\r\n  month[0] = \"Jan\";\r\n  month[1] = \"Feb\";\r\n  month[2] = \"Mar\";\r\n  month[3] = \"Apr\";\r\n  month[4] = \"May\";\r\n  month[5] = \"Jun\";\r\n  month[6] = \"Jul\";\r\n  month[7] = \"Aug\";\r\n  month[8] = \"Sep\";\r\n  month[9] = \"Oct\";\r\n  month[10] = \"Nov\";\r\n  month[11] = \"Dec\";\r\n  \r\n  return type === 'mysql' ? `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`\r\n  : `${weekday[date.getDay()]}, ${month[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\r\n}\r\n\r\nconst varToString = varObj => Object.keys(varObj)[0]; \r\n\r\nexport {c, getClickedDate, url, varToString, nightModeTransitionTime, victoryAxisStyle, VictoryScatterLineComplement, getLongDate, victoryLineStyle, flyoutStyleNight, victoryTooltipLabelStyle, yesterdaysDate, yesterdaysDateLabelPrimer, createData1, createDateLabels, createXAxisTickValues};\r\n\r\nexport default url;","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NapTimesChart.js",["103","104","105","106","107","108","109"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\EnterBedTimesChart.js",["110","111","112","113","114","115","116","117"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MorningWakeTimesChart.js",["118","119","120","121","122"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\LightsOffTimesChart.js",["123","124","125","126","127","128","129"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ExitBedTimesChart.js",["130","131","132","133","134"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\TimeToFallAsleepChart.js",["135","136","137","138","139","140","141"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ShootingStarTest.js",["142"],"\r\nimport shootingStar from './images/shooting-star-opt.svg';\r\nimport './HomeLoggedOut.scss';\r\n\r\nfunction ShootingStarTest(){\r\n  return(\r\n    <div className=\"divdiv\" style={{backgroundColor: 'black', width: '100vh', height: '100vh'}}>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg id=\"SVGRoot\" width=\"5\" height=\"5\" version=\"1.1\" viewBox=\"0 0 5 5\">\r\n          <circle cx=\"2.5446\" cy=\"2.4777\" r=\"2.3661\" fill=\"#fff\" stroke-width=\"0\"/>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShootingStarTest;",["143","144"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\HomeLoggedOut.js",["145","146","147"],"import { Button, Container } from 'react-bootstrap';\r\nimport './HomeLoggedOut.scss';\r\nimport graphScreenshot1 from './images/time-out-of-bed-screenshot-square.png';\r\nimport graphScreenshot2 from './images/time-to-fall-asleep-screenshot-square.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLoggedOut() {\r\n  return(\r\n    <>\r\n      <div className=\"home-logged-out-section-1-shooting-star\">\r\n        <svg width=\"60mm\" height=\"60mm\" version=\"1.1\" viewBox=\"0 0 60 60\">\r\n          <defs>\r\n            <filter id=\"filter6059\" x=\"-1.9142e-5\" y=\"-1.9258e-5\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\">\r\n            <feGaussianBlur stdDeviation=\"0.00049892852\"/>\r\n            </filter>\r\n          </defs>\r\n          <path transform=\"matrix(.9426 0 0 .94833 1.2795 2.1897)\" d=\"m-0.75595 60.665 62.555-62.177\" fill=\"none\" filter=\"url(#filter6059)\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"1.3992\"/>\r\n          </svg>\r\n      </div>\r\n      \r\n      <Container className=\"home-logged-out-container\">\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h1>Welcome to Sleep App</h1>\r\n          <div>Improve your sleep.</div>\r\n          <div>Change your life.</div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-2\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-2-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>How It Works</h2>\r\n            <div>Simply input your sleep data each day, and view generated graphs to track your sleep progress.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot1} />\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-3\">\r\n          <div  className=\"home-logged-out-section-background home-logged-out-section-3-background\"></div>\r\n          <div className=\"home-logged-out-section-text\">\r\n            <h2>Why Seeing Data Helps</h2>\r\n            <div>Having a visual record of your sleep habits allows you to compare which factors are affecting your sleep wellness.</div>\r\n          </div>\r\n          <div className=\"home-logged-out-section-2-graphs\">\r\n            <img src={graphScreenshot2} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"home-logged-out-section home-logged-out-section-1\">\r\n          <h2>Better sleep.</h2>\r\n          <h2>Better life.</h2>\r\n          <h2>Starting tonight.</h2>\r\n          <div className=\"home-logged-out-section-3-button-container\">\r\n            <Button as={Link} to={'/sleep/create-account'}>Create Account</Button>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeLoggedOut; ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccount.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\CreateAccountSuccess.js",[],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\MinutesEarlyWokeChart.js",["148","149"],"import React from 'react';\r\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryBar, VictoryLabel, VictoryTooltip } from 'victory';\r\nimport PropTypes from 'prop-types';\r\nimport {url, c, victoryAxisStyle, nightModeTransitionTime, flyoutStyleNight, createData1, createXAxisTickValues, createDateLabels, createChartInfo} from './global_items';\r\n\r\nconst urlGetData = `${url}get-data`;\r\n\r\nclass MinutesEarlyWokeChart extends React.Component {\r\n  state = {\r\n    chartInfo: []\r\n  }\r\n  componentDidMount(){\r\n    if (this.props.loggedInUser && this.props.loggedInUser !== '') {\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    } else { \r\n      createChartInfo(urlGetData, 'sample', 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.loggedInUser !== this.props.loggedInUser && this.props.loggedInUser !== ''){\r\n      createChartInfo(urlGetData, this.props.loggedInUser, 'minutesEarlyWoke', function(response){\r\n        this.setState({chartInfo: response});\r\n      }.bind(this))\r\n    }\r\n  }\r\n  render() {\r\n    const {chartInfo} = this.state;\r\n    let dateLabels = [];\r\n    let xAxisTickValues = [];\r\n    let data;\r\n    if (chartInfo.length > 0) {\r\n      const showYesterdaysDate = false;\r\n      const barGraph = true;\r\n      data = createData1(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      dateLabels = createDateLabels(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n      xAxisTickValues = createXAxisTickValues(chartInfo, this.props.range, 'minutesEarlyWoke', showYesterdaysDate, barGraph);\r\n    }\r\n    return (\r\n      <>\r\n          <div className=\"victory-chart-1-container\">\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              padding={{ left: 70, top: 20, right: 30, bottom: 50 }}\r\n              scale={{y:'number'}}\r\n              domainPadding={{ x: 20, y: 20 }}\r\n              \r\n            >\r\n              <VictoryAxis\r\n                tickValues={xAxisTickValues}\r\n                tickFormat={dateLabels}\r\n                tickLabelComponent={<VictoryLabel dy={0} dx={10} angle={55}/>}\r\n                style={victoryAxisStyle('x', this.props.nightMode)}\r\n                fixLabelOverlap={true}\r\n              />\r\n              <VictoryAxis\r\n                style={{grid:{stroke:'black', strokeDasharray: '7'}}}\r\n                dependentAxis\r\n                tickFormat={(y) => `${y} min` }\r\n                style={victoryAxisStyle('y', this.props.nightMode)}\r\n              />\r\n              <VictoryBar\r\n                style={{\r\n                  data: {\r\n                    fill: this.props.nightMode ? 'rgb(255 52 0)' : 'rgb(186 0 177)', \r\n                    transition: `fill ${nightModeTransitionTime}`\r\n                  },\r\n                  labels: {\r\n                    fill: this.props.nightMode ? 'white' : 'black'\r\n                  }\r\n                }}\r\n                data={data}\r\n                barWidth={() => {\r\n                  let firstDate;\r\n                  let lastDate;\r\n                  let dateDiff;\r\n                  if (data) {\r\n                    firstDate = data[data.length - 1].x; \r\n                    lastDate = data[0].x; \r\n                    dateDiff = lastDate - firstDate;\r\n                  }\r\n                  return(\r\n                    dateDiff < 10 ? 18\r\n                    : dateDiff < 20 ? 8\r\n                    : 4 \r\n                  );\r\n                }}\r\n                labels={({ datum }) => {\r\n                  return(`${datum.y} min\\n${datum.dateLabel}`);\r\n                }}\r\n                labelComponent={\r\n                  <VictoryTooltip\r\n                    flyoutStyle={flyoutStyleNight(this.props.nightMode)}\r\n                  />\r\n                }\r\n              />\r\n            </VictoryChart>\r\n             <h2 className={this.props.nightMode ? \"exit-bed-charts exit-bed-charts-heading exit-bed-charts-heading-night\" : \"exit-bed-charts-heading exit-bed-charts-heading-day\"} title=\"The time you woke up. This could be before you got out of bed.\">Minutes Early Awake</h2>\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MinutesEarlyWokeChart; \r\n\r\nMinutesEarlyWokeChart.propTypes = {\r\n  dates: PropTypes.array\r\n}\r\n           ","C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\ArousalDurationChart.js",["150","151","152","153","154"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\QualityRatingChart.js",["155","156","157","158","159"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\SleepAidItemChart.js",["160","161","162","163","164","165"],"C:\\Users\\HP EliteBook 8470p\\Documents\\Coding\\sleep-app\\src\\NightModeSwitch.js",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":11,"column":14,"nodeType":"172","messageId":"173","endLine":11,"endColumn":15},{"ruleId":"170","severity":1,"message":"174","line":16,"column":36,"nodeType":"172","messageId":"173","endLine":16,"endColumn":39},{"ruleId":"170","severity":1,"message":"175","line":16,"column":41,"nodeType":"172","messageId":"173","endLine":16,"endColumn":44},{"ruleId":"170","severity":1,"message":"176","line":26,"column":9,"nodeType":"172","messageId":"173","endLine":26,"endColumn":17},{"ruleId":"170","severity":1,"message":"177","line":49,"column":9,"nodeType":"172","messageId":"173","endLine":49,"endColumn":22},{"ruleId":"170","severity":1,"message":"171","line":8,"column":9,"nodeType":"172","messageId":"173","endLine":8,"endColumn":10},{"ruleId":"178","severity":1,"message":"179","line":40,"column":6,"nodeType":"180","endLine":40,"endColumn":13,"suggestions":"181"},{"ruleId":null,"fatal":true,"severity":2,"message":"182","line":283,"column":28},{"ruleId":"170","severity":1,"message":"183","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"184","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":7,"column":14,"nodeType":"172","messageId":"173","endLine":7,"endColumn":15},{"ruleId":"170","severity":1,"message":"185","line":7,"column":78,"nodeType":"172","messageId":"173","endLine":7,"endColumn":89},{"ruleId":"170","severity":1,"message":"186","line":7,"column":91,"nodeType":"172","messageId":"173","endLine":7,"endColumn":105},{"ruleId":"170","severity":1,"message":"187","line":7,"column":107,"nodeType":"172","messageId":"173","endLine":7,"endColumn":132},{"ruleId":"188","severity":1,"message":"189","line":65,"column":15,"nodeType":"190","endLine":65,"endColumn":66},{"ruleId":"170","severity":1,"message":"183","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"191","line":4,"column":78,"nodeType":"172","messageId":"173","endLine":4,"endColumn":92},{"ruleId":"170","severity":1,"message":"192","line":4,"column":94,"nodeType":"172","messageId":"173","endLine":4,"endColumn":108},{"ruleId":"170","severity":1,"message":"184","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":13},{"ruleId":"170","severity":1,"message":"193","line":7,"column":17,"nodeType":"172","messageId":"173","endLine":7,"endColumn":40},{"ruleId":"170","severity":1,"message":"185","line":7,"column":60,"nodeType":"172","messageId":"173","endLine":7,"endColumn":71},{"ruleId":"170","severity":1,"message":"186","line":7,"column":122,"nodeType":"172","messageId":"173","endLine":7,"endColumn":136},{"ruleId":"170","severity":1,"message":"187","line":7,"column":138,"nodeType":"172","messageId":"173","endLine":7,"endColumn":163},{"ruleId":"170","severity":1,"message":"183","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"184","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":7,"column":14,"nodeType":"172","messageId":"173","endLine":7,"endColumn":15},{"ruleId":"170","severity":1,"message":"185","line":7,"column":17,"nodeType":"172","messageId":"173","endLine":7,"endColumn":28},{"ruleId":"188","severity":1,"message":"189","line":64,"column":15,"nodeType":"190","endLine":64,"endColumn":66},{"ruleId":"170","severity":1,"message":"183","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"192","line":3,"column":78,"nodeType":"172","messageId":"173","endLine":3,"endColumn":92},{"ruleId":"170","severity":1,"message":"184","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":6,"column":14,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"185","line":6,"column":83,"nodeType":"172","messageId":"173","endLine":6,"endColumn":94},{"ruleId":"170","severity":1,"message":"186","line":6,"column":96,"nodeType":"172","messageId":"173","endLine":6,"endColumn":110},{"ruleId":"170","severity":1,"message":"187","line":6,"column":112,"nodeType":"172","messageId":"173","endLine":6,"endColumn":137},{"ruleId":"170","severity":1,"message":"183","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"184","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":6,"column":14,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"185","line":6,"column":17,"nodeType":"172","messageId":"173","endLine":6,"endColumn":28},{"ruleId":"188","severity":1,"message":"189","line":63,"column":15,"nodeType":"190","endLine":63,"endColumn":66},{"ruleId":"170","severity":1,"message":"184","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"194","line":5,"column":78,"nodeType":"172","messageId":"173","endLine":5,"endColumn":102},{"ruleId":"170","severity":1,"message":"185","line":5,"column":104,"nodeType":"172","messageId":"173","endLine":5,"endColumn":115},{"ruleId":"170","severity":1,"message":"186","line":5,"column":117,"nodeType":"172","messageId":"173","endLine":5,"endColumn":131},{"ruleId":"170","severity":1,"message":"187","line":5,"column":133,"nodeType":"172","messageId":"173","endLine":5,"endColumn":158},{"ruleId":"188","severity":1,"message":"189","line":63,"column":17,"nodeType":"190","endLine":63,"endColumn":68},{"ruleId":"170","severity":1,"message":"195","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":20},{"ruleId":"166","replacedBy":"196"},{"ruleId":"168","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":35,"column":13,"nodeType":"200","endLine":35,"endColumn":43},{"ruleId":"198","severity":1,"message":"199","line":36,"column":13,"nodeType":"200","endLine":36,"endColumn":43},{"ruleId":"198","severity":1,"message":"199","line":47,"column":13,"nodeType":"200","endLine":47,"endColumn":43},{"ruleId":"170","severity":1,"message":"171","line":4,"column":14,"nodeType":"172","messageId":"173","endLine":4,"endColumn":15},{"ruleId":"188","severity":1,"message":"189","line":63,"column":17,"nodeType":"190","endLine":63,"endColumn":68},{"ruleId":"170","severity":1,"message":"184","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"185","line":5,"column":53,"nodeType":"172","messageId":"173","endLine":5,"endColumn":64},{"ruleId":"170","severity":1,"message":"186","line":5,"column":66,"nodeType":"172","messageId":"173","endLine":5,"endColumn":80},{"ruleId":"170","severity":1,"message":"187","line":5,"column":82,"nodeType":"172","messageId":"173","endLine":5,"endColumn":107},{"ruleId":"170","severity":1,"message":"184","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"186","line":5,"column":78,"nodeType":"172","messageId":"173","endLine":5,"endColumn":92},{"ruleId":"170","severity":1,"message":"187","line":5,"column":94,"nodeType":"172","messageId":"173","endLine":5,"endColumn":119},{"ruleId":"188","severity":1,"message":"189","line":64,"column":17,"nodeType":"190","endLine":64,"endColumn":68},{"ruleId":"170","severity":1,"message":"184","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":5,"column":14,"nodeType":"172","messageId":"173","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"185","line":5,"column":78,"nodeType":"172","messageId":"173","endLine":5,"endColumn":89},{"ruleId":"170","severity":1,"message":"186","line":5,"column":91,"nodeType":"172","messageId":"173","endLine":5,"endColumn":105},{"ruleId":"170","severity":1,"message":"187","line":5,"column":107,"nodeType":"172","messageId":"173","endLine":5,"endColumn":132},{"ruleId":"188","severity":1,"message":"189","line":63,"column":17,"nodeType":"190","endLine":63,"endColumn":68},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"no-unused-vars","'c' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'Redirect' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkExistingData'. Either include it or remove the dependency array.","ArrayExpression",["203"],"Parsing error: Export 'url' is not defined\n\n\u001b[0m \u001b[90m 281 | \u001b[39m\u001b[36mconst\u001b[39m varToString \u001b[33m=\u001b[39m varObj \u001b[33m=>\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(varObj)[\u001b[35m0\u001b[39m]\u001b[33m;\u001b[39m \u001b[0m\n\u001b[0m \u001b[90m 282 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 283 | \u001b[39m\u001b[36mexport\u001b[39m {c\u001b[33m,\u001b[39m getClickedDate\u001b[33m,\u001b[39m url\u001b[33m,\u001b[39m varToString\u001b[33m,\u001b[39m nightModeTransitionTime\u001b[33m,\u001b[39m victoryAxisStyle\u001b[33m,\u001b[39m \u001b[33mVictoryScatterLineComplement\u001b[39m\u001b[33m,\u001b[39m getLongDate\u001b[33m,\u001b[39m victoryLineStyle\u001b[33m,\u001b[39m flyoutStyleNight\u001b[33m,\u001b[39m victoryTooltipLabelStyle\u001b[33m,\u001b[39m yesterdaysDate\u001b[33m,\u001b[39m yesterdaysDateLabelPrimer\u001b[33m,\u001b[39m createData1\u001b[33m,\u001b[39m createDateLabels\u001b[33m,\u001b[39m createXAxisTickValues}\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 284 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 285 | \u001b[39m\u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m url\u001b[33m;\u001b[39m\u001b[0m","'Container' is defined but never used.","'axios' is defined but never used.","'getLongDate' is defined but never used.","'yesterdaysDate' is defined but never used.","'yesterdaysDateLabelPrimer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","'nightModeTransitionTime' is defined but never used.","'victoryTooltipLabelStyle' is defined but never used.","'shootingStar' is defined but never used.",["201"],["202"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},"Update the dependencies array to be: [checkExistingData, props]",{"range":"206","text":"207"},[1865,1872],"[checkExistingData, props]"]